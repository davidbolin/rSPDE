[{"path":"https://davidbolin.github.io/rSPDE/articles/build_source.html","id":"building-from-source","dir":"Articles","previous_headings":"","what":"Building from source","title":"Building the rSPDE package from source on Mac and Linux","text":"build rSPDE source need obtain GitHub version. dependencies (see install ), can install rSPDE package source running following command R (development version): , want install stable version:","code":"remotes::install_github(\"davidbolin/rspde\", ref = \"devel-src\") remotes::install_github(\"davidbolin/rspde\", ref = \"stable-src\")"},{"path":"https://davidbolin.github.io/rSPDE/articles/build_source.html","id":"dependencies-on-linux","dir":"Articles","previous_headings":"","what":"Dependencies on Linux","title":"Building the rSPDE package from source on Mac and Linux","text":"rSPDE package depends Eigen C++ library. install Eigen Ubuntu, run: install Eigen Arch-Linux Manjaro, run: install Eigen Red Hat, Fedor CentOS, run: install Eigen OpenSuse, run:","code":"sudo apt install libeigen3-dev sudo pacman -S eigen3 sudo yum install eigen3-devel sudo zypper install eigen3-devel"},{"path":"https://davidbolin.github.io/rSPDE/articles/build_source.html","id":"dependencies-on-mac","dir":"Articles","previous_headings":"","what":"Dependencies on Mac","title":"Building the rSPDE package from source on Mac and Linux","text":"can install Eigen MacOS Homebrew. install Homebrew, run: install Eigen using Homebrew, run: Finally, installing eigen brew gives error find eigen library, can create symbolic link eigen‚Äôs path : also need create following symbolic links related homebrew: Finally, need install gcc-14: also create symbolic links associated gcc:","code":"/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\" brew install eigen sudo ln -s $(brew --prefix eigen)/include/eigen3 /usr/local/include/eigen3 sudo ln -s $(brew --prefix)/lib /usr/local/brewlib sudo ln -s $(brew --prefix)/include /usr/local/brewinclude brew install gcc@14 sudo ln -s $(brew --prefix gcc@14)/bin/gcc-14 /usr/local/bin/gcc sudo ln -s $(brew --prefix gcc@14)/bin/g++-14 /usr/local/bin/g++"},{"path":"https://davidbolin.github.io/rSPDE/articles/build_source.html","id":"adjusting-the-makefile","dir":"Articles","previous_headings":"","what":"Adjusting the Makefile","title":"Building the rSPDE package from source on Mac and Linux","text":"experience trouble installing rSPDE package, might need adjust Makefile. , need rSPDE source files locally computer. end, can, instance, close rSPDE repository running following command terminal: can also download source files. Now, let us discuss Makefile. Makefile following base form:","code":"git clone https://github.com/davidbolin/rSPDE.git toInclude = ${R_LIBRARY_DIR}/INLA/include/  obj = cgeneric_mvnormdens.o cgeneric_aux_nonstat.o cgeneric_aux_nonstat_fixed.o \\       cgeneric_rspde_stat_frac_model.o cgeneric_rspde_nonstat_general.o \\       cgeneric_rspde_stat_general.o cgeneric_rspde_stat_parsim_gen.o \\       cgeneric_rspde_stat_parsim_fixed.o cgeneric_rspde_stat_int.o \\       cgeneric_rspde_nonstat_gen_fixed.o cgeneric_rspde_nonstat_int.o \\       cgeneric_aux_nonstat_int.o  all : rSPDE.so  CC = clang CXX = clang++  EIGEN_MAC = /usr/local/include/eigen3/ EIGEN_LINUX = /usr/include/eigen3/  flags = -O2 -Wall -Wextra -fpic  %.o: %.c     $(CC) $(flags) -Iinclude -I$(toInclude)  -c $^ -o $@  %.o: %.cpp     $(CXX) $(flags)  -I$(toInclude) -I$(EIGEN_MAC) -I$(EIGEN_LINUX) -c $^ -o $@  rSPDE.so: $(obj)     $(CXX) -shared *.o -o ../inst/shared/rspde_cgeneric_models.so -lblas -llapack  clean :     rm -f *.o  .PHONY: all clean"},{"path":"https://davidbolin.github.io/rSPDE/articles/build_source.html","id":"adjusts-on-linux","dir":"Articles","previous_headings":"Adjusting the Makefile","what":"Adjusts on Linux","title":"Building the rSPDE package from source on Mac and Linux","text":"linux, recommend use gcc-12 g++-12 compilers. end, one must install gcc g++, change following lines Makefile: One also confirm location Eigen library. default location /usr/include/eigen3/ already set Makefile. Eigen installed different location, need update Makefile changing EIGEN_LINUX variable: install gcc g++ Ubuntu, run install gcc g++ Arch-Linux Manjaro, run: install gcc g++ Red Hat, Fedor CentOS, run: install gcc g++ OpenSuse, run:","code":"CC = gcc CXX = g++ EIGEN_LINUX = /correct_path/ sudo apt install gcc g++ sudo pacman -S gcc g++ sudo yum install gcc g++ sudo zypper install gcc g++"},{"path":"https://davidbolin.github.io/rSPDE/articles/build_source.html","id":"adjusts-on-mac","dir":"Articles","previous_headings":"Adjusting the Makefile","what":"Adjusts on Mac","title":"Building the rSPDE package from source on Mac and Linux","text":"Mac, especially intel processors, found stable compiler clang clang++. Thus, one must following lines Makefile: One also confirm location Eigen library. default location /usr/local already set Makefile. installed Eigen using Homebrew, can check location Eigen installation using following command: can, , update EIGEN_MAC variable Makefile correct path.","code":"brew --prefix eigen"},{"path":"https://davidbolin.github.io/rSPDE/articles/intrinsic.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Intrinsic models in the rSPDE package","text":"vignette provide brief introduction intrinsic models implemented rSPDE package.","code":""},{"path":"https://davidbolin.github.io/rSPDE/articles/intrinsic.html","id":"model-specification-and-simulation","dir":"Articles","previous_headings":"","what":"Model specification and simulation","title":"Intrinsic models in the rSPDE package","text":"intrinsic models defined (‚àíŒî)Œ≤/2(Œ∫2‚àíŒî)Œ±/2(œÑu)=ùí≤, (-\\Delta)^{\\beta/2}(\\kappa^2-\\Delta)^{\\alpha/2}(\\tau u) = \\mathcal{W},  Œ±+Œ≤>d/2\\alpha + \\beta > d/2 dd dimension spatial domain. models handled performing two rational approximations, one fractional operator. illustrate models, begin defining mesh [0,2]√ó[0,2][0,2]\\times [0, 2]:  now use intrinsic.matern.operators() function construct rSPDE representation model. see rSPDE model approximating true model, can compare variogram approximation true variogram (implemented variogram.intrinsic.spde()) follows.  can now use simulate function simulate realization field uu:  default, field simulated zero-integral constraint. Let us now consider simple Gaussian linear model spatial field u(ùê¨)u(\\mathbf{s}) observed mm locations, {ùê¨1,‚Ä¶,ùê¨m}\\{\\mathbf{s}_1 , \\ldots , \\mathbf{s}_m \\} Gaussian measurement noise. =1,‚Ä¶,m,= 1,\\ldots,m, yi=u(ùê¨i)+Œµi, \\begin{align}  y_i &= u(\\mathbf{s}_i)+\\varepsilon_i\\\\ \\end{align},  Œµ1,‚Ä¶,Œµm\\varepsilon_1,\\ldots,\\varepsilon_{m} iid normally distributed mean 0 standard deviation 0.1. generate data set y model, first draw observation locations random domain use spde.make.() functions (wraps functions fm_basis(), fm_block() fm_row_kron() fmesher package) construct observation matrix can used evaluate simulated field uu observation locations. simply add measurment noise. generated data can seen following image.","code":"library(fmesher) bnd <- fm_segm(rbind(c(0, 0), c(2, 0), c(2, 2), c(0, 2)), is.bnd = TRUE) mesh_2d <- fm_mesh_2d(     boundary = bnd,      cutoff = 0.04,     max.edge = c(0.05) ) plot(mesh_2d, main = \"\") library(rSPDE) kappa <- 10 tau <- 0.01 alpha <- 2 beta <- 1 op <- intrinsic.matern.operators(kappa = kappa, tau = tau, alpha = alpha,                                   beta = beta, mesh = mesh_2d) Sigma <- op$A[,-1] %*% solve(op$Q[-1,-1], t(op$A[,-1])) One <- rep(1, times = ncol(Sigma)) D <- diag(Sigma) Gamma <- 0.5 * (One %*% t(D) + D %*% t(One) - 2 * Sigma) point <- matrix(c(1,1),1,2) Aobs <- spde.make.A(mesh = mesh_2d, loc = point) vario <- variogram.intrinsic.spde(point, mesh_2d$loc[,1:2], kappa,                                    alpha = alpha, tau = tau,                                   beta = beta, L = 2, d = 2)  d = sqrt((mesh_2d$loc[,1]-point[1])^2 +  (mesh_2d$loc[,2]-point[2])^2) plot(d, Aobs%*%Gamma, xlim = c(0,0.5), ylim = c(0,0.2)) lines(sort(d),sort(vario),col=2, lwd = 2) u <- simulate(op,nsim = 1)  proj <- fm_evaluator(mesh_2d, dims = c(100, 100)) field <- fm_evaluate(proj, field = as.vector(u)) field.df <- data.frame(x1 = proj$lattice$loc[,1],                        x2 = proj$lattice$loc[,2],                         y = as.vector(field))  library(ggplot2) library(viridis) #> Loading required package: viridisLite ggplot(field.df, aes(x = x1, y = x2, fill = y)) +     geom_raster() +     scale_fill_viridis() n_loc <- 2000 loc_2d_mesh <- matrix(2*runif(n_loc * 2), n_loc, 2)  A <- spde.make.A(   mesh = mesh_2d,   loc = loc_2d_mesh ) sigma.e <- 0.1 y <- A %*% u + rnorm(n_loc) * sigma.e library(ggplot2) library(viridis) df <- data.frame(x1 = as.double(loc_2d_mesh[, 1]),   x2 = as.double(loc_2d_mesh[, 2]), y = as.double(y)) ggplot(df, aes(x = x1, y = x2, col = y)) +   geom_point() +   scale_color_viridis()"},{"path":"https://davidbolin.github.io/rSPDE/articles/intrinsic.html","id":"fitting-the-model-with-r-inla","dir":"Articles","previous_headings":"","what":"Fitting the model with R-INLA","title":"Intrinsic models in the rSPDE package","text":"now fit model using R-INLA implementation rational SPDE approach. details implementation can found R-INLA implementation rational SPDE approach. begin loading INLA package creating AA matrix, index, inla.stack object. now, model can estimated Œ≤=1\\beta = 1 Œ±=1\\alpha = 1 Œ±=2\\alpha = 2. non-fractional models, can use standard INLA functions make required elements. now create model object. Finally, create formula fit model data: can get summary fit: get summary fit random field , can following:","code":"library(INLA) #> Loading required package: sp #> This is INLA_24.06.27 built 2024-06-27 02:36:04 UTC. #>  - See www.r-inla.org/contact-us for how to get help. #>  - List available models/likelihoods/etc with inla.list.models() #>  - Use inla.doc(<NAME>) to access documentation mesh.index <- inla.spde.make.index(name = \"field\", n.spde = mesh_2d$n)  st.dat <- inla.stack(data = list(y = as.vector(y)), A = A, effects = mesh.index) rspde_model <- rspde.intrinsic.matern(mesh = mesh_2d, alpha = alpha) f <- y ~ -1 + f(field, model = rspde_model) rspde_fit <- inla(f,                   data = inla.stack.data(st.dat),                   family = \"gaussian\",                   control.predictor = list(A = inla.stack.A(st.dat))) summary(rspde_fit) #> Time used: #>     Pre = 0.392, Running = 24.7, Post = 0.19, Total = 25.3  #> Random effects: #>   Name     Model #>     field CGeneric #>  #> Model hyperparameters: #>                                          mean    sd 0.025quant 0.5quant #> Precision for the Gaussian observations 96.19 3.473      89.55    96.12 #> Theta1 for field                        -4.52 0.089      -4.70    -4.52 #> Theta2 for field                         2.14 0.125       1.89     2.14 #>                                         0.975quant  mode #> Precision for the Gaussian observations     103.23 95.96 #> Theta1 for field                             -4.35 -4.52 #> Theta2 for field                              2.38  2.14 #>  #> Marginal log-Likelihood:  1333.96  #>  is computed  #> Posterior summaries for the linear predictor and the fitted values are computed #> (Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)') result_fit <- rspde.result(rspde_fit, \"field\", rspde_model) summary(result_fit) #>            mean         sd 0.025quant  0.5quant 0.975quant      mode #> tau   0.0108932 0.00096368 0.00911257 0.0108408  0.0129029 0.0107703 #> kappa 8.5467100 1.06478000 6.64417000 8.4819700 10.8206000 8.3579000 tau <- op$tau result_df <- data.frame(   parameter = c(\"tau\", \"kappa\"),   true = c(tau, kappa), mean = c(result_fit$summary.tau$mean,                                      result_fit$summary.kappa$mean),   mode = c(result_fit$summary.tau$mode, result_fit$summary.kappa$mode) ) print(result_df) #>   parameter  true       mean       mode #> 1       tau  0.01 0.01089324 0.01077025 #> 2     kappa 10.00 8.54671228 8.35789522"},{"path":"https://davidbolin.github.io/rSPDE/articles/intrinsic.html","id":"kriging-with-r-inla-implementation","dir":"Articles","previous_headings":"","what":"Kriging with R-INLA implementation","title":"Intrinsic models in the rSPDE package","text":"Let us now obtain predictions (.e., kriging) latent field dense grid region. begin creating grid locations want compute predictions. end, can use rspde.mesh.projector() function. function arguments function inla.mesh.projector() difference rSPDE version also argument nu argument rspde.order. Thus, proceed fashion R-INLA‚Äôs standard SPDE implementation: lattice contains 100 √ó 100 locations (default). Let us now calculate predictions jointly estimation. end, first, begin linking prediction coordinates mesh nodes AA matrix now make stack prediction locations. data prediction locations, set y= NA. join stack estimation stack. joint estimation takes , therefore turn computation certain things interested , marginals random effect. also use simplified integration strategy (actually using posterior mode hyper-parameters) command control.inla = list(int.strategy = \"eb\"), .e.¬†empirical Bayes: extract indices prediction nodes extract mean standard deviation response: Finally, plot results. First mean:  , marginal standard deviations:","code":"projgrid <- inla.mesh.projector(mesh_2d,   xlim = c(0, 2),   ylim = c(0, 2) ) A.prd <- projgrid$proj$A ef.prd <- list(c(mesh.index)) st.prd <- inla.stack(   data = list(y = NA),   A = list(A.prd), tag = \"prd\",   effects = ef.prd ) st.all <- inla.stack(st.dat, st.prd) rspde_fitprd <- inla(f,   family = \"Gaussian\",   data = inla.stack.data(st.all),   control.predictor = list(     A = inla.stack.A(st.all),     compute = TRUE, link = 1   ),   control.compute = list(     return.marginals = FALSE,     return.marginals.predictor = FALSE   ),   control.inla = list(int.strategy = \"eb\") ) id.prd <- inla.stack.index(st.all, \"prd\")$data m.prd <- matrix(rspde_fitprd$summary.fitted.values$mean[id.prd], 100, 100) sd.prd <- matrix(rspde_fitprd$summary.fitted.values$sd[id.prd], 100, 100) field.pred.df <- data.frame(x1 = projgrid$lattice$loc[,1],                         x2 = projgrid$lattice$loc[,2],                          y = as.vector(m.prd)) ggplot(field.pred.df, aes(x = x1, y = x2, fill = y)) +   geom_raster()  + scale_fill_viridis() field.pred.sd.df <- data.frame(x1 = proj$lattice$loc[,1],                         x2 = proj$lattice$loc[,2],                          sd = as.vector(sd.prd)) ggplot(field.pred.sd.df, aes(x = x1, y = x2, fill = sd)) +   geom_raster() + scale_fill_viridis()"},{"path":"https://davidbolin.github.io/rSPDE/articles/intrinsic.html","id":"extreme-value-models","dir":"Articles","previous_headings":"","what":"Extreme value models","title":"Intrinsic models in the rSPDE package","text":"used extreme value statistics, one might want use particular form mean value latent field uu, zero one location kk given diagonal Q‚àík,‚àík‚àí1Q_{-k,-k}^{-1} remaining locations. option can specified via mean.correction argument rspde.intrinsic.matern: can fit model : see posterior distributions parameters can :","code":"rspde_model2 <- rspde.intrinsic.matern(mesh = mesh_2d, alpha = alpha,                                        mean.correction = TRUE) f <- y ~ -1 + f(field, model = rspde_model2) rspde_fit <- inla(f,                   data = inla.stack.data(st.dat),                   family = \"gaussian\",                   control.predictor = list(A = inla.stack.A(st.dat))) result_fit <- rspde.result(rspde_fit, \"field\", rspde_model2) posterior_df_fit <- gg_df(result_fit)  ggplot(posterior_df_fit) + geom_line(aes(x = x, y = y)) +  facet_wrap(~parameter, scales = \"free\") + labs(y = \"Density\")"},{"path":"https://davidbolin.github.io/rSPDE/articles/rSPDE.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"An introduction to the rSPDE package","text":"vignette provide brief introduction rSPDE package. main approach constructing rational approximations covariance-based rational SPDE approach Bolin, Simas, Xiong (2023). package contains three main ‚Äúfamilies‚Äù functions implement approach: interface R-INLA; interface inlabru; stand-alone implementation approach. illustrate different functions, begin using package generate simple data set, analyzed using different approaches. details family functions given following additional vignettes: R-INLA implementation rational SPDE approach inlabru implementation rational SPDE approach Rational approximation rSPDE package rSPDE package also separate group functions performing operator-based rational approximations introduced Bolin Kirchner (2020). especially useful performing rational approximations fractional SPDE models non-Gaussian noise. example approximation suitable one -called type-G L√©vy noises. refer reader Wallin Bolin (2015), Bolin (2013) Asar et al. (2020) examples models driven type-G L√©vy noises. also refer reader ngme package one can fit models. explore functions performing operator-based rational approximation vignette: Operator-based rational approximation rSPDE package","code":""},{"path":"https://davidbolin.github.io/rSPDE/articles/rSPDE.html","id":"a-toy-data-set","dir":"Articles","previous_headings":"","what":"A toy data set","title":"An introduction to the rSPDE package","text":"begin generating toy data set. illustration, simulate data set two-dimensional spatial domain. end, need construct mesh domain interest compute matrices needed define operator. use R-INLA package create mesh obtain matrices interest. begin defining mesh [0,1]√ó[0,1][0,1]\\times [0, 1]:  now use matern.operators() function construct rational SPDE approximation order m=2m=2 Gaussian random field Mat√©rn covariance function [0,1]√ó[0,1][0,1]\\times [0, 1]. choose ŒΩ=0.5\\nu=0.5 corresponds exponential covariance. also set œÉ=1\\sigma=1 range 0.20.2. can now use simulate function simulate realization field uu: Let us now consider simple Gaussian linear model spatial field u(ùê¨)u(\\mathbf{s}) observed mm locations, {ùê¨1,‚Ä¶,ùê¨m}\\{\\mathbf{s}_1 , \\ldots , \\mathbf{s}_m \\} Gaussian measurement noise. =1,‚Ä¶,m,= 1,\\ldots,m, yi=u(ùê¨i)+Œµi, \\begin{align}  y_i &= u(\\mathbf{s}_i)+\\varepsilon_i\\\\ \\end{align},  Œµ1,‚Ä¶,Œµm\\varepsilon_1,\\ldots,\\varepsilon_{m} iid normally distributed mean 0 standard deviation 0.1. generate data set y model, first draw observation locations random domain use spde.make.() functions (wraps functions fm_basis(), fm_block() fm_row_kron() fmesher package) construct observation matrix can used evaluate simulated field uu observation locations. simply add measurment noise. generated data can seen following image.  simulated random field shown following figure.","code":"library(fmesher) n_loc <- 2000 loc_2d_mesh <- matrix(runif(n_loc * 2), n_loc, 2) mesh_2d <- fm_mesh_2d(   loc = loc_2d_mesh,   cutoff = 0.05,   max.edge = c(0.1, 0.5) ) plot(mesh_2d, main = \"\") library(rSPDE) sigma <- 2 range <- 0.25 nu <- 1.3 kappa <- sqrt(8 * nu) / range op <- matern.operators(   mesh = mesh_2d, nu = nu,   range = range, sigma = sigma, m = 2,   parameterization = \"matern\" ) tau <- op$tau u <- simulate(op) A <- spde.make.A(   mesh = mesh_2d,   loc = loc_2d_mesh ) sigma.e <- 0.1 y <- A %*% u + rnorm(n_loc) * sigma.e library(ggplot2) library(viridis) #> Loading required package: viridisLite df <- data.frame(x1 = as.double(loc_2d_mesh[, 1]),   x2 = as.double(loc_2d_mesh[, 2]), y = as.double(y)) ggplot(df, aes(x = x1, y = x2, col = y)) +   geom_point() +   scale_color_viridis() proj <- fm_evaluator(mesh_2d, dims = c(100, 100)) field <- fm_evaluate(proj, field = as.vector(u)) field.df <- data.frame(x1 = proj$lattice$loc[,1],                         x2 = proj$lattice$loc[,2],                          y = as.vector(field)) ggplot(field.df, aes(x = x1, y = x2, fill = y)) +   geom_raster() + xlim(0,1) + ylim(0,1) +    scale_fill_viridis()"},{"path":"https://davidbolin.github.io/rSPDE/articles/rSPDE.html","id":"fitting-the-model-with-r-inla-implementation-of-the-rational-spde-approach","dir":"Articles","previous_headings":"","what":"Fitting the model with R-INLA implementation of the rational SPDE approach","title":"An introduction to the rSPDE package","text":"now fit model toy data set using R-INLA implementation rational SPDE approach. details implementation can found R-INLA implementation rational SPDE approach. begin loading INLA package creating AA matrix, index, inla.stack object. now create model object. need set upper bound smoothness parameter ŒΩ\\nu. default value 44. increase upper bound ŒΩ\\nu also increase computational cost, decrease upper bound also decrease computatoinal cost. example set nu.upper.bound=2. See R-INLA implementation rational SPDE approach details. Finally, create formula fit model data: can get summary fit: get summary fit random field , can following: can also obtain summary matern parameterization setting parameterization argument matern:","code":"library(INLA) #> Loading required package: sp #> This is INLA_24.06.27 built 2024-06-27 02:36:04 UTC. #>  - See www.r-inla.org/contact-us for how to get help. #>  - List available models/likelihoods/etc with inla.list.models() #>  - Use inla.doc(<NAME>) to access documentation  Abar <- rspde.make.A(mesh = mesh_2d, loc = loc_2d_mesh) mesh.index <- rspde.make.index(name = \"field\", mesh = mesh_2d)  st.dat <- inla.stack(   data = list(y = as.vector(y)),   A = Abar,   effects = mesh.index ) rspde_model <- rspde.matern(   mesh = mesh_2d,   nu.upper.bound = 2,   parameterization = \"spde\" ) f <-   y ~ -1 + f(field, model = rspde_model) rspde_fit <-   inla(f,     data = inla.stack.data(st.dat),     family = \"gaussian\",     control.predictor =       list(A = inla.stack.A(st.dat))   ) summary(rspde_fit) #> Time used: #>     Pre = 0.393, Running = 2.49, Post = 0.0637, Total = 2.95  #> Random effects: #>   Name     Model #>     field CGeneric #>  #> Model hyperparameters: #>                                            mean    sd 0.025quant 0.5quant #> Precision for the Gaussian observations 101.647 3.518     94.772  101.629 #> Theta1 for field                         -4.285 0.111     -4.520   -4.279 #> Theta2 for field                          2.337 0.128      2.071    2.341 #> Theta3 for field                         -0.038 0.075     -0.169   -0.043 #>                                         0.975quant    mode #> Precision for the Gaussian observations    108.620 101.688 #> Theta1 for field                            -4.083  -4.253 #> Theta2 for field                             2.575   2.361 #> Theta3 for field                             0.123  -0.066 #>  #> Marginal log-Likelihood:  853.70  #>  is computed  #> Posterior summaries for the linear predictor and the fitted values are computed #> (Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)') result_fit <- rspde.result(rspde_fit, \"field\", rspde_model) summary(result_fit) #>             mean         sd 0.025quant   0.5quant 0.975quant       mode #> tau    0.0138648 0.00151296  0.0109123  0.0138771  0.0168024  0.0140294 #> kappa 10.4318000 1.31725000  7.9562800 10.4065000 13.1098000 10.4177000 #> nu     0.9808110 0.03703950  0.9162260  0.9777190  1.0603700  0.9665480 tau <- op$tau result_df <- data.frame(   parameter = c(\"tau\", \"kappa\", \"nu\"),   true = c(tau, kappa, nu), mean = c(     result_fit$summary.tau$mean,     result_fit$summary.kappa$mean,     result_fit$summary.nu$mean   ),   mode = c(     result_fit$summary.tau$mode,     result_fit$summary.kappa$mode,     result_fit$summary.nu$mode   ) ) print(result_df) #>   parameter         true        mean        mode #> 1       tau  0.004452908  0.01386479  0.01402938 #> 2     kappa 12.899612397 10.43178650 10.41766119 #> 3        nu  1.300000000  0.98081054  0.96654822 result_fit_matern <- rspde.result(rspde_fit, \"field\", rspde_model,                                   parameterization = \"matern\") summary(result_fit_matern) #>             mean        sd 0.025quant 0.5quant 0.975quant     mode #> std.dev 2.831710 0.3015710   2.323560 2.802110   3.504450 2.714800 #> range   0.277433 0.0382852   0.212897 0.273855   0.361982 0.273978 #> nu      0.980811 0.0370395   0.916226 0.977719   1.060370 0.966548 result_df_matern <- data.frame(   parameter = c(\"sigma\", \"range\", \"nu\"),   true = c(sigma, range, nu), mean = c(     result_fit_matern$summary.std.dev$mean,     result_fit_matern$summary.range$mean,     result_fit_matern$summary.nu$mean   ),   mode = c(     result_fit_matern$summary.std.dev$mode,     result_fit_matern$summary.range$mode,     result_fit_matern$summary.nu$mode   ) ) print(result_df_matern) #>   parameter true      mean      mode #> 1     sigma 2.00 2.8317104 2.7147965 #> 2     range 0.25 0.2774329 0.2739779 #> 3        nu 1.30 0.9808105 0.9665482"},{"path":"https://davidbolin.github.io/rSPDE/articles/rSPDE.html","id":"kriging-with-r-inla-implementation-of-the-rational-spde-approach","dir":"Articles","previous_headings":"","what":"Kriging with R-INLA implementation of the rational SPDE approach","title":"An introduction to the rSPDE package","text":"Let us now obtain predictions (.e., kriging) latent field dense grid region. begin creating grid locations want compute predictions. end, can use rspde.mesh.projector() function. function arguments function inla.mesh.projector() difference rSPDE version also argument nu argument rspde.order. Thus, proceed fashion R-INLA‚Äôs standard SPDE implementation: lattice contains 100 √ó 100 locations (default) shown following figure:  Let us now calculate predictions jointly estimation. end, first, begin linking prediction coordinates mesh nodes AA matrix now make stack prediction locations. data prediction locations, set y= NA. join stack estimation stack. joint estimation takes , therefore turn computation certain things interested , marginals random effect. also use simplified integration strategy (actually using posterior mode hyper-parameters) command control.inla = list(int.strategy = \"eb\"), .e.¬†empirical Bayes: extract indices prediction nodes extract mean standard deviation response: Finally, plot results. First mean:  , marginal standard deviations:","code":"projgrid <- rspde.mesh.projector(mesh_2d,   xlim = c(0, 1),   ylim = c(0, 1) ) coord.prd <- projgrid$lattice$loc plot(coord.prd, type = \"p\", cex = 0.1) A.prd <- projgrid$proj$A ef.prd <- list(c(mesh.index)) st.prd <- inla.stack(   data = list(y = NA),   A = list(A.prd), tag = \"prd\",   effects = ef.prd ) st.all <- inla.stack(st.dat, st.prd) rspde_fitprd <- inla(f,   family = \"Gaussian\",   data = inla.stack.data(st.all),   control.predictor = list(     A = inla.stack.A(st.all),     compute = TRUE, link = 1   ),   control.compute = list(     return.marginals = FALSE,     return.marginals.predictor = FALSE   ),   control.inla = list(int.strategy = \"eb\") ) id.prd <- inla.stack.index(st.all, \"prd\")$data m.prd <- matrix(rspde_fitprd$summary.fitted.values$mean[id.prd], 100, 100) sd.prd <- matrix(rspde_fitprd$summary.fitted.values$sd[id.prd], 100, 100) field.pred.df <- data.frame(x1 = projgrid$lattice$loc[,1],                         x2 = projgrid$lattice$loc[,2],                          y = as.vector(m.prd)) ggplot(field.pred.df, aes(x = x1, y = x2, fill = y)) +   geom_raster() + xlim(0,1) + ylim(0,1) +    scale_fill_viridis() #> Warning: Removed 396 rows containing missing values or values outside the scale range #> (`geom_raster()`). field.pred.sd.df <- data.frame(x1 = proj$lattice$loc[,1],                         x2 = proj$lattice$loc[,2],                          sd = as.vector(sd.prd)) ggplot(field.pred.sd.df, aes(x = x1, y = x2, fill = sd)) +   geom_raster() + xlim(0,1) + ylim(0,1) +    geom_raster() +   scale_fill_viridis() #> Warning: Removed 6156 rows containing missing values or values outside the scale range #> (`geom_raster()`). #> Removed 6156 rows containing missing values or values outside the scale range #> (`geom_raster()`)."},{"path":"https://davidbolin.github.io/rSPDE/articles/rSPDE.html","id":"fitting-the-model-with-inlabru-implementation-of-the-rational-spde-approach","dir":"Articles","previous_headings":"","what":"Fitting the model with inlabru implementation of the rational SPDE approach","title":"An introduction to the rSPDE package","text":"now fit model toy data set using inlabru implementation rational SPDE approach. details implementation can found inlabru implementation rational SPDE approach. begin loading inlabru package: creation model object R-INLA‚Äôs case: advantage inlabru need form stack manually, can simply collect required data data.frame(): Finally, create component fit: stage, can get summary fit just R-INLA case: also obtain summary field : Let us obtain summary matern parameterization setting parameterization argument matern:","code":"library(inlabru) rspde_model <- rspde.matern(   mesh = mesh_2d,   nu.upper.bound = 2,   parameterization = \"spde\" ) toy_df <- data.frame(coord1 = loc_2d_mesh[,1],                      coord2 = loc_2d_mesh[,2],                      y = as.vector(y)) coordinates(toy_df) <- c(\"coord1\", \"coord2\") cmp <-   y ~ -1 + field(coordinates, model = rspde_model)  rspde_bru_fit <-   bru(cmp,       data=toy_df,     options=list(     family = \"gaussian\")   ) summary(rspde_bru_fit) #> inlabru version: 2.11.1 #> INLA version: 24.06.27 #> Components: #> field: main = cgeneric(coordinates), group = exchangeable(1L), replicate = iid(1L) #> Likelihoods: #>   Family: 'gaussian' #>     Data class: 'SpatialPointsDataFrame' #>     Predictor: y ~ . #> Time used: #>     Pre = 0.236, Running = 2.44, Post = 0.14, Total = 2.82  #> Random effects: #>   Name     Model #>     field CGeneric #>  #> Model hyperparameters: #>                                            mean    sd 0.025quant 0.5quant #> Precision for the Gaussian observations 101.687 3.546     94.954  101.601 #> Theta1 for field                         -4.291 0.113     -4.514   -4.290 #> Theta2 for field                          2.346 0.136      2.059    2.352 #> Theta3 for field                         -0.033 0.074     -0.169   -0.035 #>                                         0.975quant    mode #> Precision for the Gaussian observations     108.92 101.378 #> Theta1 for field                             -4.07  -4.288 #> Theta2 for field                              2.59   2.382 #> Theta3 for field                              0.12  -0.047 #>  #> Deviance Information Criterion (DIC) ...............: -3266.65 #> Deviance Information Criterion (DIC, saturated) ....: 2299.39 #> Effective number of parameters .....................: 297.60 #>  #> Watanabe-Akaike information criterion (WAIC) ...: -3257.95 #> Effective number of parameters .................: 265.41 #>  #> Marginal log-Likelihood:  853.79  #>  is computed  #> Posterior summaries for the linear predictor and the fitted values are computed #> (Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)') result_fit <- rspde.result(rspde_bru_fit, \"field\", rspde_model) summary(result_fit) #>             mean         sd 0.025quant   0.5quant 0.975quant       mode #> tau    0.0137765 0.00154502   0.010941  0.0137206  0.0170277  0.0135559 #> kappa 10.5399000 1.40597000   7.861250 10.5314000 13.3472000 10.6109000 #> nu     0.9836960 0.03653380   0.916083  0.9820220  1.0591400  0.9763520 tau <- op$tau result_df <- data.frame(   parameter = c(\"tau\", \"kappa\", \"nu\"),   true = c(tau, kappa, nu), mean = c(     result_fit$summary.tau$mean,     result_fit$summary.kappa$mean,     result_fit$summary.nu$mean   ),   mode = c(     result_fit$summary.tau$mode,     result_fit$summary.kappa$mode,     result_fit$summary.nu$mode   ) ) print(result_df) #>   parameter         true        mean        mode #> 1       tau  0.004452908  0.01377646  0.01355588 #> 2     kappa 12.899612397 10.53986521 10.61089550 #> 3        nu  1.300000000  0.98369593  0.97635200 result_fit_matern <- rspde.result(rspde_bru_fit, \"field\", rspde_model,                                   parameterization = \"matern\") summary(result_fit_matern) #>             mean        sd 0.025quant 0.5quant 0.975quant     mode #> std.dev 2.817480 0.3093610   2.292690 2.783860   3.511450 2.718410 #> range   0.275580 0.0397385   0.209057 0.271266   0.362772 0.264590 #> nu      0.983696 0.0365338   0.916083 0.982022   1.059140 0.976352 result_df_matern <- data.frame(   parameter = c(\"sigma\", \"range\", \"nu\"),   true = c(sigma, range, nu), mean = c(     result_fit_matern$summary.std.dev$mean,     result_fit_matern$summary.range$mean,     result_fit_matern$summary.nu$mean   ),   mode = c(     result_fit_matern$summary.std.dev$mode,     result_fit_matern$summary.range$mode,     result_fit_matern$summary.nu$mode   ) ) print(result_df_matern) #>   parameter true      mean      mode #> 1     sigma 2.00 2.8174751 2.7184117 #> 2     range 0.25 0.2755798 0.2645897 #> 3        nu 1.30 0.9836959 0.9763520"},{"path":"https://davidbolin.github.io/rSPDE/articles/rSPDE.html","id":"kriging-with-inlabru-implementation-of-the-rational-spde-approach","dir":"Articles","previous_headings":"","what":"Kriging with inlabru implementation of the rational SPDE approach","title":"An introduction to the rSPDE package","text":"Let us now obtain predictions (.e., kriging) latent field dense grid region. begin creating grid locations want evaluate predictions. begin creating regular grid extract coorinates: Let us now compute predictions. advantage inlabru can fitting model data: following figure shows mean predictions:  following figure shows marginal standard deviations predictions:  alternative simple approach use fm_pixels() function:","code":"pred_coords <- data.frame(x1 = projgrid$lattice$loc[,1],                           x2 = projgrid$lattice$loc[,2]) coordinates(pred_coords) <- c(\"x1\", \"x2\") field_pred <- predict(rspde_bru_fit, pred_coords, ~field) field_pred_df <- field_pred@data field_pred_df <- cbind(field_pred_df, field_pred@coords) ggplot(field_pred_df, aes(x = x1, y = x2, fill = mean)) +   geom_raster() + xlim(0,1) + ylim(0,1) +    scale_fill_viridis() ggplot(field_pred_df, aes(x = x1, y = x2, fill = sd)) +   geom_raster() + xlim(0,1) + ylim(0,1) +    scale_fill_viridis() pxl <- fm_pixels(mesh_2d, format=\"sp\")  field_pred <- predict(rspde_bru_fit, pxl, ~field)  ggplot() + gg(field_pred) +   scale_fill_viridis() + xlim(0,1) + ylim(0,1)"},{"path":"https://davidbolin.github.io/rSPDE/articles/rSPDE.html","id":"fitting-the-model-with-rspde","dir":"Articles","previous_headings":"","what":"Fitting the model with rSPDE","title":"An introduction to the rSPDE package","text":"now fit model toy data set without using R-INLA inlabru. end use rational approximation functions rSPDE package. details can found vignette Rational approximation rSPDE package. use function rSPDE.construct.matern.loglike() define likelihood. function object-based, sense obtains several quantities needs rSPDE model object. Notice already created rSPDE model object simulate data. , , use model object. Recall rSPDE model object created op. Let us create object estimation, data.frame data fit model using rspde_lme() function. can obtain summary: Let us compare true values:","code":"op_est <- matern.operators(   mesh = mesh_2d, m = 2 )  toy_df_rspde <- data.frame(coord1 = loc_2d_mesh[,1],                      coord2 = loc_2d_mesh[,2],                      y = as.vector(y)) fit_rspde <- rspde_lme(y ~ -1, data = toy_df_rspde, loc = c(\"coord1\", \"coord2\"),                       model = op_est, parallel = TRUE) #> Warning in rspde_lme(y ~ -1, data = toy_df_rspde, loc = c(\"coord1\", \"coord2\"), #> : The optimization failed to provide a numerically positive-definite Hessian. #> You can try to obtain a positive-definite Hessian by setting 'improve_hessian' #> to TRUE or by setting 'parallel' to FALSE, which allows other optimization #> methods to be used. #> Warning in sqrt(diag(inv_fisher)): NaNs produced summary(fit_rspde) #>  #> Latent model - Whittle-Matern #>  #> Call: #> rspde_lme(formula = y ~ -1, loc = c(\"coord1\", \"coord2\"), data = toy_df_rspde,  #>     model = op_est, parallel = TRUE) #>  #> No fixed effects. #>  #> Random effects: #>        Estimate Std.error z-value #> alpha  2.310423       NaN     NaN #> tau    0.003956       NaN     NaN #> kappa 13.790088  1.373313   10.04 #>  #> Random effects (Matern parameterization): #>       Estimate Std.error z-value #> nu     1.31042       NaN     NaN #> sigma  2.00031   0.18200  10.991 #> range  0.23479   0.02459   9.546 #>  #> Measurement error: #>          Estimate Std.error z-value #> std. dev 0.099243  0.001702   58.33 #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  #>  #> Log-Likelihood:  871.6453  #> Number of function calls by 'optim' = 79 #> Optimization method used in 'optim' = L-BFGS-B #>  #> Time used to:     fit the model =  14.88849 secs  #>   set up the parallelization = 4.6979 secs print(data.frame(   sigma = c(sigma, fit_rspde$matern_coeff$random_effects[2]),    range = c(range, fit_rspde$matern_coeff$random_effects[3]),   nu = c(nu, fit_rspde$matern_coeff$random_effects[1]),   row.names = c(\"Truth\", \"Estimates\") )) #>              sigma     range       nu #> Truth     2.000000 0.2500000 1.300000 #> Estimates 2.000306 0.2347922 1.310423  # Time to fit print(fit_rspde$fitting_tim) #> Time difference of 14.8885 secs"},{"path":"https://davidbolin.github.io/rSPDE/articles/rSPDE.html","id":"kriging-with-rspde","dir":"Articles","previous_headings":"","what":"Kriging with rSPDE","title":"An introduction to the rSPDE package","text":"now kriging dense grid R-INLA-based rational SPDE approach, now using rSPDE functions. end use predict method rSPDE model object. Observe need AA matrix connecting mesh prediction locations. Let us now create data.frame prediction locations: now use predict() method rSPDE model object argument compute.variances set TRUE can plot standard deviations. Let us also update values rSPDE model object fitted ones, also save estimated value sigma.e. Finally, plot results. First mean:  , standard deviations:","code":"predgrid <- fm_evaluator(mesh_2d,   xlim = c(0, 1),   ylim = c(0, 1) ) pred_coords <- data.frame(coord1 = predgrid$lattice$loc[,1],                           coord2 = predgrid$lattice$loc[,2]) pred.rspde <- predict(fit_rspde,   data = pred_coords, loc = c(\"coord1\", \"coord2\"),   compute_variances = TRUE ) #> Warning: The `data` argument of `predict()` is deprecated as of rSPDE 2.3.3. #> ‚Ñπ Please use the `newdata` argument instead. #> ‚Ñπ `data` was provided but not `newdata`. Setting `newdata <- data`. #> This warning is displayed once every 8 hours. #> Call `lifecycle::last_lifecycle_warnings()` to see where this warning was #> generated. field.pred2.df <- data.frame(x1 = predgrid$lattice$loc[,1],                              x2 = predgrid$lattice$loc[,2],                              y = as.vector(pred.rspde$mean)) ggplot(field.pred2.df, aes(x = x1, y = x2, fill = y)) +   geom_raster() + xlim(0,1) + ylim(0,1) +    scale_fill_viridis() #> Warning: Removed 396 rows containing missing values or values outside the scale range #> (`geom_raster()`). field.pred2.sd.df <-field.pred2.df <- data.frame(x1 = predgrid$lattice$loc[,1],                              x2 = predgrid$lattice$loc[,2],                              sd = as.vector(sqrt(pred.rspde$variance))) ggplot(field.pred2.sd.df, aes(x = x1, y = x2, fill = sd)) +   geom_raster() +   scale_fill_viridis()"},{"path":[]},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_base.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Operator-based rational approximation","text":"Several popular Gaussian random field models can represented solutions stochastic partial differential equations (SPDEs) form LŒ≤(œÑu)=ùí≤. L^{\\beta} (\\tau u) = \\mathcal{W}. ùí≤\\mathcal{W} Gaussian white noise, LL second-order differential operator, fractional power Œ≤>0\\beta>0 determines smoothness uu, œÑ>0\\tau>0 scales variance uu. 2Œ≤2\\beta integer domain ùíü\\mathcal{D} model defined bounded, uu can approximated Gaussian Markov random field (GMRF) u\\boldsymbol{\\mathrm{u}} via finite element method (FEM) SPDE. Specifically, approximation can written uh(s)=‚àë=1nuiœÜi(s). u_h(s) = \\sum_{=1}^n u_i \\varphi_i(s).  {œÜi}\\{\\varphi_i\\} piecewise linear basis functions defined triangulation ùíü\\mathcal{D} vector weights u=(u1,‚Ä¶,un)T\\boldsymbol{\\mathrm{u}} = (u_1,\\ldots,u_n)^T normally distributed, N(u,QÃÉ‚àí1)N(\\boldsymbol{\\mathrm{u}},\\tilde{\\boldsymbol{\\mathrm{Q}}}^{-1}), QÃÉ\\tilde{\\boldsymbol{\\mathrm{Q}}} sparse. See Lindgren, Rue, Lindstr√∂m (2011) details. vignette focus operator-based rational approximation. approach, introduced Bolin Kirchner (2020), results approximation original SPDE form Plx=Prùí≤P_l x = P_r \\mathcal{W}, PlP_l PrP_r non-fractional operators defined terms polynomials plp_l prp_r. order prp_r given mm order plp_l m+mŒ≤m + m_{\\beta} mŒ≤m_{\\beta} integer part Œ≤\\beta Œ≤>1\\beta>1 mŒ≤=1m_{\\beta} = 1 otherwise. combination rational approximation operator FEM discretization yields approximation uhu_h uu basis expansion form . difference non-fractional case vector stochastic weights now u‚àºN(0,PrQ‚àí1PrT)\\boldsymbol{\\mathrm{u}} \\sim N(\\boldsymbol{\\mathrm{0}},\\boldsymbol{\\mathrm{P}}_r\\boldsymbol{\\mathrm{Q}}^{-1}\\boldsymbol{\\mathrm{P}}_r^T) Q\\boldsymbol{\\mathrm{Q}} Pr\\boldsymbol{\\mathrm{P}}_r sparse matrices. Alternatively, u\\boldsymbol{\\mathrm{u}} can represented u=Prx\\boldsymbol{\\mathrm{u}} = \\boldsymbol{\\mathrm{P}}_r \\boldsymbol{\\mathrm{x}} x‚àºN(0,Q‚àí1)\\boldsymbol{\\mathrm{x}} \\sim N(\\boldsymbol{\\mathrm{0}},\\boldsymbol{\\mathrm{Q}}^{-1}), means discrete approximation latent GMRF. can used computationally efficient inference simulation. See Bolin Kirchner (2020) details.","code":""},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_base.html","id":"using-the-package-to-perform-operator-based-rational-approximations","dir":"Articles","previous_headings":"","what":"Using the package to perform operator-based rational approximations","title":"Operator-based rational approximation","text":"main purpose rSPDE package provide functions creating rational approximation. vignette focus operator-based rational approximation, means assembling matrices Q\\boldsymbol{\\mathrm{Q}} Pr\\boldsymbol{\\mathrm{P}}_r. three functions computing rational approximation. general function fractional.operators(), works wide class models general differential operator LL. stationary Mat√©rn case, L=Œ∫2‚àíŒîL = \\kappa^2 - \\Delta, function matern.operators() provides simplified model specification. generalized non-stationary Mat√©rn model, defined SPDE (Œ∫(s)2‚àíŒî)Œ≤(œÑ(s)u(s))=ùí≤, (\\kappa(s)^2 - \\Delta)^\\beta (\\tau(s)u(s)) = \\mathcal{W},  function spde.matern.operators() can used. alternative covariance-based rational approximation, refer reader Rational approximation rSPDE package vignette. worth noting covariance-based rational approximation applies fractional SPDE models Gaussian noise, whereas operator-based rational approximation can used general models models driven type-G L√©vy noise considered Wallin Bolin (2015), Bolin (2013), Asar et al. (2020). approximation constructed, can included manually statistical models just non-fractional case. package built-functions basic use approximation, simulate() can applied simulation field. also functions likelihood evaluation kriging prediction geostatistical models Gaussian measurement noise. following sections, illustrate usage functions.","code":""},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_base.html","id":"constructing-the-approximation","dir":"Articles","previous_headings":"Using the package to perform operator-based rational approximations","what":"Constructing the approximation","title":"Operator-based rational approximation","text":"section, explain different main functions can used constructing rational approximation. first step constructing rational SPDE approximation define FEM mesh. section, use simple FEM implementation rSPDE package models defined interval. Assume want define model interval [0,1][0,1]. start defining vector mesh nodes sis_i basis functions œÜi\\varphi_i centered. Based nodes, use (implicitly) built-function rSPDE.fem1d() assemble two matrices needed creating approximation basic Mat√©rn model. matrices mass matrix C\\boldsymbol{\\mathrm{C}}, elements Cij=‚à´œÜj(s)œÜi(s)dsC_{ij} = \\int \\varphi_j(s) \\varphi_i(s) ds, stiffness matrix G\\boldsymbol{\\mathrm{G}}, elements Gij=‚à´‚àáœÜj(s)‚ãÖ‚àáœÜi(s)dsG_{ij} = \\int \\nabla\\varphi_j(s) \\cdot \\nabla\\varphi_i(s) ds. can now use matern.operators() construct rational SPDE approximation degree m=1m=1 Gaussian random field Mat√©rn covariance function interval. Since using operator-based approximation, must set type \"operator\". object op contains matrices needed evaluating distribution stochastic weights u\\boldsymbol{\\mathrm{u}}. want evaluate uh(s)u_h(s) locations s1,‚Ä¶,sns_1,\\ldots, s_n, need multiply weights basis functions œÜi(s)\\varphi_i(s) evaluated locations. , can construct observation matrix \\boldsymbol{\\mathrm{}} elements Aij=œÜj(si)A_{ij} = \\varphi_j(s_i), links FEM basis functions locations. matrix can constructed using function rSPDE.A1d(). evaluate accuracy approximation, let us compute covariance function process s=0.5s=0.5 locations s compare true covariance function, folded Mat√©rn covariance, see Theorem 1 explicit link Gaussian fields Gaussian Markov random fields: stochastic partial differential equation approach. covariances can calculated APrQ‚àí1PrTv. \\boldsymbol{\\mathrm{}} \\boldsymbol{\\mathrm{P}}_r \\boldsymbol{\\mathrm{Q}}^{-1}\\boldsymbol{\\mathrm{P}}_r^T\\boldsymbol{\\mathrm{v}}.  \\boldsymbol{\\mathrm{}} identity matrix since evaluating approximation nodes FEM mesh v\\boldsymbol{\\mathrm{v}} vector basis functions evaluated s=0.5s=0.5. way computing covariance obtained setting direct = TRUE cov_function_mesh() function inside op object: covariance function error compared Mat√©rn covariance shown following figure.  improve approximation can increase degree polynomials, increasing mm, /increase number basis functions used FEM approximation. Let us, example, compute approximation m=2m=2 using mesh, well approximation increase number basis functions use m=1m=1 m=2m=2. also load fmesher package use fm_basis() fm_mesh_1d() functions map meshes. resulting errors shown following figure.  Since error induced rational approximation decreases exponentially mm, rarely need approximation large value mm. good number non-zero elements Pr\\boldsymbol{\\mathrm{P}}_r Q\\boldsymbol{\\mathrm{Q}} increases mm, makes approximation computationally costly use. , condition numbers Pr\\boldsymbol{\\mathrm{P}}_r Q\\boldsymbol{\\mathrm{Q}} increase mm, can cause numerical problems working matrices. illustrate , let us compute norm approximation error different mm. see , used direct method compute covariance function, described , error decreases increasing mm 11 22, large m=3m=3 m=4m=4. reason approximation bad, numerical accuracy product PrQ‚àí1Prv\\boldsymbol{\\mathrm{P}}_r\\boldsymbol{\\mathrm{Q}}^{-1}\\boldsymbol{\\mathrm{P}}_rv low due large condition numbers matrices. important note alternative covariance-based rational approximation numerically stable. main reason relies decomposition field uu sum random fields, removes need computing higher order finite element matrices large values mm. See Rational approximation rSPDE package vignette details. handle issue operator-based rational approximation, package contains functions performing operations Prv\\boldsymbol{\\mathrm{P}}_rv Pr‚àí1v\\boldsymbol{\\mathrm{P}}_r^{-1}v takes advantage structure Pr\\boldsymbol{\\mathrm{P}}_r avoid numerical instabilities. complete list function can seen typing ?operator.operations. One functions Sigma.mult(), performs multiplication PrQ‚àí1Prv\\boldsymbol{\\mathrm{P}}_r\\boldsymbol{\\mathrm{Q}}^{-1}\\boldsymbol{\\mathrm{P}}_rv numerically stable way. Let us use function compute errors approximations see indeed get better approximations mm increases. obtained setting direct argument cov_function_mesh() FALSE:","code":"s <- seq(from = 0, to = 1, length.out = 101) kappa <- 20 sigma <- 2 nu <- 0.8 r <- sqrt(8*nu)/kappa op <- matern.operators( sigma = sigma,    range = r,   nu = nu,   loc_mesh = s, d = 1, m = 1,   type = \"operator\",   parameterization = \"matern\" ) c.approx <- op$cov_function_mesh(0.5, direct = TRUE) c.true <- folded.matern.covariance.1d(rep(0.5, length(s)), abs(s), kappa, nu, sigma) opar <- par(   mfrow = c(1, 2), mgp = c(1.3, 0.5, 0),   mar = c(2, 2, 0.5, 0.5) + 0.1 ) plot(s, c.true,   type = \"l\", ylab = \"C(|s-0.5|)\", xlab = \"s\", ylim = c(0, 5),   cex.main = 0.8, cex.axis = 0.8, cex.lab = 0.8 ) lines(s, c.approx, col = 2) legend(\"topright\",   bty = \"n\",   legend = c(\"Mat√©rn\", \"m=1 rSPDE\"),   col = c(\"black\", \"red\"),   lty = rep(1, 2), ncol = 1,   cex = 0.8 )  plot(s, c.true - c.approx,   type = \"l\", ylab = \"Error\", xlab = \"s\",   cex.main = 0.8, cex.axis = 0.8, cex.lab = 0.8 ) par(opar) library(fmesher)  op2 <- matern.operators(   range = r, sigma = sigma, nu = nu,   loc_mesh = s, d = 1, m = 2,   type = \"operator\",   parameterization = \"matern\" ) c.approx2 <- op2$cov_function_mesh(0.5, direct = TRUE)  s2 <- seq(from = 0, to = 1, length.out = 501) fem2 <- rSPDE.fem1d(s2) op <- matern.operators(   range = r, sigma = sigma, nu = nu,   loc_mesh = s2, d = 1, m = 1,   type = \"operator\",   parameterization = \"matern\" )  mesh_s2 <- fm_mesh_1d(s2)  A  <- fm_basis(mesh_s2, s) c.approx3 <- A %*% op$cov_function_mesh(0.5, direct = TRUE)  op <- matern.operators(   range = r, sigma = sigma, nu = nu,   loc_mesh = s2, d = 1, m = 2,   type = \"operator\",   parameterization = \"matern\" ) c.approx4 <- A %*% op$cov_function_mesh(0.5, direct = TRUE) opar <- par(mgp = c(1.3, 0.5, 0), mar = c(2, 2, 0.5, 0.5) + 0.1) plot(s, c.true - c.approx,   type = \"l\", ylab = \"Error\", xlab = \"s\", col = 1,   cex.main = 0.8, cex.axis = 0.8, cex.lab = 0.8 ) lines(s, c.true - c.approx2, col = 2) lines(s, c.true - c.approx3, col = 3) lines(s, c.true - c.approx4, col = 4) legend(\"bottomright\",   bty = \"n\",   legend = c(\"m=1 coarse mesh\", \"m=2 coarse mesh\",   \"m=1 fine mesh\", \"m=2 fine mesh\"),   col = c(1, 2, 3, 4),   lty = rep(1, 2), ncol = 1,   cex = 0.8 ) par(opar) # Mapping s2 to s A <- fm_basis(mesh_s2, s)  errors <- rep(0, 4) for (i in 1:4) {   op <- matern.operators(     range = r, sigma = sigma, nu = nu,     loc_mesh = s2, d = 1, m = i,     type = \"operator\",   parameterization = \"matern\"   )   c.app <- A %*% op$cov_function_mesh(0.5, direct = TRUE)   errors[i] <- norm(c.true - c.app) } print(errors) #> [1]   1.0113068   0.1100836 576.3166935  54.6482253 errors2 <- rep(0, 4) for (i in 1:4) {   op <- matern.operators(     range = r, sigma = sigma, nu = nu,     loc_mesh = s2, d = 1, m = i,     type = \"operator\",   parameterization = \"matern\"   )   c.app <- A %*% op$cov_function_mesh(0.5, direct = FALSE)   errors2[i] <- norm(c.true - c.app) } print(errors2) #> [1] 1.01130750 0.10425661 0.02356591 0.01717388"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_base.html","id":"a-non-stationary-model","dir":"Articles","previous_headings":"","what":"A non-stationary model","title":"Operator-based rational approximation","text":"Let us now examine non-stationary model (Œ∫(s)2‚àíŒî)Œ≤(œÑ(s)u(s))=ùí≤(\\kappa(s)^2 - \\Delta)^\\beta (\\tau(s)u(s)) = \\mathcal{W} Œ∫(s)=10(1+2s2)\\kappa(s) = 10(1+2s^2) œÑ(s)=0.1(1‚àí0.7s2)\\tau(s) = 0.1(1 - 0.7s^2). can use spde.matern.operators() create rational approximation m=1m=1 follows. Let us compute covariance function C(s,si)C(s,s_i) non-stationary model locations s1=0.1,s2=0.5,s_1=0.1, s_2 = 0.5, s3=0.9s_3 = 0.9. three covariances shown following figure.  see choice Œ∫(s)\\kappa(s) œÑ(s)\\tau(s) results model longer range small values ss smaller variance middle domain. can also apply general function fractional.operators() construct approximation. function requires user supplies discretization non-fractional operator LL, well scaling factor c>0c>0 lower bound smallest eigenvalue LL. case L=Œ∫(s)2‚àíŒîL = \\kappa(s)^2 - \\Delta, eigenvalues operator bounded c=minsŒ∫(s)2c = \\min_s \\kappa(s)^2. compute constant discrete operator. Another difference fractional.operators() previous functions constructing approximation, requires specifying Œ≤\\beta instead smoothness parameter ŒΩ\\nu Mat√©rn covariance. two parameters related 2Œ≤=ŒΩ+d/22\\beta = \\nu + d/2. Let‚Äôs make sure approximation comparing previously computed covariances. Obviously, simpler use spde.matern.operators() case, advantage fractional.operators() also can used general models one L=Œ∫(s)2‚àí‚àá‚ãÖ(H(s)‚àá)L = \\kappa(s)^2 - \\nabla \\cdot (\\boldsymbol{\\mathrm{H}}(s) \\nabla) matrix-valued function H(s)\\boldsymbol{\\mathrm{H}}(s).","code":"s <- seq(from = 0, to = 1, length.out = 501) s_mesh <- fm_mesh_1d(s)  kappa <- 10 * (1 + 2 * s^2) tau <- 0.1 * (1 - 0.7 * s^2) op <- spde.matern.operators(   kappa = kappa, tau = tau, nu = nu,   d = 1, m = 1, mesh = s_mesh,   type = \"operator\",   parameterization = \"matern\" ) v <- t(op$make_A(c(0.1, 0.5, 0.9))) covs <- Sigma.mult(op, v) opar <- par(mgp = c(1.3, 0.5, 0), mar = c(2, 2, 0.5, 0.5) + 0.1) plot(s, covs[, 1],   type = \"l\", ylab = \"C(s,s_i)\", xlab = \"s\",   cex.main = 0.8, cex.axis = 0.8, cex.lab = 0.8 ) lines(s, covs[, 2], col = 2) lines(s, covs[, 3], col = 3) par(opar) fem <- fm_fem(s_mesh) C <- fem$c0 G <- fem$g1   c <- min(kappa)^2 L <- G + C %*% Diagonal(501, kappa^2) op <- fractional.operators(   L = L, beta = (nu + 1 / 2) / 2, C = C,   scale.factor = c, tau = tau, m = 1 ) covs2 <- Sigma.mult(op, v) norm(covs - covs2) #> [1] 0"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_base.html","id":"using-the-approximation","dir":"Articles","previous_headings":"A non-stationary model","what":"Using the approximation","title":"Operator-based rational approximation","text":"approximation, constructed using functions fractional.operators(), matern.operators(), spde.matern.operators(), can simulate model using simulate(). also built-support kriging prediction. illustrate , use simulation create noisy observations process. , first construct observation matrix linking FEM basis functions locations want simulate. first randomly generate observation locations construct matrix. now generate observations Yi=u(si)+ŒµiY_i = u(s_i) + \\varepsilon_i, Œµi‚àºN(0,œÉe2)\\varepsilon_i \\sim N(0,\\sigma_e^2) Gaussian measurement noise. Finally, compute kriging prediction process uu locations s based observations. specify locations predicted, argument Aprd used. argument observation matrix links mesh locations prediction locations. process simulation, observed data, kriging prediction shown following figure.","code":"u <- simulate(op) n.obs <- 20 obs.loc <- runif(n = n.obs, min = 0, max = 1) A <- fm_basis(s_mesh, obs.loc) sigma.e <- 0.3 Y <- as.vector(A %*% u + sigma.e * rnorm(n.obs)) A.krig <- fm_basis(s_mesh, s) u.krig <- predict(op, A = A, Aprd = A.krig, Y = Y, sigma.e = sigma.e) opar <- par(mgp = c(1.3, 0.5, 0), mar = c(2, 2, 0.5, 0.5) + 0.1) plot(obs.loc, Y,   ylab = \"u(s)\", xlab = \"s\",   ylim = c(min(c(min(u), min(Y))), max(c(max(u), max(Y)))),   cex.main = 0.8, cex.axis = 0.8, cex.lab = 0.8 ) lines(s, u) lines(s, u.krig$mean, col = 2) par(opar)"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_base.html","id":"spatial-data-and-parameter-estimation","dir":"Articles","previous_headings":"","what":"Spatial data and parameter estimation","title":"Operator-based rational approximation","text":"functions used previous examples also work spatial models. need construct mesh domain interest compute matrices needed define operator. tasks can performed, example, using fmesher package. Let us start defining mesh [0,1]√ó[0,1][0,1]\\times [0, 1] compute mass stiffness matrices mesh. can now use matrices define rational SPDE approximation degree m=1m=1 Mat√©rn model . illustrate , simulate latent process standard deviation œÉ=1\\sigma=1 range 0.10.1. choose ŒΩ=0.5\\nu=0.5 model corresponds Gaussian process exponential covariance function. Now let us simulate noisy data use estimate parameters model. construct observation matrix, use fmesher function fm_basis(). sample 30 replicates latent field. first replicate simulated random field well observation locations shown following figure.  type rational approximation degree mm, corresponding likelihood function can used likelihood-based parameter estimation. Since constructed model spde.matern.operators(), can use function spde.matern.loglike() define likelihood. simplify parameter estimation, create object containing rSPDE model (assigning meaningless value 1 parameters used): Now, set vector response variables create auxiliary replicates vector, repl, contains indexes replicates observation. , build data.frame(), also contanis spatial locations, fit model: can now fit model (speed setting parallel TRUE): Let us see summary fitted model: glance: Let us compare estimated results true values: Finally, observe can use rational.order() function, check order rational approximation rSPDE object, well use rational.order<-() function assign new orders: Let us fit check results: Let us check summary: Let us compare estimated results true values:","code":"library(fmesher) m <- 200 loc_2d_mesh <- matrix(runif(m * 2), m, 2) mesh_2d <- fm_mesh_2d(   loc = loc_2d_mesh,   cutoff = 0.05,   offset = c(0.1, 0.4),   max.edge = c(0.05, 0.5) ) plot(mesh_2d, main = \"\") points(loc_2d_mesh[, 1], loc_2d_mesh[, 2]) nu <- 0.8 sigma <- 1.3 range <- 0.15 op <- matern.operators(range = range, sigma = sigma, nu = nu, m = 2, mesh = mesh_2d,   parameterization = \"matern\") n.rep <- 30 u <- simulate(op, nsim = n.rep) A <- fm_basis(   x = mesh_2d,   loc = loc_2d_mesh ) sigma.e <- 0.1 Y <- A %*% u + matrix(rnorm(m * n.rep), ncol = n.rep) * sigma.e library(viridis) library(ggplot2) proj <- fm_evaluator(mesh_2d, dims = c(70, 70))  df_field <- data.frame(x = proj$lattice$loc[,1],                         y = proj$lattice$loc[,2],                         field = as.vector(fm_evaluate(proj,                          field = as.vector(u[, 1]))),                         type = \"field\")  df_loc <- data.frame(x = loc_2d_mesh[, 1],                       y = loc_2d_mesh[, 2],                       field = as.vector(Y[,1]),                       type = \"locations\") df_plot <- rbind(df_field, df_loc)  ggplot(df_plot) + aes(x = x, y = y, fill = field) +         facet_wrap(~type) + xlim(0,1) + ylim(0,1) +          geom_raster(data = df_field) +         geom_point(data = df_loc, aes(colour = field),         show.legend = FALSE) +          scale_fill_viridis() + scale_colour_viridis() op_obj <- matern.operators( m = 1,     type = \"operator\", mesh = mesh_2d   ) y_vec <- as.vector(Y) repl <- rep(1:n.rep, each = m) df_data_2d <- data.frame(y = y_vec, x_coord = loc_2d_mesh[,1],                       y_coord = loc_2d_mesh[,2]) fit_2d <- rspde_lme(y ~ -1, model = op_obj,            data = df_data_2d, repl = repl,           loc = c(\"x_coord\", \"y_coord\"),            parallel = TRUE) summary(fit_2d) #>  #> Latent model - Whittle-Matern #>  #> Call: #> rspde_lme(formula = y ~ -1, loc = c(\"x_coord\", \"y_coord\"), data = df_data_2d,  #>     model = op_obj, repl = repl, parallel = TRUE) #>  #> No fixed effects. #>  #> Random effects: #>       Estimate Std.error z-value #> alpha  1.92125   0.18468  10.403 #> tau    0.01593   0.01123   1.418 #> kappa 18.13701   1.95054   9.298 #>  #> Random effects (Matern parameterization): #>       Estimate Std.error z-value #> nu    0.921254  0.184680   4.988 #> sigma 1.277775  0.016117  79.282 #> range 0.149682  0.004527  33.064 #>  #> Measurement error: #>          Estimate Std.error z-value #> std. dev 0.100474  0.002503   40.14 #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  #>  #> Log-Likelihood:  -5833.811  #> Number of function calls by 'optim' = 57 #> Optimization method used in 'optim' = L-BFGS-B #>  #> Time used to:     fit the model =  1.06675 mins  #>   set up the parallelization = 2.34129 secs glance(fit_2d) #> # A tibble: 1 √ó 9 #>    nobs sigma logLik    AIC    BIC deviance df.residual model              alpha #>   <int> <dbl>  <dbl>  <dbl>  <dbl>    <dbl>       <dbl> <chr>              <dbl> #> 1  6000 0.100 -5834. 11676. 11702.   11668.        5996 Matern approximat‚Ä¶  1.92 print(data.frame(   sigma = c(sigma, fit_2d$matern_coeff$random_effects[2]),    range = c(range, fit_2d$matern_coeff$random_effects[3]),   nu = c(nu, fit_2d$matern_coeff$random_effects[1]),   row.names = c(\"Truth\", \"Estimates\") )) #>              sigma     range        nu #> Truth     1.300000 0.1500000 0.8000000 #> Estimates 1.277775 0.1496818 0.9212538  # Total time print(fit_2d$fitting_time) #> Time difference of 1.066751 mins rational.order(op_obj) #> [1] 1  rational.order(op_obj) <- 2 fit_2d <- rspde_lme(y ~ -1, model = op_obj,            data = df_data_2d, repl = repl,           loc = c(\"x_coord\", \"y_coord\"),            parallel = TRUE) summary(fit_2d) #>  #> Latent model - Whittle-Matern #>  #> Call: #> rspde_lme(formula = y ~ -1, loc = c(\"x_coord\", \"y_coord\"), data = df_data_2d,  #>     model = op_obj, repl = repl, parallel = TRUE) #>  #> No fixed effects. #>  #> Random effects: #>       Estimate Std.error z-value #> alpha  1.89726   0.19695   9.633 #> tau    0.01756   0.01349   1.302 #> kappa 17.81474   2.33209   7.639 #>  #> Random effects (Matern parameterization): #>       Estimate Std.error z-value #> nu    0.897264  0.196952   4.556 #> sigma 1.279910  0.016123  79.384 #> range 0.150392  0.004597  32.713 #>  #> Measurement error: #>          Estimate Std.error z-value #> std. dev 0.100452  0.002503   40.13 #> --- #> Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  #>  #> Log-Likelihood:  -5833.769  #> Number of function calls by 'optim' = 93 #> Optimization method used in 'optim' = L-BFGS-B #>  #> Time used to:     fit the model =  2.95383 mins  #>   set up the parallelization = 2.36949 secs print(data.frame(   sigma = c(sigma, fit_2d$matern_coeff$random_effects[2]),    range = c(range, fit_2d$matern_coeff$random_effects[3]),   nu = c(nu, fit_2d$matern_coeff$random_effects[1]),   row.names = c(\"Truth\", \"Estimates\") )) #>             sigma     range        nu #> Truth     1.30000 0.1500000 0.8000000 #> Estimates 1.27991 0.1503923 0.8972638  # Total time print(fit_2d$fitting_time) #> Time difference of 2.95383 mins"},{"path":[]},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_cov.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Rational approximation with the rSPDE package","text":"vignette introduce covariance-based rational SPDE approach illustrate perform statistical inference . covariance-based approach efficient alternative operator-based rational SPDE approach Bolin Kirchner (2020) works one SPDE driven Gaussian white noise. refer reader Bolin, Simas, Xiong (2023) theoretical details approach. Details operator-based rational SPDE approach given Operator-based rational approximation vignette. R-INLA inlabru implementations covariance-based rational SPDE approach refer reader vignettes R-INLA implementation rational SPDE approach inlabru implementation rational SPDE approach respectively.","code":""},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_cov.html","id":"covariance-based-rational-spde-approach","dir":"Articles","previous_headings":"","what":"Covariance-based rational SPDE approach","title":"Rational approximation with the rSPDE package","text":"Let us first present idea behind approach. SPDE approach, introduced Lindgren, Rue, Lindstr√∂m (2011) model uu solution following SPDE: LŒ±/2(œÑu)=W, L^{\\alpha/2}(\\tau u) = W,  L=‚àíŒî+Œ∫2IL  = -\\Delta +\\kappa^2 WW standard Gaussian white noise. , Œ±\\alpha, Œ∫\\kappa œÑ\\tau parameters model. standard SPDE approach, Œ±=ŒΩ+d/2\\alpha = \\nu + d/2 needs fixed integer value, Œ±=2\\alpha = 2 usual default value. rational SPDE approach can use value ŒΩ>0\\nu>0 also estimate data. main idea covariance-based rational SPDE approach perform rational approximation covariance operator L‚àíŒ±L^{-\\alpha}. end, begin obtaining approximation random field uu, solution SPDE , using finite element method (FEM): uh(ùê¨i)=‚àëj=1nhuÃÇjœÜj(ùê¨i), u_h(\\mathbf{s}_i)=\\sum_{j=1}^{n_h} \\hat{u}_j \\varphi_j(\\mathbf{s}_i),  {uÃÇj}j=1nh\\{\\hat{u}_j\\}_{j = 1}^{n_h} stochastic weights {œÜj(ùê¨i)}j=1nh\\{\\varphi_j(\\mathbf{s}_i)\\}_{j = 1}^{n_h} fixed piecewise linear continuous basis functions obtained triangulation spatial domain. obtain FEM approximation operator LL, given LhL_h, covariance operator uhu_h given Lh‚àíŒ±L_h^{-\\alpha}. Now, using rational approximation LhL_h, can approximate covariance operator Lh‚àíŒ±L_h^{-\\alpha} Lh,m‚àíŒ±=Lh‚àí‚åäŒ±‚åãp(Lh‚àí1)q(Lh‚àí1)‚àí1,L_{h,m}^{-\\alpha} = L_h^{-\\lfloor\\alpha\\rfloor} p(L_h^{-1})q(L_h^{-1})^{-1}, ‚åäŒ±‚åã\\lfloor\\alpha\\rfloor denotes integer part Œ±\\alpha, mm order rational approximation, p(Lh‚àí1)=‚àë=0maiLhm‚àíip(L_h^{-1}) = \\sum_{=0}^m a_i L_h^{m-} q(Lh‚àí1)=‚àëj=0mbjLhm‚àíiq(L_h^{-1}) = \\sum_{j=0}^m b_j L_h^{m-}, {ai}=0m\\{a_i\\}_{= 0}^m {bj}j=0m\\{b_j\\}_{j = 0}^m known coefficients obtained rational approximation function xŒ±‚àí‚åäŒ±‚åãx^{\\alpha - \\lfloor\\alpha\\rfloor}. next step perform partial fraction decomposition rational function p(Lh‚àí1)q(Lh‚àí1)‚àí1p(L_h^{-1})q(L_h^{-1})^{-1}, yields representation Lh,m‚àíŒ±=Lh‚àí‚åäŒ±‚åã(‚àë=1mri(Lh‚àípiI)‚àí1+k).L_{h,m}^{-\\alpha} =L_h^{-\\lfloor\\alpha\\rfloor} \\left(\\sum_{=1}^{m}  r_i  (L_h-p_i )^{-1} +k\\right). Based operator equation, can write covariance matrix stochastic weights ùêÆÃÇ\\hat{\\textbf{u}}, ùêÆÃÇ=[uÃÇ1,...,uÃÇnh]‚ä§\\hat{\\textbf{u}}=[\\hat{u}_1,...,\\hat{u}_{n_h}]^\\top, ùö∫ùêÆÃÇ=(ùêã‚àí1ùêÇ)‚åäŒ±‚åã‚àë=1mri(ùêã‚àípiùêÇ)‚àí1+ùêä,\\mathbf{\\Sigma}_{\\hat{\\textbf{u}}} = (\\textbf{L}^{-1}\\textbf{C})^{\\lfloor\\alpha\\rfloor} \\sum_{=1}^{m}r_i(\\textbf{L}-p_i\\textbf{C})^{-1}+\\textbf{K},  ùêÇ={Cij},j=1nh\\textbf{C} = \\{C_{ij}\\}_{,j=1}^{n_h}, Cij=(œÜi,œÜj)L2(ùíü)C_{ij} = (\\varphi_i,\\varphi_j)_{L_2(\\mathcal{D})}, mass matrix, ùêã=Œ∫2ùêÇ+ùêÜ\\textbf{L} = \\kappa^2\\textbf{C}+\\textbf{G}, ùêÜ={Gij},j=1nh\\textbf{G} = \\{G_{ij}\\}_{,j=1}^{n_h}, Gij=(‚àáœÜi,‚àáœÜj)L2(ùíü)G_{ij}=(\\nabla\\varphi_i,\\nabla\\varphi_j)_{L_2(\\mathcal{D})}, stiffness matrix, ùêä={kùêÇ‚åäŒ±‚åã=0kùêã‚àí1(ùêÇùêã‚àí1)‚åäŒ±‚åã‚àí1‚åäŒ±‚åã‚â•1. \\textbf{K}=\\left\\{     \\begin{array}{lcl}         k\\textbf{C}      &      & {\\lfloor\\alpha\\rfloor=0}\\\\         k\\textbf{L}^{-1}(\\textbf{C}\\textbf{L}^{-1})^{\\lfloor\\alpha\\rfloor-1}    &      & {\\lfloor\\alpha\\rfloor\\geq 1}\\\\     \\end{array} \\right. . representation shows can express ùêÆÃÇ\\hat{\\textbf{u}} ùêÆÃÇ=‚àë=1m+1ùê±i, \\hat{\\textbf{u}}=\\sum_{=1}^{m+1}\\textbf{x}_i,  ùê±i=(xi,1,‚Ä¶,xi,nh)\\textbf{x}_i = (x_{,1}, \\ldots, x_{,n_h}), ùê±i‚àºN(ùüé,ùêêi‚àí1),\\textbf{x}_i \\sim N(\\textbf{0},\\textbf{Q}_i^{-1}), ùêêi\\textbf{Q}_i precision matrix ùê±i\\textbf{x}_i, given ùêêi={(ùêã‚àípiùêÇ)(ùêÇ‚àí1ùêã)‚åäŒ±‚åã/ri,=1,...,mùêä‚àí1,=m+1. \\textbf{Q}_i=\\left \\{     \\begin{array}{lcl}         (\\textbf{L}-p_i\\textbf{C})(\\textbf{C}^{-1}\\textbf{L})^{\\lfloor\\alpha\\rfloor}/r_i,      &      & {= 1,...,m}\\\\          \\textbf{K}^{-1},   &      & {= m+1}\\\\     \\end{array}. \\right. , , replace Mat√©rn latent field latent vector given , precision matrix given ùêê=[ùêê1‚ã±ùêêm+1].\\textbf{Q}=\\begin{bmatrix}\\textbf{Q}_1& &\\\\&\\ddots&\\\\& &\\textbf{Q}_{m+1}\\end{bmatrix}. thus Markov approximation can used computationally efficient inference. example, assume observe yj=uh(ùê¨j)+Œµj,j=1,‚Ä¶,N,y_j = u_h(\\mathbf{s}_j) + \\varepsilon_j,\\quad j=1,\\ldots, N, Œµj‚àºN(0,œÉŒµ2)\\varepsilon_j\\sim N(0,\\sigma_\\varepsilon^2) iid measurement noise. , yj=uh(ùê¨j)+Œµj=‚àël=1nhuÃÇlœÜl(ùê¨j)+Œµj=‚àë=1m+1‚àël=1nhxi,lœÜl(ùê¨j)+Œµj. y_j = u_h(\\mathbf{s}_j) + \\varepsilon_j = \\sum_{l=1}^{n_h} \\hat{u}_l \\varphi_l(\\mathbf{s}_j) + \\varepsilon_j = \\sum_{=1}^{m+1} \\sum_{l=1}^{n_h} x_{,l} \\varphi_l(\\mathbf{s}_j) + \\varepsilon_j.  can written matrix form ùê≤=ùêÄ¬Øùêó+ùõÜ,\\textbf{y} = \\overline{\\textbf{}} \\textbf{X} + \\boldsymbol{\\varepsilon}, ùê≤=[y1,‚Ä¶,yN]‚ä§,ùêó=[ùê±1‚ä§,‚Ä¶,ùê±m+1‚ä§]‚ä§\\textbf{y} = [y_1,\\ldots,y_N]^\\top, \\textbf{X} = [\\textbf{x}_1^\\top,\\ldots,\\textbf{x}_{m+1}^\\top]^\\top, ùõÜ=[Œµ1,‚Ä¶,ŒµN]‚ä§\\boldsymbol{\\varepsilon} = [\\varepsilon_1,\\ldots,\\varepsilon_N]^\\top, ùêÄ¬Ø=[ùêÄ‚ãØùêÄ]n√ónh(m+1),\\overline{\\textbf{}}=\\begin{bmatrix}\\textbf{}&\\cdots&\\textbf{}\\end{bmatrix}_{n\\times n_h(m+1)}, ùêÄ=[œÜ1(s1)‚ãØœÜnh(s1)‚ãÆ‚ãÆ‚ãÆœÜ1(sn)‚ãØœÜnh(sn)].\\textbf{}=\\begin{bmatrix}\\varphi_1(s_1)&\\cdots&\\varphi_{n_h}(s_1)\\\\\\vdots&\\vdots&\\vdots\\\\\\varphi_1(s_n)&\\cdots&\\varphi_{n_h}(s_n)\\end{bmatrix}. arrive following hierarchical model: ùê≤‚à£ùêó‚àºN(0,œÉŒµùêà)ùêó‚àºN(0,ùêê‚àí1).\\begin{align} \\textbf{y}\\mid \\textbf{X} &\\sim N(0,\\sigma_\\varepsilon\\textbf{})\\\\ \\textbf{X}&\\sim N(0,\\textbf{Q}^{-1}) \\end{align}. elements, can, example, use R-INLA compute posterior distribution three parameters want estimate.","code":""},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_cov.html","id":"constructing-the-approximation","dir":"Articles","previous_headings":"","what":"Constructing the approximation","title":"Rational approximation with the rSPDE package","text":"section, explain use function matern.operators() default argument type, , type=\"covariance\", constructs covariance-based rational approximation. also illustrate usage several methods functions related covariance-based rational approximation. use functions sample Gaussian fields stationary Mat√©rn covariance function, compute log-likelihood function, spatial prediction. first step performing covariance-based rational SPDE approximation define FEM mesh. also illustrate spatial models can constructed FEM implementation fmesher package used. using R-INLA package, also recommend usage R-INLA implementation rational SPDE approach. details, see R-INLA implementation rational SPDE approach vignette. begin loading rSPDE package: Assume want define model interval [0,1][0,1]. start defining vector mesh nodes sis_i basis functions œÜi\\varphi_i centered. can now use matern.operators() construct rational SPDE approximation order m=2m=2 Gaussian random field Mat√©rn covariance function interval. also refer reader Operator-based rational approximation similar comparison made operator-based rational approximation. object op_cov contains matrices needed evaluating distribution stochastic weights u\\boldsymbol{\\mathrm{u}}. want evaluate uh(s)u_h(s) locations s1,‚Ä¶,sns_1,\\ldots, s_n, need multiply weights basis functions œÜi(s)\\varphi_i(s) evaluated locations. , can construct observation matrix \\boldsymbol{\\mathrm{}}, elements Aij=œÜj(si)A_{ij} = \\varphi_j(s_i), links FEM basis functions locations. matrix can constructed using function fm_basis() fmesher package. However, observed introduction vignette, decomposed stochastic weights u\\boldsymbol{\\mathrm{u}} vector latent variables. Thus, AA matrix covariance-based rational approximation, denote ¬Ø\\overline{}, actually given m+1m+1-fold horizontal concatenation AA matrices, mm order rational approximation. evaluate accuracy approximation, let us compute covariance function process s=0.5s=0.5 locations s compare true Mat√©rn covariance function. covariances can calculated using cov_function_mesh() method. Let us now compute true Mat√©rn covariance function interval (0,1)(0,1), folded Mat√©rn, see Theorem 1 explicit link Gaussian fields Gaussian Markov random fields: stochastic partial differential equation approach details. covariance function error compared Mat√©rn covariance shown following figure.  improve approximation can increase degree polynomials, increasing mm, /increase number basis functions used FEM approximation. Let us, example, compute approximation m=4m=4 using mesh, well approximation increase number basis functions use m=2m=2 m=4m=4. also load fmesher package use fm_basis() fm_mesh_1d() functions map meshes. resulting errors shown following figure.  Since error induced rational approximation decreases exponentially mm, general rarely need approximation large value mm. good size Q\\boldsymbol{\\mathrm{Q}} increases mm, makes approximation computationally costly use. illustrate , let us compute norm approximation error different mm. see error decreases fast increase mm 11 44, without numerical instability. advantage covariance-based rational approximation compared operator-based rational approximation. See Operator-based rational approximation details numerical instability operator-based rational approximation.","code":"library(rSPDE) s <- seq(from = 0, to = 1, length.out = 101) kappa <- 20 sigma <- 2 nu <- 0.8 r <- sqrt(8*nu)/kappa #range parameter op_cov <- matern.operators(loc_mesh = s, nu = nu,   range = r, sigma = sigma, d = 1, m = 2, parameterization = \"matern\" ) c_cov.approx <- op_cov$cov_function_mesh(0.5) c.true <- folded.matern.covariance.1d(rep(0.5, length(s)),                                        abs(s), kappa, nu, sigma) opar <- par(   mfrow = c(1, 2), mgp = c(1.3, 0.5, 0),   mar = c(2, 2, 0.5, 0.5) + 0.1 ) plot(s, c.true,   type = \"l\", ylab = \"C(|s-0.5|)\", xlab = \"s\", ylim = c(0, 5),   cex.main = 0.8, cex.axis = 0.8, cex.lab = 0.8 ) lines(s, c_cov.approx, col = 2) legend(\"topright\",   bty = \"n\",   legend = c(\"Mat√©rn\", \"Rational\"),   col = c(\"black\", \"red\"),   lty = rep(1, 2), ncol = 1,   cex = 0.8 )  plot(s, c.true - c_cov.approx,   type = \"l\", ylab = \"Error\", xlab = \"s\",   cex.main = 0.8, cex.axis = 0.8, cex.lab = 0.8 ) par(opar) library(fmesher)  op_cov2 <- matern.operators(   range = r, sigma = sigma, nu = nu,   loc_mesh = s, d = 1, m = 4,   parameterization = \"matern\" )  c_cov.approx2 <- op_cov2$cov_function_mesh(0.5)  s2 <- seq(from = 0, to = 1, length.out = 501)  op_cov <- matern.operators(   range = r, sigma = sigma, nu = nu,   loc_mesh = s2, d = 1, m = 2,   parameterization = \"matern\" )  mesh_s2 <- fm_mesh_1d(s2)  # Map the mesh s2 to s A2 <- fm_basis(mesh_s2, s)  c_cov.approx3 <- A2 %*% op_cov$cov_function_mesh(0.5)  op_cov <- matern.operators(   range = r, sigma = sigma, nu = nu,   loc_mesh = s2, d = 1, m = 4,   parameterization = \"matern\" )  c_cov.approx4 <- A2 %*% op_cov$cov_function_mesh(0.5) opar <- par(mgp = c(1.3, 0.5, 0), mar = c(2, 2, 0.5, 0.5) + 0.1) plot(s, c.true - c_cov.approx,   type = \"l\", ylab = \"Error\", xlab = \"s\", col = 1,   cex.main = 0.8, cex.axis = 0.8, cex.lab = 0.8 ) lines(s, c.true - c_cov.approx2, col = 2) lines(s, c.true - c_cov.approx3, col = 3) lines(s, c.true - c_cov.approx4, col = 4) legend(\"bottomright\",   bty = \"n\",   legend = c(\"m=2 coarse mesh\", \"m=4 coarse mesh\",               \"m=2 fine mesh\", \"m=4 fine mesh\"),   col = c(1, 2, 3, 4),   lty = rep(1, 2), ncol = 1,   cex = 0.8 ) par(opar) # Mapping s2 to s A2 <- fm_basis(mesh_s2, s)  errors <- rep(0, 4) for (i in 1:4) {   op_cov <- matern.operators(     range = r, sigma = sigma, nu = nu,     loc_mesh = s2, d = 1, m = i,     parameterization = \"matern\"   )   c_cov.approx <- A2 %*% op_cov$cov_function_mesh(0.5)   errors[i] <- norm(c.true - c_cov.approx) } print(errors) ## [1] 0.977500618 0.086659189 0.017335545 0.008432137"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_cov.html","id":"using-the-approximation","dir":"Articles","previous_headings":"","what":"Using the approximation","title":"Rational approximation with the rSPDE package","text":"use function matern.operators(), can simulate model using simulate() method. end simply apply simulate() method object returned matern.operators() function: want replicates, simply set argument nsim desired number replicates. instance, generate two replicates model, simply :","code":"u <- simulate(op_cov) u.rep <- simulate(op_cov, nsim = 2)"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_cov.html","id":"fitting-a-model","dir":"Articles","previous_headings":"Using the approximation","what":"Fitting a model","title":"Rational approximation with the rSPDE package","text":"built-support computing log-likelihood functions performing kriging prediction rSPDE package. illustrate , use simulation create noisy observations process. , first construct observation matrix linking FEM basis functions locations want simulate. first randomly generate observation locations construct matrix. now generate observations Yi=2‚àíx1+u(si)+ŒµiY_i = 2 - x1 + u(s_i) + \\varepsilon_i, Œµi‚àºN(0,œÉe2)\\varepsilon_i \\sim N(0,\\sigma_e^2) Gaussian measurement noise, x1x1 covariate giving observation location. assume latent process Mat√©rn covariance Œ∫=20,œÉ=1.3\\kappa=20, \\sigma=1.3 ŒΩ=0.8\\nu=0.8: Let us create new object fit model: Let us now fit model. end use rspde_lme() function: can get summary fit summary() method: Let us compare parameters latent model: Let us take glance fit: can also speed optimization setting parallel=TRUE (uses implicitly optimParallel function): summary: Let us compare true values compare time:","code":"set.seed(1) s <- seq(from = 0, to = 1, length.out = 501) n.obs <- 200 obs.loc <- runif(n.obs) mesh_s <- fm_mesh_1d(s) A <- fm_basis(x = mesh_s, loc = obs.loc) kappa <- 20 sigma <- 1.3 nu <- 0.8 r <- sqrt(8*nu)/kappa op_cov <- matern.operators(   loc_mesh = s, nu = nu,   range = r, sigma = sigma, d = 1, m = 2,   parameterization = \"matern\" )  u <- simulate(op_cov)  sigma.e <- 0.3  x1 <- obs.loc  Y <- 2 - x1 + as.vector(A %*% u + sigma.e * rnorm(n.obs))  df_data <- data.frame(y = Y, loc = obs.loc, x1 = x1) op_cov_est <- matern.operators(   loc_mesh = s, d = 1, m = 2 ) fit <- rspde_lme(y~x1, model = op_cov_est,                     data = df_data, loc = \"loc\") summary(fit) ##  ## Latent model - Whittle-Matern ##  ## Call: ## rspde_lme(formula = y ~ x1, loc = \"loc\", data = df_data, model = op_cov_est) ##  ## Fixed effects: ##             Estimate Std.error z-value Pr(>|z|) ## (Intercept)   1.2977    1.1935   1.087    0.277 ## x1           -0.5586    2.0517  -0.272    0.785 ##  ## Random effects: ##        Estimate Std.error z-value ## alpha  1.342557  0.053412  25.136 ## tau    0.038168  0.009482   4.025 ## kappa 16.477711  5.252625   3.137 ##  ## Random effects (Matern parameterization): ##       Estimate Std.error z-value ## nu     0.84256   0.05341  15.775 ## sigma  1.47083   0.31851   4.618 ## range  0.15756   0.04912   3.208 ##  ## Measurement error: ##          Estimate Std.error z-value ## std. dev  0.33075   0.02231   14.83 ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  ##  ## Log-Likelihood:  -145.9036  ## Number of function calls by 'optim' = 111 ## Optimization method used in 'optim' = L-BFGS-B ##  ## Time used to:     fit the model =  21.60605 secs print(data.frame(   sigma = c(sigma, fit$matern_coeff$random_effects[2]),    range = c(r, fit$matern_coeff$random_effects[3]),   nu = c(nu, fit$matern_coeff$random_effects[1]),   row.names = c(\"Truth\", \"Estimates\") )) ##              sigma     range        nu ## Truth     1.300000 0.1264911 0.8000000 ## Estimates 1.470833 0.1575606 0.8425568 # Total time print(fit$fitting_time) ## Time difference of 21.60606 secs glance(fit) ## # A tibble: 1 √ó 9 ##    nobs sigma logLik   AIC   BIC deviance df.residual model                alpha ##   <int> <dbl>  <dbl> <dbl> <dbl>    <dbl>       <dbl> <chr>                <dbl> ## 1   200 0.331  -146.  304.  324.     292.         194 Covariance-Based Ma‚Ä¶  1.34 fit_par <- rspde_lme(y~x1, model = op_cov_est,                     data = df_data, loc = \"loc\", parallel = TRUE) summary(fit_par) ##  ## Latent model - Whittle-Matern ##  ## Call: ## rspde_lme(formula = y ~ x1, loc = \"loc\", data = df_data, model = op_cov_est,  ##     parallel = TRUE) ##  ## Fixed effects: ##             Estimate Std.error z-value Pr(>|z|) ## (Intercept)   1.2977    1.1935   1.087    0.277 ## x1           -0.5586    2.0517  -0.272    0.785 ##  ## Random effects: ##        Estimate Std.error z-value ## alpha  1.342557  0.053412  25.136 ## tau    0.038168  0.009482   4.025 ## kappa 16.477711  5.252625   3.137 ##  ## Random effects (Matern parameterization): ##       Estimate Std.error z-value ## nu     0.84256   0.05341  15.775 ## sigma  1.47083   0.31851   4.618 ## range  0.15756   0.04912   3.208 ##  ## Measurement error: ##          Estimate Std.error z-value ## std. dev  0.33075   0.02231   14.83 ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  ##  ## Log-Likelihood:  -145.9036  ## Number of function calls by 'optim' = 111 ## Optimization method used in 'optim' = L-BFGS-B ##  ## Time used to:     fit the model =  14.62045 secs  ##   set up the parallelization = 2.4839 secs print(data.frame(   sigma = c(sigma, fit_par$matern_coeff$random_effects[2]),    range = c(r, fit_par$matern_coeff$random_effects[3]),   nu = c(nu, fit_par$matern_coeff$random_effects[1]),   row.names = c(\"Truth\", \"Estimates\") )) ##              sigma     range        nu ## Truth     1.300000 0.1264911 0.8000000 ## Estimates 1.470833 0.1575606 0.8425568 # Total time (time to fit plus time to set up the parallelization) total_time <- fit_par$fitting_time + fit_par$time_par print(total_time) ## Time difference of 17.10437 secs"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_cov.html","id":"kriging","dir":"Articles","previous_headings":"Using the approximation","what":"Kriging","title":"Rational approximation with the rSPDE package","text":"Finally, compute kriging prediction process uu locations s based observations. Let us create data.frame locations want obtain predictions. Observe also must provide values covariates. can now perform kriging predict() method: simulated process, observed data, kriging prediction shown following figure.  can also use augment() function pipe results plot:","code":"df_pred <- data.frame(loc = s, x1 = s) u.krig <- predict(fit, newdata = df_pred, loc = \"loc\") opar <- par(mgp = c(1.3, 0.5, 0), mar = c(2, 2, 0.5, 0.5) + 0.1) plot(obs.loc, Y,   ylab = \"u(s)\", xlab = \"s\",   ylim = c(min(c(min(u), min(Y))), max(c(max(u), max(Y)))),   cex.main = 0.8, cex.axis = 0.8, cex.lab = 0.8 ) lines(s, u.krig$mean, col = 2) par(opar) library(ggplot2) library(dplyr)  augment(fit, newdata = df_pred, loc = \"loc\") %>% ggplot() +                  aes(x = loc, y = .fitted) +                 geom_line(col=\"red\") +                  geom_point(data = df_data, aes(x = loc, y=Y))"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_cov.html","id":"fitting-a-model-with-replicates","dir":"Articles","previous_headings":"","what":"Fitting a model with replicates","title":"Rational approximation with the rSPDE package","text":"Let us illustrate simulate dataset replicates fit model data. Recall simulate latent model replicates, set nsim argument number replicates. use CBrSPDEobj object (returned matern.operators() function) previous example, namely op_cov. Now, let us generate observed values YY: Note YY matrix 20 columns, column containing one replicate. need turn y vector create auxiliary vector repl indexing replicates y: can now fit model way using rspde_lme() function: Let us see summary fit: glance: Let us compare true values: can obtain better estimates Hessian setting improve_hessian TRUE, however might make process take longer: Let us get summary:","code":"set.seed(123) n.rep <- 20 u.rep <- simulate(op_cov, nsim = n.rep) sigma.e <- 0.3 Y.rep <- A %*% u.rep + sigma.e * matrix(rnorm(n.obs * n.rep), ncol = n.rep) y_vec <- as.vector(Y.rep) repl <- rep(1:n.rep, each = n.obs)  df_data_repl  <- data.frame(y = y_vec, loc = rep(obs.loc, n.rep)) fit_repl <- rspde_lme(y_vec ~ -1, model = op_cov_est, repl = repl,        data = df_data_repl, loc = \"loc\", parallel = TRUE) ## Warning in rspde_lme(y_vec ~ -1, model = op_cov_est, repl = repl, data = ## df_data_repl, : The optimization failed to provide a numerically ## positive-definite Hessian. You can try to obtain a positive-definite Hessian by ## setting 'improve_hessian' to TRUE or by setting 'parallel' to FALSE, which ## allows other optimization methods to be used. ## Warning in sqrt(diag(inv_fisher)): NaNs produced summary(fit_repl) ##  ## Latent model - Whittle-Matern ##  ## Call: ## rspde_lme(formula = y_vec ~ -1, loc = \"loc\", data = df_data_repl,  ##     model = op_cov_est, repl = repl, parallel = TRUE) ##  ## No fixed effects. ##  ## Random effects: ##       Estimate Std.error z-value ## alpha  1.28321       NaN     NaN ## tau    0.04583       NaN     NaN ## kappa 20.01370       NaN     NaN ##  ## Random effects (Matern parameterization): ##       Estimate Std.error z-value ## nu    0.783209       NaN     NaN ## sigma 1.271305  0.052037   24.43 ## range 0.125071  0.007832   15.97 ##  ## Measurement error: ##          Estimate Std.error z-value ## std. dev 0.302680  0.004417   68.52 ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  ##  ## Log-Likelihood:  -2758.186  ## Number of function calls by 'optim' = 34 ## Optimization method used in 'optim' = L-BFGS-B ##  ## Time used to:     fit the model =  14.06865 secs  ##   set up the parallelization = 2.45326 secs glance(fit_repl) ## # A tibble: 1 √ó 9 ##    nobs sigma logLik   AIC   BIC deviance df.residual model                alpha ##   <int> <dbl>  <dbl> <dbl> <dbl>    <dbl>       <dbl> <chr>                <dbl> ## 1  4000 0.303 -2758. 5524. 5550.    5516.        3996 Covariance-Based Ma‚Ä¶  1.28 print(data.frame(   sigma = c(sigma, fit_repl$matern_coeff$random_effects[2]),    range = c(r, fit_repl$matern_coeff$random_effects[3]),   nu = c(nu, fit_repl$matern_coeff$random_effects[1]),   row.names = c(\"Truth\", \"Estimates\") )) ##              sigma     range        nu ## Truth     1.300000 0.1264911 0.8000000 ## Estimates 1.271305 0.1250709 0.7832089 # Total time print(fit_repl$fitting_time) ## Time difference of 14.06866 secs fit_repl2 <- rspde_lme(y_vec ~ -1, model = op_cov_est, repl = repl,        data = df_data_repl, loc = \"loc\", parallel = TRUE,        improve_hessian = TRUE) summary(fit_repl2) ##  ## Latent model - Whittle-Matern ##  ## Call: ## rspde_lme(formula = y_vec ~ -1, loc = \"loc\", data = df_data_repl,  ##     model = op_cov_est, repl = repl, parallel = TRUE, improve_hessian = TRUE) ##  ## No fixed effects. ##  ## Random effects: ##        Estimate Std.error z-value ## alpha  1.283209  0.013648   94.02 ## tau    0.045834  0.003324   13.79 ## kappa 20.013699  1.369621   14.61 ##  ## Random effects (Matern parameterization): ##       Estimate Std.error z-value ## nu    0.783209  0.013648   57.39 ## sigma 1.271305  0.052038   24.43 ## range 0.125071  0.007832   15.97 ##  ## Measurement error: ##          Estimate Std.error z-value ## std. dev 0.302680  0.004949   61.16 ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  ##  ## Log-Likelihood:  -2758.186  ## Number of function calls by 'optim' = 34 ## Optimization method used in 'optim' = L-BFGS-B ##  ## Time used to:     fit the model =  11.15767 secs  ##   compute the Hessian = 6.2376 secs  ##   set up the parallelization = 2.47045 secs"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_cov.html","id":"spatial-data-and-parameter-estimation","dir":"Articles","previous_headings":"","what":"Spatial data and parameter estimation","title":"Rational approximation with the rSPDE package","text":"functions used previous examples also work spatial models. need construct mesh domain interest compute matrices needed define operator. tasks can performed, example, using fmesher package. Let us start defining mesh [0,1]√ó[0,1][0,1]\\times [0, 1] compute mass stiffness matrices mesh. consider simple Gaussian linear model 30 independent replicates latent spatial field u(ùê¨)u(\\mathbf{s}), observed mm locations, {ùê¨1,‚Ä¶,ùê¨m}\\{\\mathbf{s}_1 , \\ldots , \\mathbf{s}_m \\}, replicate. =1,‚Ä¶,m,= 1,\\ldots,m, yi=u1(ùê¨i)+Œµi,‚ãÆ=‚ãÆyi+29m=u30(ùê¨i)+Œµi+29m,\\begin{align}  y_i &= u_1(\\mathbf{s}_i)+\\varepsilon_i,\\\\ \\vdots &= \\vdots\\\\  y_{+29m} &= u_{30}(\\mathbf{s}_i) + \\varepsilon_{+29m}, \\end{align} Œµ1,‚Ä¶,Œµ30m\\varepsilon_1,\\ldots,\\varepsilon_{30m} iid normally distributed mean 0 standard deviation 0.1. Let us create FEM mesh:  can now use mesh define rational SPDE approximation order m=2m=2 Mat√©rn model fashion one-dimensional case. now simulate latent process standard deviation œÉ=1\\sigma=1 range 0.10.1. use ŒΩ=0.5\\nu=0.5 model exponential covariance function. end create model object matern.operators() function: Now let us simulate noisy data use estimate parameters model. construct observation matrix, use function fm_basis() fmesher package. Recall simulate data 30 replicates. first replicate simulated random field well observation locations shown following figure.  Let us now create new object fit model: can now proceed previous cases. set vector response variables create auxiliary replicates vector, repl, contains indexes replicates observation, fit model: Let us get summary: glance: Let us compare estimated results true values: Let us now plot prediction replicate 3 using augment function. begin creating data.frame want prediction:","code":"n_loc <- 500 loc_2d_mesh <- matrix(runif(n_loc * 2), n_loc, 2) mesh_2d <- fm_mesh_2d(   loc = loc_2d_mesh,   cutoff = 0.05,   offset = c(0.1, 0.4),   max.edge = c(0.05, 0.5) ) plot(mesh_2d, main = \"\") points(loc_2d_mesh[, 1], loc_2d_mesh[, 2]) nu <- 0.7 sigma <- 1.3 range <- 0.15 d <- 2 op_cov_2d <- matern.operators(   mesh = mesh_2d,   nu = nu,   range = range,   sigma = sigma,   m = 2,   parameterization = \"matern\" ) tau <- op_cov_2d$tau n.rep <- 30 u <- simulate(op_cov_2d, nsim = n.rep) A <- fm_basis(   x = mesh_2d,   loc = loc_2d_mesh ) sigma.e <- 0.1 Y <- A %*% u + matrix(rnorm(n_loc * n.rep), ncol = n.rep) * sigma.e library(viridis) library(ggplot2) proj <- fm_evaluator(mesh_2d, dims = c(70, 70))  df_field <- data.frame(x = proj$lattice$loc[,1],                         y = proj$lattice$loc[,2],                         field = as.vector(fm_evaluate(proj,                          field = as.vector(u[, 1]))),                         type = \"field\")  df_loc <- data.frame(x = loc_2d_mesh[, 1],                       y = loc_2d_mesh[, 2],                       field = as.vector(Y[,1]),                       type = \"locations\") df_plot <- rbind(df_field, df_loc)  ggplot(df_plot) + aes(x = x, y = y, fill = field) +         facet_wrap(~type) + xlim(0,1) + ylim(0,1) +          geom_raster(data = df_field) +         geom_point(data = df_loc, aes(colour = field),         show.legend = FALSE) +          scale_fill_viridis() + scale_colour_viridis() op_cov_2d_est <- matern.operators(   mesh = mesh_2d,   m = 2 ) y_vec <- as.vector(Y) repl <- rep(1:n.rep, each = n_loc) df_data_2d <- data.frame(y = y_vec, x_coord = loc_2d_mesh[,1],                       y_coord = loc_2d_mesh[,2])  fit_2d <- rspde_lme(y ~ -1, model = op_cov_2d_est,            data = df_data_2d, repl = repl,           loc = c(\"x_coord\", \"y_coord\"), parallel = TRUE) summary(fit_2d) ##  ## Latent model - Whittle-Matern ##  ## Call: ## rspde_lme(formula = y ~ -1, loc = c(\"x_coord\", \"y_coord\"), data = df_data_2d,  ##     model = op_cov_2d_est, repl = repl, parallel = TRUE) ##  ## No fixed effects. ##  ## Random effects: ##       Estimate Std.error z-value ## alpha  1.52782   0.04909  31.123 ## tau    0.07302   0.01346   5.423 ## kappa 13.13775   0.80390  16.342 ##  ## Random effects (Matern parameterization): ##       Estimate Std.error z-value ## nu    0.527816  0.049090   10.75 ## sigma 1.365723  0.014512   94.11 ## range 0.156410  0.005158   30.32 ##  ## Measurement error: ##           Estimate Std.error z-value ## std. dev 0.1003218 0.0008777   114.3 ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  ##  ## Log-Likelihood:  -5659.535  ## Number of function calls by 'optim' = 40 ## Optimization method used in 'optim' = L-BFGS-B ##  ## Time used to:     fit the model =  1.64966 mins  ##   set up the parallelization = 4.63534 secs glance(fit_2d) ## # A tibble: 1 √ó 9 ##    nobs sigma logLik    AIC    BIC deviance df.residual model              alpha ##   <int> <dbl>  <dbl>  <dbl>  <dbl>    <dbl>       <dbl> <chr>              <dbl> ## 1 15000 0.100 -5660. 11327. 11358.   11319.       14996 Covariance-Based ‚Ä¶  1.53 print(data.frame(   sigma = c(sigma, fit_2d$matern_coeff$random_effects[2]),    range = c(range, fit_2d$matern_coeff$random_effects[3]),   nu = c(nu, fit_2d$matern_coeff$random_effects[1]),   row.names = c(\"Truth\", \"Estimates\") )) ##              sigma     range        nu ## Truth     1.300000 0.1500000 0.7000000 ## Estimates 1.365723 0.1564103 0.5278161 # Total time print(fit_2d$fitting_time) ## Time difference of 1.64966 mins df_pred <- data.frame(x = proj$lattice$loc[,1],                         y = proj$lattice$loc[,2]) augment(fit_2d, newdata = df_pred, loc = c(\"x\",\"y\"), which_repl = 3) %>% ggplot() +               geom_raster(aes(x=x, y=y, fill = .fitted)) + xlim(0,1) + ylim(0,1) +                scale_fill_viridis() ## Warning: Removed 3744 rows containing missing values or values outside the scale range ## (`geom_raster()`)."},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_cov.html","id":"an-example-with-a-non-stationary-model","dir":"Articles","previous_headings":"","what":"An example with a non-stationary model","title":"Rational approximation with the rSPDE package","text":"goal now show one can fit model non-stationary œÉ\\sigma (std. deviation) non-stationary œÅ\\rho (range parameter). One can also use parameterization terms non-stationary SPDE parameters Œ∫\\kappa œÑ\\tau. example consider simulated data.","code":""},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_cov.html","id":"simulating-the-data","dir":"Articles","previous_headings":"An example with a non-stationary model","what":"Simulating the data","title":"Rational approximation with the rSPDE package","text":"Let us consider simple Gaussian linear model latent spatial field x(ùê¨)x(\\mathbf{s}), defined rectangle (0,10)√ó(0,5)(0,10) \\times (0,5), std. deviation range parameter satisfy following log-linear regressions: log(œÉ(ùê¨))=Œ∏1+Œ∏3b(ùê¨),log(œÅ(ùê¨))=Œ∏2+Œ∏3b(ùê¨),\\begin{align} \\log(\\sigma(\\mathbf{s})) &= \\theta_1 + \\theta_3 b(\\mathbf{s}),\\\\ \\log(\\rho(\\mathbf{s})) &= \\theta_2 + \\theta_3 b(\\mathbf{s}), \\end{align} b(ùê¨)=(s1‚àí5)/10b(\\mathbf{s}) = (s_1-5)/10. assume data observed mm locations, {ùê¨1,‚Ä¶,ùê¨m}\\{\\mathbf{s}_1 , \\ldots , \\mathbf{s}_m \\}. =1,‚Ä¶,m,= 1,\\ldots,m, yi=x1(ùê¨i)+Œµi,y_i = x_1(\\mathbf{s}_i)+\\varepsilon_i, Œµ1,‚Ä¶,Œµm\\varepsilon_1,\\ldots,\\varepsilon_{m} iid normally distributed mean 0 standard deviation 0.1. begin defining domain creating mesh: follow structure INLA. However, INLA allows one specify B.tau B.kappa matrices, , INLA, one wants parameterize terms range standard deviation one needs manually. provide option directly provide matrices B.sigma B.range. usage matrices B.tau B.kappa identical corresponding ones inla.spde2.matern() function. matrices B.sigma B.range work way, parameterize stardard deviation range, respectively. columns B matrices correspond parameter. first column parameter estimated, constant column. , instance, one wants share parameter sigma range (tau kappa), one simply let corresponding column nonzero B.sigma B.range (B.tau B.kappa). assume ŒΩ=0.8\\nu = 0.8, Œ∏1=0,Œ∏2=1\\theta_1 = 0, \\theta_2 = 1 Œ∏3=1\\theta_3=1. Let us now build model spde.matern.operators() function: Let us now sample data simulate() method: Let us now obtain 600 random locations rectangle compute AA matrix: can now generate response vector y: Let us now create object fit data: Let us also create data.frame() contains data locations:","code":"rec_domain <- cbind(c(0, 1, 1, 0, 0) * 10, c(0, 0, 1, 1, 0) * 5)  mesh <- fm_mesh_2d(loc.domain = rec_domain, cutoff = 0.1,    max.edge = c(0.5, 1.5), offset = c(0.5, 1.5)) nu <- 0.8 true_theta <- c(0,1, 1) B.sigma = cbind(0, 1, 0, (mesh$loc[,1] - 5) / 10) B.range = cbind(0, 0, 1, (mesh$loc[,1] - 5) / 10) alpha <- nu + 1 # nu + d/2 ; d = 2  # SPDE model op_cov_ns <- spde.matern.operators(mesh = mesh,    theta = true_theta,   nu = nu,   B.sigma = B.sigma,    B.range = B.range,   parameterization = \"matern\") u <- as.vector(simulate(op_cov_ns, seed = 123)) m <-600 loc_mesh <- cbind(runif(m) * 10, runif(m) * 5)  A <- fm_basis(   x = mesh,   loc = loc_mesh ) y <- as.vector(A %*% as.vector(u)) + rnorm(m) * 0.1 op_cov_ns_est <- op_cov_ns <- spde.matern.operators(mesh = mesh,    B.sigma = B.sigma,    B.range = B.range,   parameterization = \"matern\") df_data_ns <- data.frame(y= y, x_coord = loc_mesh[,1], y_coord = loc_mesh[,2])"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_cov.html","id":"fitting-the-non-stationary-rspde-model","dir":"Articles","previous_headings":"An example with a non-stationary model","what":"Fitting the non-stationary rSPDE model","title":"Rational approximation with the rSPDE package","text":"Let us get summary: Let us now compare true values:","code":"fit_ns <- rspde_lme(y ~ -1, model = op_cov_ns_est,            data = df_data_ns, loc = c(\"x_coord\", \"y_coord\"),            parallel = TRUE) summary(fit_ns) ##  ## Latent model - Generalized Whittle-Matern ##  ## Call: ## rspde_lme(formula = y ~ -1, loc = c(\"x_coord\", \"y_coord\"), data = df_data_ns,  ##     model = op_cov_ns_est, parallel = TRUE) ##  ## No fixed effects. ##  ## Random effects: ##         Estimate Std.error z-value ## alpha    1.89706   0.06386  29.705 ## Theta 1 -0.29625   0.15621  -1.897 ## Theta 2  0.90944   0.23431   3.881 ## Theta 3  1.90932   0.40437   4.722 ##  ## Measurement error: ##          Estimate Std.error z-value ## std. dev  0.10194   0.05288   1.928 ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  ##  ## Log-Likelihood:  -89.47917  ## Number of function calls by 'optim' = 93 ## Optimization method used in 'optim' = L-BFGS-B ##  ## Time used to:     fit the model =  10.81175 secs  ##   set up the parallelization = 2.40948 secs print(data.frame(   theta1 = c(true_theta[1], fit_ns$coeff$random_effects[2]),    theta2 = c(true_theta[2], fit_ns$coeff$random_effects[3]),   theta3 = c(true_theta[3], fit_ns$coeff$random_effects[4]),    alpha = c(alpha, fit_ns$coeff$random_effects[1])),   row.names = c(\"Truth\", \"Estimates\") ) ##               theta1    theta2   theta3    alpha ## Truth      0.0000000 1.0000000 1.000000 1.800000 ## Estimates -0.2962479 0.9094445 1.909317 1.897063"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_cov.html","id":"changing-the-type-and-the-order-of-the-rational-approximation","dir":"Articles","previous_headings":"","what":"Changing the type and the order of the rational approximation","title":"Rational approximation with the rSPDE package","text":"three rational approximations available. BRASIL algorithm Hofreither (2021), two ‚Äúversions‚Äù Clenshaw-Lord Chebyshev-Pade algorithm, one lower bound zero another lower bound given Bolin, Simas, Xiong (2023). type rational approximation can chosen setting type_rational_approximation argument matern.operators function. BRASIL algorithm corresponds choice brasil, Clenshaw-Lord Chebyshev pade zero lower bound non-zero lower bounds given, respectively, choices chebfun chebfunLB. instance, can create rSPDE object chebfunLB rational approximation can check order rational approximation rational.order() function assign new order rational.order<-() function: Let us fit model using data previous example: Let us compare true values: Finally, can check type rational approximation rational.type() function assign new type using rational.type<-() function: Let us now fit model, data previous example, brasil rational approximation: Let us compare true values:","code":"op_cov_2d_type <- matern.operators(   mesh = mesh_2d,   m = 2,   type_rational_approximation = \"chebfunLB\" ) tau <- op_cov_2d_type$tau rational.order(op_cov_2d_type) ## [1] 2 rational.order(op_cov_2d_type) <- 1 fit_order1 <- rspde_lme(y ~ -1, model = op_cov_2d_type,            data = df_data_2d,repl = repl,           loc = c(\"x_coord\", \"y_coord\"), parallel = TRUE) summary(fit_order1) ##  ## Latent model - Whittle-Matern ##  ## Call: ## rspde_lme(formula = y ~ -1, loc = c(\"x_coord\", \"y_coord\"), data = df_data_2d,  ##     model = op_cov_2d_type, repl = repl, parallel = TRUE) ##  ## No fixed effects. ##  ## Random effects: ##       Estimate Std.error z-value ## alpha  1.51696   0.04769  31.807 ## tau    0.07206   0.01281   5.626 ## kappa 13.98082   0.75501  18.517 ##  ## Random effects (Matern parameterization): ##       Estimate Std.error z-value ## nu    0.516958  0.047693   10.84 ## sigma 1.392506  0.014772   94.27 ## range 0.145459  0.004507   32.27 ##  ## Measurement error: ##           Estimate Std.error z-value ## std. dev 0.1003733 0.0008786   114.2 ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  ##  ## Log-Likelihood:  -5658.37  ## Number of function calls by 'optim' = 30 ## Optimization method used in 'optim' = L-BFGS-B ##  ## Time used to:     fit the model =  32.36463 secs  ##   set up the parallelization = 4.67864 secs print(data.frame(   sigma = c(sigma, fit_order1$matern_coeff$random_effects[2]),    range = c(range, fit_order1$matern_coeff$random_effects[3]),   nu = c(nu, fit_order1$matern_coeff$random_effects[1]),   row.names = c(\"Truth\", \"Estimates\") )) ##              sigma     range        nu ## Truth     1.300000 0.1500000 0.8000000 ## Estimates 1.392506 0.1454587 0.5169575 rational.type(op_cov_2d_type) ## [1] \"chebfunLB\" rational.type(op_cov_2d_type) <- \"brasil\" fit_brasil <- rspde_lme(y ~ -1, model = op_cov_2d_type,            data = df_data_2d,repl = repl,           loc = c(\"x_coord\", \"y_coord\"), parallel = TRUE) ## Warning in rspde_lme(y ~ -1, model = op_cov_2d_type, data = df_data_2d, : The ## optimization failed to provide a numerically positive-definite Hessian. You can ## try to obtain a positive-definite Hessian by setting 'improve_hessian' to TRUE ## or by setting 'parallel' to FALSE, which allows other optimization methods to ## be used. ## Warning in sqrt(diag(inv_fisher)): NaNs produced summary(fit_brasil) ##  ## Latent model - Whittle-Matern ##  ## Call: ## rspde_lme(formula = y ~ -1, loc = c(\"x_coord\", \"y_coord\"), data = df_data_2d,  ##     model = op_cov_2d_type, repl = repl, parallel = TRUE) ##  ## No fixed effects. ##  ## Random effects: ##       Estimate Std.error z-value ## alpha  1.49502       NaN     NaN ## tau    0.08003       NaN     NaN ## kappa 13.61506       NaN     NaN ##  ## Random effects (Matern parameterization): ##       Estimate Std.error z-value ## nu    0.495016       NaN     NaN ## sigma 1.375559  0.014745   93.29 ## range 0.146162  0.004105   35.61 ##  ## Measurement error: ##          Estimate Std.error z-value ## std. dev 0.100338  0.000878   114.3 ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  ##  ## Log-Likelihood:  -5658.827  ## Number of function calls by 'optim' = 63 ## Optimization method used in 'optim' = L-BFGS-B ##  ## Time used to:     fit the model =  57.96571 secs  ##   set up the parallelization = 4.77319 secs print(data.frame(   sigma = c(sigma, fit_brasil$matern_coeff$random_effects[2]),    range = c(range, fit_brasil$matern_coeff$random_effects[3]),   nu = c(nu, fit_brasil$matern_coeff$random_effects[1]),   row.names = c(\"Truth\", \"Estimates\") )) ##              sigma     range        nu ## Truth     1.300000 0.1500000 0.8000000 ## Estimates 1.375559 0.1461621 0.4950159"},{"path":[]},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inla.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"R-INLA implementation of the rational SPDE approach","text":"vignette present R-INLA implementation rational SPDE approach. theoretical details refer reader Rational approximation rSPDE package vignette Bolin, Simas, Xiong (2023). begin providing step--step illustration use implementation. end consider real world data set consists precipitation measurements Paran√° region Brazil. initial model fitting, show change parameters model. end, also provide example replicates. important mention one can improve performance using PARDISO solver. Please, go https://www.pardiso-project.org/r-inla/#license apply license. Also, use inla.pardiso() instructions enable PARDISO sparse library.","code":""},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inla.html","id":"example-with-real-data","dir":"Articles","previous_headings":"","what":"Example with real data","title":"R-INLA implementation of the rational SPDE approach","text":"illustrate implementation rSPDE R-INLA consider dataset available R-INLA. data also used illustrate SPDE approach, see instance book Advanced Spatial Modeling Stochastic Partial Differential Equations Using R INLA also vignette Spatial Statistics using R-INLA Gaussian Markov random fields. See also Lindgren, Rue, Lindstr√∂m (2011) theoretical details standard SPDE approach. data consist precipitation measurements Paran√° region Brazil provided Brazilian National Water Agency. data collected 616 gauge stations Paran√° state, south Brazil, day 2011.","code":""},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inla.html","id":"an-rspde-model-for-precipitation","dir":"Articles","previous_headings":"Example with real data","what":"An rSPDE model for precipitation","title":"R-INLA implementation of the rational SPDE approach","text":"follow vignette Spatial Statistics using R-INLA Gaussian Markov random fields. precipitation data always positive, assume Gamma distributed. R-INLA uses following parameterization Gamma distribution, Œì(Œº,œï):œÄ(y)=1Œì(œï)(œïŒº)œïyœï‚àí1exp(‚àíœïyŒº).\\Gamma(\\mu, \\phi): \\pi (y) = \\frac{1}{\\Gamma(\\phi)} \\left(\\frac{\\phi}{\\mu}\\right)^{\\phi} y^{\\phi - 1} \\exp\\left(-\\frac{\\phi y}{\\mu}\\right) . parameterization, distribution expected value E(x)=ŒºE(x) = \\mu variance V(x)=Œº2/(œï)V(x) = \\mu^2/(\\phi), where1/œï1/\\phi dispersion parameter. example Œº\\mu modeled using stochastic model includes covariates spatial structure, resulting latent Gaussian model precipitation measurements yi‚à£Œº(si),Œ∏‚àºŒì(Œº(si),cœï)log(Œº(s))=Œ∑(s)=‚àëkfk(ck(s))+u(s)Œ∏‚àºœÄ(Œ∏),\\begin{align} y_i\\mid \\mu(s_i), \\theta &\\sim \\Gamma(\\mu(s_i),c\\phi)\\\\ \\log (\\mu(s)) &= \\eta(s) = \\sum_k f_k(c_k(s))+u(s)\\\\ \\theta &\\sim \\pi(\\theta) \\end{align}, yiy_i denotes measurement taken location sis_i, ck(s)c_k(s) covariates, u(s)u(s) mean-zero Gaussian Mat√©rn field, Œ∏\\theta vector containing parameters model, including smoothness field. , using rSPDE model also able estimate smoothness latent field.","code":""},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inla.html","id":"examining-the-data","dir":"Articles","previous_headings":"Example with real data","what":"Examining the data","title":"R-INLA implementation of the rational SPDE approach","text":"using R-INLA. install R-INLA go R-INLA Project. begin loading libraries need get data build plots. Let us load data border region data frame contains daily measurements 616 stations year 2011, well coordinates altitude information measurement stations. analyze full spatio-temporal data set, instead look total precipitation January, calculate next snippet code, extract coordinates altitudes remove locations missing values. Let us build plot precipitation observations using ggplot:  red line figure shows coast line, expect distance coast good covariate precipitation. covariate available, let us calculate observation location: Now, let us plot precipitation function possible covariates:","code":"library(ggplot2) library(INLA) library(splancs) library(viridis) data(PRprec) data(PRborder) Y <- rowMeans(PRprec[, 3 + 1:31]) ind <- !is.na(Y) Y <- Y[ind] coords <- as.matrix(PRprec[ind, 1:2]) alt <- PRprec$Altitude[ind] ggplot() +   geom_point(aes(     x = coords[, 1], y = coords[, 2],     colour = Y   ), size = 2, alpha = 1) +   geom_path(aes(x = PRborder[, 1], y = PRborder[, 2])) +   geom_path(aes(x = PRborder[1034:1078, 1], y = PRborder[     1034:1078,     2   ]), colour = \"red\") +    scale_color_viridis() seaDist <- apply(spDists(coords, PRborder[1034:1078, ],   longlat = TRUE ), 1, min) par(mfrow = c(2, 2)) plot(coords[, 1], Y, cex = 0.5, xlab = \"Longitude\") plot(coords[, 2], Y, cex = 0.5, xlab = \"Latitude\") plot(seaDist, Y, cex = 0.5, xlab = \"Distance to sea\") plot(alt, Y, cex = 0.5, xlab = \"Altitude\") par(mfrow = c(1, 1))"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inla.html","id":"creating-the-rspde-model","dir":"Articles","previous_headings":"Example with real data","what":"Creating the rSPDE model","title":"R-INLA implementation of the rational SPDE approach","text":"use R-INLA implementation rSPDE model need load functions: rSPDE-INLA implementation reminiscent R-INLA, usage straightforward R-INLA users. instance, create rSPDE model, one use rspde.matern() place inla.spde2.matern(). create index, one use rspde.make.index() place inla.spde.make.index(). create matrix, one use rspde.make.() place inla.spde.make.(), . main differences comparing arguments rSPDE-INLA implementation standard SPDE implementation R-INLA, nu rspde.order arguments, present rSPDE-INLA implementation. see use arguments.","code":"library(rSPDE)"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inla.html","id":"mesh","dir":"Articles","previous_headings":"Example with real data > Creating the rSPDE model","what":"Mesh","title":"R-INLA implementation of the rational SPDE approach","text":"can use fmesher creating mesh. begin loading fmesher package: Let us create mesh based non-convex hull avoid adding many small triangles outside domain interest:","code":"library(fmesher) prdomain <- fm_nonconvex_hull(coords, -0.03, -0.05, resolution = c(100, 100)) prmesh <- fm_mesh_2d(boundary = prdomain, max.edge = c(0.45, 1), cutoff = 0.2)  plot(prmesh, asp = 1, main = \"\") lines(PRborder, col = 3) points(coords[, 1], coords[, 2], pch = 19, cex = 0.5, col = \"red\")"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inla.html","id":"the-observation-matrix","dir":"Articles","previous_headings":"Example with real data > Creating the rSPDE model","what":"The observation matrix","title":"R-INLA implementation of the rational SPDE approach","text":"now create AA matrix, connects mesh observation locations create rSPDE model. task, mentioned earlier, need use rSPDEspecific function, whose name reminiscent R-INLA‚Äôs standard SPDE approach, namely rspde.make.() (place R-INLA‚Äôs inla.spde.make.()). reason need specific function size AA matrix depends order rational approximation. details can found introduction Rational approximation rSPDE package vignette. default order 2 covariance-based rational approximation. mentioned introduction Rational approximation rSPDE package vignette, approximation order 2 covariance-based rational approximation approximately computational cost operator-based rational approximation order 1. Recall latent process uu solution (Œ∫2I‚àíŒî)Œ±/2(œÑu)=ùí≤,(\\kappa^2 -\\Delta)^{\\alpha/2}(\\tau u) = \\mathcal{W}, Œ±=ŒΩ+d/2\\alpha = \\nu + d/2. want estimate three parameters œÑ,Œ∫\\tau,\\kappa ŒΩ\\nu, default option rSPDE-INLA implementation. However, also option fix smoothness parameter ŒΩ\\nu predefined value estimate œÑ\\tau Œ∫\\kappa. discussed later. first example assume want rational approximation order 1. end can use rspde.make.() function. Since assume order 1 want estimate smoothness, default options function, required parameters simply mesh locations:","code":"Abar <- rspde.make.A(mesh = prmesh, loc = coords)"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inla.html","id":"setting-up-the-rspde-model","dir":"Articles","previous_headings":"Example with real data > Creating the rSPDE model","what":"Setting up the rSPDE model","title":"R-INLA implementation of the rational SPDE approach","text":"set rSPDEmodel, need mesh. default assume want estimate smoothness parameter ŒΩ\\nu covariance-based rational approximation order 2. Later vignette also see options setting rSPDE models keeping smoothness parameter fixed /increasing order covariance-based rational approximation. Therefore, set model use rspde.matern() function: Note function reminiscent R-INLA‚Äôs inla.spde2.matern() function. pattern tried keep consistent package: rSPDE versions R-INLA function either replace inla inla.spde inla.spde2 rspde.","code":"rspde_model <- rspde.matern(mesh = prmesh)"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inla.html","id":"the-inla-stack","dir":"Articles","previous_headings":"Example with real data > Creating the rSPDE model","what":"The inla.stack","title":"R-INLA implementation of the rational SPDE approach","text":"Since covariates already evaluated observation locations, want apply AA matrix spatial effect fixed effects. can use inla.stack() function. difference, however, need use function rspde.make.index() (place standard inla.spde.make.index()) create index. one using default options, , estimate smoothness parameter ŒΩ\\nu rational approximation order 2, usage rspde.make.index() identical usage inla.spde.make.index(): can create stack standard manner: observation matrix AA applied spatial effect intercept identity observation matrix, denoted 11, applied covariates. means covariates unaffected observation matrix. observation matrices =list(Abar,1)=list(Abar,1) used link corresponding elements effects-list observations. Thus model latent spatial field mesh.index intercept linked log-expectation observations, .e.¬†Œ∑(s)\\eta(s), AA-matrix. covariates, hand, linked directly Œ∑(s)\\eta(s). stk.dat object defined implies following principal linkage model components observations Œ∑(s)‚àºAx(s)+Intercept+seaDist.\\eta(s) \\sim x(s) + \\text{ Intercept} + \\text{seaDist}.Œ∑(s)\\eta(s) used observation-likelihood, yi‚à£Œ∑(si),Œ∏‚àºŒì(exp(Œ∑(si)),cœï).y_i\\mid \\eta(s_i),\\theta \\sim \\Gamma(\\exp(\\eta (s_i)), c\\phi).","code":"mesh.index <- rspde.make.index(name = \"field\", mesh = prmesh) stk.dat <- inla.stack(   data = list(y = Y), A = list(Abar, 1), tag = \"est\",   effects = list(     c(       mesh.index     ),     list(       seaDist = inla.group(seaDist),       Intercept = 1     )   ) )"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inla.html","id":"model-fitting","dir":"Articles","previous_headings":"Example with real data","what":"Model fitting","title":"R-INLA implementation of the rational SPDE approach","text":"build model using distance sea xix_i covariate improper CAR(1) model Œ≤ij=1(‚àºj)\\beta_{ij}=1(\\sim j), R-INLA calls random walk order 1. -1 added remove R‚Äôs implicit intercept, replaced explicit +Intercept created stack. fit model proceed standard SPDE approach simply call inla().","code":"f.s <- y ~ -1 + Intercept + f(seaDist, model = \"rw1\") +   f(field, model = rspde_model) rspde_fit <- inla(f.s,   family = \"Gamma\", data = inla.stack.data(stk.dat),   verbose = FALSE,   control.inla = list(int.strategy = \"eb\"),   control.predictor = list(A = inla.stack.A(stk.dat), compute = TRUE) )"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inla.html","id":"inla-results","dir":"Articles","previous_headings":"Example with real data","what":"INLA results","title":"R-INLA implementation of the rational SPDE approach","text":"can look summaries posterior distributions parameters, example fixed effects (.e.¬†intercept) hyper-parameters (.e.¬†dispersion gamma likelihood, precision RW1, parameters spatial field): Let Œ∏1=Theta1\\theta_1 = \\textrm{Theta1}, Œ∏2=Theta2\\theta_2=\\textrm{Theta2} Œ∏3=Theta3\\theta_3=\\textrm{Theta3}. terms SPDE (Œ∫2I‚àíŒî)Œ±/2(œÑu)=ùí≤,(\\kappa^2 - \\Delta)^{\\alpha/2}(\\tau u) = \\mathcal{W}, Œ±=ŒΩ+d/2\\alpha = \\nu + d/2, œÑ=exp(Œ∏1),Œ∫=exp(Œ∏2),\\tau = \\exp(\\theta_1),\\quad \\kappa = \\exp(\\theta_2),  default ŒΩ=2(exp(Œ∏3)1+exp(Œ∏3)).\\nu = 2\\Big(\\frac{\\exp(\\theta_3)}{1+\\exp(\\theta_3)}\\Big). number 2 comes upper bound ŒΩ\\nu, discussed later vignette. general, ŒΩ=ŒΩUB(exp(Œ∏3)1+exp(Œ∏3)),\\nu = \\nu_{UB}\\Big(\\frac{\\exp(\\theta_3)}{1+\\exp(\\theta_3)}\\Big), ŒΩUB\\nu_{UB} value upper bound smoothness parameter ŒΩ\\nu. Another choice prior ŒΩ\\nu truncated lognormal distribution also discussed later vignette.","code":"summary(rspde_fit) ## Time used: ##     Pre = 0.399, Running = 3.39, Post = 0.0635, Total = 3.85  ## Fixed effects: ##            mean   sd 0.025quant 0.5quant 0.975quant  mode kld ## Intercept 1.941 0.04      1.863    1.941      2.019 1.941   0 ##  ## Random effects: ##   Name     Model ##     seaDist RW1 model ##    field CGeneric ##  ## Model hyperparameters: ##                                                    mean       sd 0.025quant ## Precision-parameter for the Gamma observations   14.697    1.049      12.74 ## Precision for seaDist                          7872.281 4695.278    2561.77 ## Theta1 for field                                 -1.749    1.176      -4.36 ## Theta2 for field                                  1.614    0.331       1.00 ## Theta3 for field                                  0.187    1.031      -1.53 ##                                                0.5quant 0.975quant     mode ## Precision-parameter for the Gamma observations    14.66   1.69e+01   14.593 ## Precision for seaDist                           6704.63   2.02e+04 4979.659 ## Theta1 for field                                  -1.65   2.01e-01   -1.139 ## Theta2 for field                                   1.60   2.31e+00    1.541 ## Theta3 for field                                   0.10   2.47e+00   -0.337 ##  ## Marginal log-Likelihood:  -1254.41  ##  is computed  ## Posterior summaries for the linear predictor and the fitted values are computed ## (Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)')"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inla.html","id":"rspde-inla-results","dir":"Articles","previous_headings":"Example with real data","what":"rSPDE-INLA results","title":"R-INLA implementation of the rational SPDE approach","text":"can obtain outputs respect parameters original scale using function rspde.result(): mentioned , create model object rspde.matern(), must choose upper bound nu using argument nu.upper.bound. argument passed, default value 2 used. However, mean mode nu close nu.upper.bound, warning given suggesting user increase nu.upper.bound refit data. create plots posterior marginal densities, can use gg_df() function, creates ggplot2-friendly data frames. following figure shows posterior marginal densities three parameters using gg_df() function.  function reminiscent inla.spde.result() function main difference summary() plot() methods implemented. can also obtain results matern parameterization setting parameterization argument matern: similar manner, can obtain posterior plots matern parameterization:","code":"result_fit <- rspde.result(rspde_fit, \"field\", rspde_model) summary(result_fit) ##           mean       sd 0.025quant 0.5quant 0.975quant      mode ## tau   0.306368 0.334325  0.0132446 0.198873    1.21493 0.0304374 ## kappa 5.308410 1.860710  2.7418200 4.938050    9.95161 4.2787200 ## nu    1.063510 0.418473  0.3585380 1.035850    1.83976 0.7636290 posterior_df_fit <- gg_df(result_fit)  ggplot(posterior_df_fit) + geom_line(aes(x = x, y = y)) +  facet_wrap(~parameter, scales = \"free\") + labs(y = \"Density\") result_fit_matern <- rspde.result(rspde_fit, \"field\",                        rspde_model, parameterization = \"matern\") summary(result_fit_matern) ##             mean        sd 0.025quant 0.5quant 0.975quant     mode ## std.dev 0.324602 0.0709017   0.198276 0.323188   0.464238 0.333092 ## range   0.559336 0.1724600   0.291300 0.537306   0.956448 0.539533 ## nu      1.063510 0.4184730   0.358538 1.035850   1.839760 0.763629 posterior_df_fit_matern <- gg_df(result_fit_matern)  ggplot(posterior_df_fit_matern) + geom_line(aes(x = x, y = y)) +  facet_wrap(~parameter, scales = \"free\") + labs(y = \"Density\")"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inla.html","id":"predictions","dir":"Articles","previous_headings":"Example with real data","what":"Predictions","title":"R-INLA implementation of the rational SPDE approach","text":"Let us now obtain predictions (.e.¬†kriging) expected precipitation dense grid region. begin creating grid want predictions. end, can use rspde.mesh.projector() function. function arguments function inla.mesh.projector(), difference rSPDE version also argument nu argument rspde.order. Thus, proceed fashion R-INLA‚Äôs standard SPDE implementation: lattice contains 150 √ó 100 locations. One can easily change resolution kriging prediction changing nxy. Let us find cells outside region interest plot estimates . Let us plot locations prediction:  Now, ways calculate kriging prediction. simplest way evaluate mean individual random effects linear predictor calculate exponential sum (since Œº(s)=exp(Œ∑(s))\\mu(s)=\\exp(\\eta(s)) ). accurate way calculate prediction jointly estimation, unfortunately quite computationally expensive prediction fine grid. However, illustration, proceed option show one can . end, first, link prediction coordinates mesh nodes AA matrix Since using distance sea covariate, also calculate covariate prediction locations. now make stack prediction locations. data prediction locations, set y= NA. join stack estimation stack. joint estimation takes , therefore turn computation certain things interested , marginals random effect. also use simplified integration strategy (actually using posterior mode hyper-parameters) command control.inla = list(int.strategy = \"eb\"), .e.¬†empirical Bayes. extract indices prediction nodes extract mean standard deviation response: Finally, plot results:  , std. deviations:","code":"nxy <- c(150, 100) projgrid <- rspde.mesh.projector(prmesh,   xlim = range(PRborder[, 1]),   ylim = range(PRborder[, 2]), dims = nxy ) xy.in <- inout(projgrid$lattice$loc, cbind(PRborder[, 1], PRborder[, 2])) coord.prd <- projgrid$lattice$loc[xy.in, ] plot(coord.prd, type = \"p\", cex = 0.1) lines(PRborder) points(coords[, 1], coords[, 2], pch = 19, cex = 0.5, col = \"red\") A.prd <- projgrid$proj$A[xy.in, ] seaDist.prd <- apply(spDists(coord.prd,   PRborder[1034:1078, ],   longlat = TRUE ), 1, min) ef.prd <- list(   c(mesh.index),   list(     long = inla.group(coord.prd[       ,       1     ]), lat = inla.group(coord.prd[, 2]),     seaDist = inla.group(seaDist.prd),     Intercept = 1   ) ) stk.prd <- inla.stack(   data = list(y = NA),   A = list(A.prd, 1), tag = \"prd\",   effects = ef.prd ) stk.all <- inla.stack(stk.dat, stk.prd) rspde_fitprd <- inla(f.s,   family = \"Gamma\",   data = inla.stack.data(stk.all),   control.predictor = list(     A = inla.stack.A(stk.all),     compute = TRUE, link = 1   ),   control.compute = list(     return.marginals = FALSE,     return.marginals.predictor = FALSE   ),   control.inla = list(int.strategy = \"eb\") ) id.prd <- inla.stack.index(stk.all, \"prd\")$data m.prd <- rspde_fitprd$summary.fitted.values$mean[id.prd] sd.prd <- rspde_fitprd$summary.fitted.values$sd[id.prd] # Plot the predictions pred_df <- data.frame(x1 = coord.prd[,1],                       x2 = coord.prd[,2],                       mean = m.prd,                       sd = sd.prd)  ggplot(pred_df, aes(x = x1, y = x2, fill = mean)) +   geom_raster() +   scale_fill_viridis() ggplot(pred_df, aes(x = x1, y = x2, fill = sd)) +   geom_raster() + scale_fill_viridis()"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inla.html","id":"an-example-with-replicates","dir":"Articles","previous_headings":"","what":"An example with replicates","title":"R-INLA implementation of the rational SPDE approach","text":"example simulate data replicates. use example considered Rational approximation rSPDE package vignette (difference way data organized). also refer reader vignette description function matern.operators(), along methods (instance, simulate() method).","code":""},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inla.html","id":"simulating-the-data","dir":"Articles","previous_headings":"An example with replicates","what":"Simulating the data","title":"R-INLA implementation of the rational SPDE approach","text":"Let us consider simple Gaussian linear model 30 independent replicates latent spatial field x(ùê¨)x(\\mathbf{s}), observed mm locations, {ùê¨1,‚Ä¶,ùê¨m}\\{\\mathbf{s}_1 , \\ldots , \\mathbf{s}_m \\}, replicate. =1,‚Ä¶,m,= 1,\\ldots,m, yi=x1(ùê¨i)+Œµi,‚ãÆ=‚ãÆyi+29m=x30(ùê¨i)+Œµi+29m,\\begin{align}  y_i &= x_1(\\mathbf{s}_i)+\\varepsilon_i,\\\\ \\vdots &= \\vdots\\\\  y_{+29m} &= x_{30}(\\mathbf{s}_i) + \\varepsilon_{+29m}, \\end{align} Œµ1,‚Ä¶,Œµ30m\\varepsilon_1,\\ldots,\\varepsilon_{30m} iid normally distributed mean 0 standard deviation 0.1. use basis function representation x(‚ãÖ)x(\\cdot) define AA matrix linking point locations mesh. also need account fact 30 replicates locations. end, AA matrix need can generated spde.make.() function. reason sampling x(‚ãÖ)x(\\cdot) directly latent vector described introduction Rational approximation rSPDE package vignette. begin creating mesh:  compute AA matrix, needed simulation, connects observation locations mesh. end use spde.make.() helper function, wrapper uses functions fm_basis(), fm_block() fm_row_kron() fmesher package. Notice simulated data, use AA matrix spde.make.() function instead rspde.make.() function. now simulate latent process standard deviation œÉ=1\\sigma=1 range 0.10.1. use ŒΩ=0.5\\nu=0.5 model exponential covariance function. end create model object matern.operators() function: details function can found Rational approximation rSPDE package vignette. simulate latent process need use simulate() method operator_information object. obtain simulated data yy connecting AA matrix adding gaussian noise. first replicate simulated random field well observation locations shown following figure.","code":"m <- 200 loc_2d_mesh <- matrix(runif(m * 2), m, 2) mesh_2d <- fm_mesh_2d(   loc = loc_2d_mesh,   cutoff = 0.05,   offset = c(0.1, 0.4),   max.edge = c(0.05, 0.5) ) plot(mesh_2d, main = \"\") points(loc_2d_mesh[, 1], loc_2d_mesh[, 2]) n.rep <- 30 A <- spde.make.A(   mesh = mesh_2d,   loc = loc_2d_mesh,   index = rep(1:m, times = n.rep),   repl = rep(1:n.rep, each = m) ) nu <- 0.5 sigma <- 1 range <- 0.1 kappa <- sqrt(8 * nu) / range tau <- sqrt(gamma(nu) / (sigma^2 * kappa^(2 * nu) * (4 * pi) * gamma(nu + 1))) d <- 2 operator_information <- matern.operators(   mesh = mesh_2d,   nu = nu,   range = range,   sigma = sigma,   m = 2,   parameterization = \"matern\" ) set.seed(1) u <- simulate(operator_information, nsim = n.rep) y <- as.vector(A %*% as.vector(u)) +   rnorm(m * n.rep) * 0.1 proj <- fm_evaluator(mesh_2d, dims = c(100, 100))  df_field <- data.frame(x = proj$lattice$loc[,1],                         y = proj$lattice$loc[,2],                         field = as.vector(fm_evaluate(proj,                          field = as.vector(u[, 1]))),                         type = \"field\")  df_loc <- data.frame(x = loc_2d_mesh[, 1],                       y = loc_2d_mesh[, 2],                       field = y[1:m],                       type = \"locations\") df_plot <- rbind(df_field, df_loc)  ggplot(df_plot) + aes(x = x, y = y, fill = field) +         facet_wrap(~type) + xlim(0,1) + ylim(0,1) +          geom_raster(data = df_field) +         geom_point(data = df_loc, aes(colour = field),         show.legend = FALSE) +          scale_fill_viridis() + scale_colour_viridis() ## Warning: Removed 7648 rows containing missing values or values outside the scale range ## (`geom_raster()`)."},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inla.html","id":"fitting-the-r-inla-rspde-model","dir":"Articles","previous_headings":"An example with replicates","what":"Fitting the R-INLA rSPDE model","title":"R-INLA implementation of the rational SPDE approach","text":"Let us use rational SPDE approach fit data. begin creating AA matrix index replicates, inla.stack object. important notice since replicates provide index repl arguments rspde.make.() function, also argument n.repl rspde.make.index() function. behave identically R-INLA‚Äôs counterparts, namely, inla.spde.make.() inla.make.index(). now create model object. Finally, create formula fit. extremely important forget replicate argument building formula inla() function produce warning might fit meaningless model. can get summary: summary user‚Äôs scale:","code":"Abar.rep <- rspde.make.A(   mesh = mesh_2d, loc = loc_2d_mesh, index = rep(1:m, times = n.rep),   repl = rep(1:n.rep, each = m) ) mesh.index.rep <- rspde.make.index(   name = \"field\", mesh = mesh_2d,   n.repl = n.rep )  st.dat.rep <- inla.stack(   data = list(y = y),   A = Abar.rep,   effects = mesh.index.rep ) rspde_model.rep <- rspde.matern(mesh = mesh_2d, parameterization = \"spde\") f.rep <-   y ~ -1 + f(field,     model = rspde_model.rep,     replicate = field.repl   ) rspde_fit.rep <-   inla(f.rep,     data = inla.stack.data(st.dat.rep),     family = \"gaussian\",     control.predictor =       list(A = inla.stack.A(st.dat.rep))   ) summary(rspde_fit.rep) ## Time used: ##     Pre = 0.226, Running = 25.9, Post = 1.78, Total = 27.9  ## Random effects: ##   Name     Model ##     field CGeneric ##  ## Model hyperparameters: ##                                           mean    sd 0.025quant 0.5quant ## Precision for the Gaussian observations 89.184 4.220      81.13   89.095 ## Theta1 for field                        -3.087 0.442      -4.00   -3.071 ## Theta2 for field                         3.066 0.071       2.93    3.064 ## Theta3 for field                        -0.658 0.256      -1.13   -0.667 ##                                         0.975quant   mode ## Precision for the Gaussian observations     97.743 88.944 ## Theta1 for field                            -2.266 -3.000 ## Theta2 for field                             3.212  3.054 ## Theta3 for field                            -0.128 -0.708 ##  ## Marginal log-Likelihood:  -4477.60  ##  is computed  ## Posterior summaries for the linear predictor and the fitted values are computed ## (Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)') result_fit_rep <- rspde.result(rspde_fit.rep, \"field\", rspde_model.rep) summary(result_fit_rep) ##             mean        sd 0.025quant   0.5quant 0.975quant       mode ## tau    0.0501379 0.0219397  0.0184374  0.0465781   0.103048  0.0392182 ## kappa 21.5086000 1.5257700 18.8061000 21.3975000  24.786700 21.1028000 ## nu     0.6865570 0.1141600  0.4883110  0.6769930   0.933506  0.6511730 result_df <- data.frame(   parameter = c(\"tau\", \"kappa\", \"nu\"),   true = c(tau, kappa, nu),   mean = c(     result_fit_rep$summary.tau$mean,     result_fit_rep$summary.kappa$mean,     result_fit_rep$summary.nu$mean   ),   mode = c(     result_fit_rep$summary.tau$mode,     result_fit_rep$summary.kappa$mode,     result_fit_rep$summary.nu$mode   ) ) print(result_df) ##   parameter        true        mean        mode ## 1       tau  0.08920621  0.05013785  0.03921817 ## 2     kappa 20.00000000 21.50856685 21.10278469 ## 3        nu  0.50000000  0.68655700  0.65117277"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inla.html","id":"an-example-with-a-non-stationary-model","dir":"Articles","previous_headings":"","what":"An example with a non-stationary model","title":"R-INLA implementation of the rational SPDE approach","text":"also possible consider models œÉ\\sigma (std. deviation) œÅ\\rho (range parameter) non-stationary. One can also use parameterization terms SPDE parameters Œ∫\\kappa œÑ\\tau. example model given vignette inlabru implementation rational SPDE approach.","code":""},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inla.html","id":"further-options-of-the-rspde-inla-implementation","dir":"Articles","previous_headings":"","what":"Further options of the rSPDE-INLA implementation","title":"R-INLA implementation of the rational SPDE approach","text":"now discuss arguments introduced R-INLA implementation rational approximation present R-INLA‚Äôs standard SPDE implementation. case provide illustrative example.","code":""},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inla.html","id":"changing-the-upper-bound-for-the-smoothness-parameter","dir":"Articles","previous_headings":"Further options of the rSPDE-INLA implementation","what":"Changing the upper bound for the smoothness parameter","title":"R-INLA implementation of the rational SPDE approach","text":"fit rspde.matern() model need provide upper bound smoothness parameter ŒΩ\\nu. reason sparsity precision matrix kept fixed R-INLA‚Äôs estimation higher value ŒΩ\\nu denser precision matrix gets. means higher value ŒΩ\\nu, higher computational cost fit model. Therefore, ideally, want choose upper bound ŒΩ\\nu small possible. change value upper bound smoothness parameter, must change argument nu.upper.bound. default value nu.upper.bound 2. common choices nu.upper.bound 1, 3 4. clear discussion smaller value nu.upper.bound faster estimation procedure . However, choose value nu.upper.bound low, ‚Äúcorrect‚Äù value ŒΩ\\nu might belong interval (0,ŒΩUB)(0,\\nu_{UB}), ŒΩUB\\nu_{UB} value nu.upper.bound. Hence, one might forced increase nu.upper.bound estimate , , obviously increase computational cost need one estimation. Let us illustrate considering model considered precipitation Paran√° region Brazil consider nu.upper.bound equal 4, generally good choice nu.upper.bound. simply use function rspde.matern() argument nu.upper.bound set 4: Since considering default rspde.order, AA matrix mesh index objects previous ones. Let us update formula fit model: Let us see summary fit: Let us compare cost previous fit, default value nu.upper.bound 2: can see fit nu.upper.bound equal 2 considerably faster. Finally, let us get result results field see estimate ŒΩ\\nu:","code":"rspde_model_2 <- rspde.matern(mesh = prmesh, nu.upper.bound = 4) f.s.2 <- y ~ -1 + Intercept + f(seaDist, model = \"rw1\") +   f(field, model = rspde_model_2)  rspde_fit_2 <- inla(f.s.2,   family = \"Gamma\", data = inla.stack.data(stk.dat),   verbose = FALSE,   control.inla = list(int.strategy = \"eb\"),   control.predictor = list(A = inla.stack.A(stk.dat), compute = TRUE) ) summary(rspde_fit_2) ## Time used: ##     Pre = 0.23, Running = 8.78, Post = 0.0446, Total = 9.05  ## Fixed effects: ##           mean    sd 0.025quant 0.5quant 0.975quant mode kld ## Intercept 1.94 0.041       1.86     1.94       2.02 1.94   0 ##  ## Random effects: ##   Name     Model ##     seaDist RW1 model ##    field CGeneric ##  ## Model hyperparameters: ##                                                    mean      sd 0.025quant ## Precision-parameter for the Gamma observations   14.695    1.04     12.695 ## Precision for seaDist                          7801.304 4580.01   2206.985 ## Theta1 for field                                 -0.905    4.19     -9.139 ## Theta2 for field                                  1.469    1.08     -0.671 ## Theta3 for field                                 -1.479    2.87     -7.142 ##                                                0.5quant 0.975quant     mode ## Precision-parameter for the Gamma observations   14.675      16.81   14.672 ## Precision for seaDist                          6749.616   19559.73 4989.986 ## Theta1 for field                                 -0.913       7.37   -0.943 ## Theta2 for field                                  1.470       3.60    1.475 ## Theta3 for field                                 -1.474       4.15   -1.453 ##  ## Marginal log-Likelihood:  -1253.33  ##  is computed  ## Posterior summaries for the linear predictor and the fitted values are computed ## (Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)') # nu.upper.bound = 2 rspde_fit$cpu.used ##        Pre    Running       Post      Total  ## 0.39941955 3.38905621 0.06348014 3.85195589 # nu.upper.bound = 4 rspde_fit_2$cpu.used ##        Pre    Running       Post      Total  ## 0.22989011 8.78025246 0.04458618 9.05472875 result_fit_2 <- rspde.result(rspde_fit_2, \"field\", rspde_model_2) summary(result_fit_2) ##            mean         sd  0.025quant 0.5quant 0.975quant        mode ## tau   559.13200 8491.10000 0.000151775 0.401326 1507.62000 4.23878e-07 ## kappa   7.72180   10.61900 0.520675000 4.349860   36.02810 1.32264e+00 ## nu      1.32033    1.34587 0.003323880 0.745843    3.93508 1.73261e-04"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inla.html","id":"changing-the-order-of-the-rational-approximation","dir":"Articles","previous_headings":"Further options of the rSPDE-INLA implementation","what":"Changing the order of the rational approximation","title":"R-INLA implementation of the rational SPDE approach","text":"change order rational approximation set argument rspde.order desired value. current available possibilities 1,2,3,‚Ä¶, 8. higher order rational approximation, accurate results , however, higher computational cost . default rspde.order 1 generally good choice, fast, reasonably accurate. See vignette Rational approximation rSPDE package details order rational approximation comparison Mat√©rn covariance. Let us fit model covariance-based rational approximation order 3. Since changing order rational approximation, , changing rspde.order argument, need recompute AA matrix mesh index. Therefore, proceed follows: build new model: create new AA matrix: create new index: Now remaining steps : Let us see summary: can see summary computational cost significantly increased. Let us compare cost rspde.order=3 cost rspde.order=1: One can check order rational approximation using rational.order() function. also allows another way change order rational order, using corresponding rational.order<-() function. rational.order() rational.order<-() functions can applied inla.rspde object, matrix index objects. check models: check matrices: check indexes: Let us now change order rspde_model object 2: Let us fit new model: summary:","code":"rspde_model_order_3 <- rspde.matern(mesh = prmesh,    rspde.order = 3 ) Abar_3 <- rspde.make.A(mesh = prmesh, loc = coords, rspde.order = 3) mesh.index.3 <- rspde.make.index(   name = \"field\", mesh = prmesh,   rspde.order = 3 ) stk.dat.3 <- inla.stack(   data = list(y = Y), A = list(Abar_3, 1), tag = \"est\",   effects = list(     c(       mesh.index.3     ),     list(       long = inla.group(coords[, 1]),       lat = inla.group(coords[, 2]),       seaDist = inla.group(seaDist),       Intercept = 1     )   ) )  f.s.3 <- y ~ -1 + Intercept + f(seaDist, model = \"rw1\") +   f(field, model = rspde_model_order_3)  rspde_fit_order_3 <- inla(f.s.3,   family = \"Gamma\", data = inla.stack.data(stk.dat.3),   verbose = FALSE,   control.inla = list(int.strategy = \"eb\"),   control.predictor = list(A = inla.stack.A(stk.dat.3), compute = TRUE) ) summary(rspde_fit_order_3) ## Time used: ##     Pre = 0.231, Running = 12.9, Post = 0.0676, Total = 13.2  ## Fixed effects: ##            mean   sd 0.025quant 0.5quant 0.975quant  mode kld ## Intercept 1.941 0.04      1.863    1.941      2.019 1.941   0 ##  ## Random effects: ##   Name     Model ##     seaDist RW1 model ##    field CGeneric ##  ## Model hyperparameters: ##                                                   mean       sd 0.025quant ## Precision-parameter for the Gamma observations   14.73    1.051      12.78 ## Precision for seaDist                          7358.09 4066.510    2308.71 ## Theta1 for field                                 -4.65    3.527     -12.88 ## Theta2 for field                                  2.23    0.786       1.05 ## Theta3 for field                                  2.41    2.750      -1.56 ##                                                0.5quant 0.975quant     mode ## Precision-parameter for the Gamma observations    14.69   1.69e+01   14.609 ## Precision for seaDist                           6445.21   1.78e+04 4934.414 ## Theta1 for field                                  -4.15   4.31e-01   -1.632 ## Theta2 for field                                   2.13   4.04e+00    1.619 ## Theta3 for field                                   2.02   8.83e+00    0.075 ##  ## Marginal log-Likelihood:  -1253.60  ##  is computed  ## Posterior summaries for the linear predictor and the fitted values are computed ## (Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)') # order = 1 rspde_fit$cpu.used ##        Pre    Running       Post      Total  ## 0.39941955 3.38905621 0.06348014 3.85195589 # order = 3 rspde_fit_order_3$cpu.used ##         Pre     Running        Post       Total  ##  0.23097110 12.88786459  0.06758237 13.18641806 rational.order(rspde_model) ## [1] 1 rational.order(rspde_model_order_3) ## [1] 3 rational.order(Abar) ## [1] 1 rational.order(Abar_3) ## [1] 3 rational.order(mesh.index) ## [1] 1 rational.order(mesh.index.3) ## [1] 3 rational.order(rspde_model) <- 2 rational.order(Abar) <- 2 rational.order(mesh.index) <- 2 f.s.2 <- y ~ -1 + Intercept + f(seaDist, model = \"rw1\") +   f(field, model = rspde_model)  stk.dat.2 <- inla.stack(   data = list(y = Y), A = list(Abar, 1), tag = \"est\",   effects = list(     c(       mesh.index     ),     list(       long = inla.group(coords[, 1]),       lat = inla.group(coords[, 2]),       seaDist = inla.group(seaDist),       Intercept = 1     )   ) )  rspde_fit_order_2 <- inla(f.s.2,   family = \"Gamma\", data = inla.stack.data(stk.dat.2),   verbose = FALSE,   control.inla = list(int.strategy = \"eb\"),   control.predictor = list(A = inla.stack.A(stk.dat.2), compute = TRUE) ) summary(rspde_fit_order_2) ## Time used: ##     Pre = 0.23, Running = 5.86, Post = 0.0514, Total = 6.14  ## Fixed effects: ##            mean    sd 0.025quant 0.5quant 0.975quant  mode kld ## Intercept 1.941 0.039      1.864    1.941      2.017 1.941   0 ##  ## Random effects: ##   Name     Model ##     seaDist RW1 model ##    field CGeneric ##  ## Model hyperparameters: ##                                                   mean       sd 0.025quant ## Precision-parameter for the Gamma observations   14.72    1.050      12.74 ## Precision for seaDist                          7680.05 4343.571    2619.07 ## Theta1 for field                                 -3.15    1.931      -7.61 ## Theta2 for field                                  1.85    0.388       1.21 ## Theta3 for field                                  1.23    1.515      -1.05 ##                                                0.5quant 0.975quant     mode ## Precision-parameter for the Gamma observations    14.70     16.875   14.651 ## Precision for seaDist                           6630.88  19045.619 5034.349 ## Theta1 for field                                  -2.89     -0.255   -1.621 ## Theta2 for field                                   1.81      2.709    1.643 ## Theta3 for field                                   1.04      4.726    0.051 ##  ## Marginal log-Likelihood:  -1254.25  ##  is computed  ## Posterior summaries for the linear predictor and the fitted values are computed ## (Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)')"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inla.html","id":"estimating-models-with-fixed-smoothness","dir":"Articles","previous_headings":"Further options of the rSPDE-INLA implementation","what":"Estimating models with fixed smoothness","title":"R-INLA implementation of the rational SPDE approach","text":"can fix smoothness, say ŒΩ\\nu, model providing non-NULL positive value nu. smoothness, ŒΩ\\nu, fixed, can two possibilities: Œ±=ŒΩ+d/2\\alpha = \\nu + d/2 integer; Œ±=ŒΩ+d/2\\alpha = \\nu + d/2 integer. first case, .e., Œ±\\alpha integer, less computational cost. Furthermore, AA matrix different AA matrix non-integer Œ±\\alpha. AA matrix values ŒΩ\\nu Œ±\\alpha integer. , AA matrix cases need computed . holds index obtained rspde.make.index() function. second case AA matrix depends order rational approximation ŒΩ\\nu. Therefore, matrix AA already computed rspde.order, AA matrix values ŒΩ\\nu Œ±\\alpha non-integer rspde.order. holds index obtained rspde.make.index() function. ŒΩ\\nu fixed, parameters returned R-INLA $$\\kappa = \\exp(\\theta_1)\\quad\\hbox{}\\quad\\tau = \\exp(\\theta_2).$$ now provide illustrations scenarios. also noteworthy just case estimate ŒΩ\\nu, can also change order rational approximation changing value rspde.order. illustrations fixed ŒΩ\\nu , consider order rational approximation 1, , default order.","code":""},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inla.html","id":"estimating-models-with-fixed-smoothness-and-non-integer-alpha","dir":"Articles","previous_headings":"Further options of the rSPDE-INLA implementation > Estimating models with fixed smoothness","what":"Estimating models with fixed smoothness and non-integer Œ±\\alpha","title":"R-INLA implementation of the rational SPDE approach","text":"Recall : ŒΩ=ŒΩUB(exp(Œ∏3)1+exp(Œ∏3)).\\nu = \\nu_{UB}\\Big(\\frac{\\exp(\\theta_3)}{1+\\exp(\\theta_3)}\\Big). Thus, illustrate, let us consider fixed ŒΩ\\nu given mean ŒΩ\\nu obtained first model considered vignette, namely, fit given rspde_fit, approximately ŒΩ=1.21\\nu = 1.21. Notice ŒΩ\\nu, value Œ±\\alpha non-integer, can use AA matrix index first fitted model, also order 2. Therefore, build new model set nu 1.21: Let us now fit model: summary: Now, summary original scale:","code":"rspde_model_fix <- rspde.matern(mesh = prmesh, nu = 1.21) f.s.fix <- y ~ -1 + Intercept + f(seaDist, model = \"rw1\") +   f(field, model = rspde_model_fix)  rspde_fix <- inla(f.s.fix,   family = \"Gamma\", data = inla.stack.data(stk.dat),   verbose = FALSE,   control.inla = list(int.strategy = \"eb\"),   control.predictor = list(A = inla.stack.A(stk.dat), compute = TRUE) ) summary(rspde_fix) ## Time used: ##     Pre = 0.257, Running = 2.55, Post = 0.045, Total = 2.86  ## Fixed effects: ##           mean    sd 0.025quant 0.5quant 0.975quant mode kld ## Intercept 1.94 0.039      1.865     1.94      2.016 1.94   0 ##  ## Random effects: ##   Name     Model ##     seaDist RW1 model ##    field CGeneric ##  ## Model hyperparameters: ##                                                   mean       sd 0.025quant ## Precision-parameter for the Gamma observations   14.70    1.052      12.74 ## Precision for seaDist                          7654.81 4301.417    2375.56 ## Theta1 for field                                 -2.06    0.353      -2.76 ## Theta2 for field                                  1.71    0.256       1.21 ##                                                0.5quant 0.975quant    mode ## Precision-parameter for the Gamma observations    14.67      16.88   14.60 ## Precision for seaDist                           6674.21   18714.12 5072.23 ## Theta1 for field                                  -2.06      -1.37   -2.07 ## Theta2 for field                                   1.71       2.22    1.72 ##  ## Marginal log-Likelihood:  -1255.04  ##  is computed  ## Posterior summaries for the linear predictor and the fitted values are computed ## (Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)') result_fix <- rspde.result(rspde_fix, \"field\", rspde_model_fix) summary(result_fix) ##          mean        sd 0.025quant 0.5quant 0.975quant     mode ## tau   0.13495 0.0486757  0.0637749 0.126856   0.252829 0.111986 ## kappa 5.73376 1.4791800  3.3668300 5.552240   9.142970 5.209940"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inla.html","id":"estimating-models-with-fixed-smoothness-and-integer-alpha","dir":"Articles","previous_headings":"Further options of the rSPDE-INLA implementation > Estimating models with fixed smoothness","what":"Estimating models with fixed smoothness and integer Œ±\\alpha","title":"R-INLA implementation of the rational SPDE approach","text":"Since dimension d=2d=2, ŒΩ>0\\nu>0, smallest value ŒΩ\\nu makes Œ±=ŒΩ+1\\alpha = \\nu + 1 integer ŒΩ=1\\nu=1. value also close estimated mean first model fitted enclosed posterior marginal density ŒΩ\\nu first fit. Therefore, let us fit model ŒΩ=1\\nu=1. end need compute new AA matrix: new index: create new model (remember set nu=1): remaining standard: Let us check summary: check summary user‚Äôs scale:","code":"Abar.int <- rspde.make.A(   mesh = prmesh, loc = coords,   nu = 1 ) mesh.index.int <- rspde.make.index(   name = \"field\", mesh = prmesh,   nu = 1 ) rspde_model_fix_int1 <- rspde.matern(mesh = prmesh,   nu = 1) stk.dat.int <- inla.stack(   data = list(y = Y), A = list(Abar.int, 1), tag = \"est\",   effects = list(     c(       mesh.index.int     ),     list(       long = inla.group(coords[, 1]),       lat = inla.group(coords[, 2]),       seaDist = inla.group(seaDist),       Intercept = 1     )   ) )  f.s.fix.int.1 <- y ~ -1 + Intercept + f(seaDist, model = \"rw1\") +   f(field, model = rspde_model_fix_int1)  rspde_fix_int_1 <- inla(f.s.fix.int.1,   family = \"Gamma\",   data = inla.stack.data(stk.dat.int), verbose = FALSE,   control.inla = list(int.strategy = \"eb\"),   control.predictor = list(     A = inla.stack.A(stk.dat.int),     compute = TRUE   ) ) summary(rspde_fix_int_1) ## Time used: ##     Pre = 0.226, Running = 0.913, Post = 0.0294, Total = 1.17  ## Fixed effects: ##            mean   sd 0.025quant 0.5quant 0.975quant  mode kld ## Intercept 1.941 0.04      1.862    1.941      2.019 1.941   0 ##  ## Random effects: ##   Name     Model ##     seaDist RW1 model ##    field CGeneric ##  ## Model hyperparameters: ##                                                   mean       sd 0.025quant ## Precision-parameter for the Gamma observations   14.68    1.052      12.72 ## Precision for seaDist                          7764.46 4434.227    2369.88 ## Theta1 for field                                 -1.52    0.327      -2.17 ## Theta2 for field                                  1.60    0.282       1.05 ##                                                0.5quant 0.975quant    mode ## Precision-parameter for the Gamma observations    14.64      16.86   14.56 ## Precision for seaDist                           6742.06   19191.44 5084.53 ## Theta1 for field                                  -1.51      -0.88   -1.50 ## Theta2 for field                                   1.60       2.16    1.59 ##  ## Marginal log-Likelihood:  -1254.80  ##  is computed  ## Posterior summaries for the linear predictor and the fitted values are computed ## (Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)') rspde_result_int <- rspde.result(rspde_fix_int_1, \"field\", rspde_model_fix_int1) summary(rspde_result_int) ##           mean        sd 0.025quant 0.5quant 0.975quant     mode ## tau   0.231284 0.0764668   0.114952 0.220149   0.412519 0.198575 ## kappa 5.155660 1.4820300   2.873280 4.942640   8.652650 4.530470"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inla.html","id":"changing-the-priors","dir":"Articles","previous_headings":"Further options of the rSPDE-INLA implementation","what":"Changing the priors","title":"R-INLA implementation of the rational SPDE approach","text":"begin recalling fitted rSPDE model R-INLA contains parameters Theta1\\textrm{Theta1}, Theta2\\textrm{Theta2} Theta3\\textrm{Theta3}. Let, , Œ∏1=Theta1\\theta_1 = \\textrm{Theta1}, Œ∏2=Theta2\\theta_2=\\textrm{Theta2} Œ∏3=Theta3\\theta_3=\\textrm{Theta3}. terms SPDE (Œ∫2I‚àíŒî)Œ±/2(œÑu)=ùí≤,(\\kappa^2 - \\Delta)^{\\alpha/2}(\\tau u) = \\mathcal{W}, Œ±=ŒΩ+d/2\\alpha = \\nu + d/2. also range parameter œÅ=8ŒΩŒ∫\\rho = \\frac{\\sqrt{8\\nu}}{\\kappa} standard deviation œÉ=Œì(ŒΩ)œÑ2Œ∫2ŒΩ(4œÄ)d/2Œì(ŒΩ+d/2)\\sigma = \\sqrt{\\frac{\\Gamma(\\nu)}{\\tau^2 \\kappa^{2\\nu}(4\\pi)^{d/2}\\Gamma(\\nu + d/2)}}.","code":""},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inla.html","id":"changing-the-priors-of-tau-and-kappa","dir":"Articles","previous_headings":"Further options of the rSPDE-INLA implementation > Changing the priors","what":"Changing the priors of œÑ\\tau and Œ∫\\kappa","title":"R-INLA implementation of the rational SPDE approach","text":"begin dealing œÑ\\tau Œ∫\\kappa. œÑ=exp(Œ∏1),Œ∫=exp(Œ∏2).\\tau = \\exp(\\theta_1),\\quad \\kappa = \\exp(\\theta_2). rspde.matern() function assumes lognormal prior distribution œÑ\\tau Œ∫\\kappa. prior distribution obtained assuming Œ∏1\\theta_1 Œ∏2\\theta_2 follow normal distributions. default assume Œ∏1\\theta_1 Œ∏2\\theta_2 independent follow normal distributions Œ∏1‚àºN(log(œÑ0),10)\\theta_1\\sim N(\\log(\\tau_0), 10) Œ∏2‚àºN(log(Œ∫0),10)\\theta_2\\sim N(\\log(\\kappa_0), 10). Œ∫0\\kappa_0 suitably defined terms mesh œÑ0\\tau_0 defined terms Œ∫0\\kappa_0 prior smoothness parameter. one wants define prior Œ∏1‚àºN(mean_theta_1,sd_theta_1),\\theta_1 \\sim N(\\text{mean_theta_1}, \\text{sd_theta_1}), one can simply set argument prior.tau = list(meanlog=mean_theta_1, sdlog=sd_theta_1). Analogously, define prior Œ∏2‚àºN(mean_theta_2,sd_theta_2),\\theta_2 \\sim N(\\text{mean_theta_2}, \\text{sd_theta_2}), one can set argument prior.kappa = list(meanlog=mean_theta_2, sdlog=sd_theta_2). important mention , default, initial values œÑ\\tau Œ∫\\kappa exp(mean_theta_1)\\exp(\\text{mean_theta_1}) exp(mean_theta_2)\\exp(\\text{mean_theta_2}), respectively. , user change parameters, also change initial values, initial values œÑ\\tau Œ∫\\kappa , respectively, œÑ0\\tau_0 Œ∫0\\kappa_0. one sets prior.tau = list(meanlog=mean_theta_1), prior Œ∏1\\theta_1 Œ∏1‚àºN(mean_theta_1,1),\\theta_1 \\sim N(\\text{mean_theta_1}, 1), whereas, one sets, prior.tau = list(sdlog=sd_theta_1), prior Œ∏1‚àºN(log(œÑ0),sd_theta_1).\\theta_1 \\sim N(\\log(\\tau_0), \\text{sd_theta_1}). Analogously, one sets prior.kappa = list(meanlog=mean_theta_2), prior Œ∏2\\theta_2 Œ∏2‚àºN(mean_theta_2,1),\\theta_2 \\sim N(\\text{mean_theta_2}, 1), whereas, one sets, prior.kappa = list(sdlog=sd_theta_2), prior Œ∏2‚àºN(log(Œ∫0),sd_theta_2).\\theta_2 \\sim N(\\log(\\kappa_0), \\text{sd_theta_2}).","code":""},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inla.html","id":"changing-the-priors-of-rho-range-and-sigma-std--dev-","dir":"Articles","previous_headings":"Further options of the rSPDE-INLA implementation > Changing the priors","what":"Changing the priors of œÅ\\rho (range) and œÉ\\sigma (std. dev.)","title":"R-INLA implementation of the rational SPDE approach","text":"Let us now consider priors range, œÅ\\rho, std. deviation, œÉ\\sigma. parameterization used argument parameterization = \"matern\", default. case, œÉ=exp(Œ∏1),œÅ=exp(Œ∏2).\\sigma = \\exp(\\theta_1),\\quad \\rho = \\exp(\\theta_2). two options prior. default, option prior.theta.param = \"theta\", rspde.matern() function assumes lognormal prior distribution œÉ\\sigma œÅ\\rho. prior distribution obtained assuming Œ∏1\\theta_1 Œ∏2\\theta_2 follow normal distributions. default assume Œ∏1\\theta_1 Œ∏2\\theta_2 independent follow normal distributions Œ∏1‚àºN(log(œÉ0),10)\\theta_1\\sim N(\\log(\\sigma_0), 10) Œ∏2‚àºN(log(œÅ0),10)\\theta_2\\sim N(\\log(\\rho_0), 10). œÅ0\\rho_0 suitably defined terms mesh œÉ0\\sigma_0 defined terms œÅ0\\rho_0 prior smoothness parameter. Similarly priors œÑ\\tau Œ∫\\kappa, one wants define prior Œ∏1‚àºN(mean_theta_1,sd_theta_1),\\theta_1 \\sim N(\\text{mean_theta_1}, \\text{sd_theta_1}), one can simply set argument prior.tau = list(meanlog=mean_theta_1, sdlog=sd_theta_1). Analogously, define prior Œ∏2‚àºN(mean_theta_2,sd_theta_2),\\theta_2 \\sim N(\\text{mean_theta_2}, \\text{sd_theta_2}), one can set argument prior.kappa = list(meanlog=mean_theta_2, sdlog=sd_theta_2). Another option set prior.theta.param = \"spde\". case, change variables performed. , assume lognormal prior œÑ\\tau Œ∫\\kappa. , relations œÅ=8ŒΩŒ∫\\rho = \\frac{\\sqrt{8\\nu}}{\\kappa} œÉ=Œì(ŒΩ)œÑ2Œ∫2ŒΩ(4œÄ)d/2Œì(ŒΩ+d/2)\\sigma = \\sqrt{\\frac{\\Gamma(\\nu)}{\\tau^2 \\kappa^{2\\nu}(4\\pi)^{d/2}\\Gamma(\\nu + d/2)}}, obtain prior œÅ\\rho œÉ\\sigma.","code":""},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inla.html","id":"changing-the-prior-of-nu","dir":"Articles","previous_headings":"Further options of the rSPDE-INLA implementation > Changing the priors","what":"Changing the prior of ŒΩ\\nu","title":"R-INLA implementation of the rational SPDE approach","text":"Finally, let us consider smoothness parameter ŒΩ\\nu. default, assume ŒΩ\\nu follows beta distribution interval (0,ŒΩUB)(0,\\nu_{UB}), ŒΩUB\\nu_{UB} upper bound ŒΩ\\nu, mean ŒΩ0=min{1,ŒΩUB/2}\\nu_0=\\min\\{1, \\nu_{UB}/2\\} variance ŒΩ0(ŒΩUB‚àíŒΩ0)1+œï0\\frac{\\nu_0(\\nu_{UB}-\\nu_0)}{1+\\phi_0}, call œï0\\phi_0 precision parameter, whose default value œï0=max{ŒΩUBŒΩ0,ŒΩUBŒΩUB‚àíŒΩ0}+œïinc.\\phi_0 = \\max\\Big\\{\\frac{\\nu_{UB}}{\\nu_0}, \\frac{\\nu_{UB}}{\\nu_{UB}-\\nu_0}\\Big\\} + \\phi_{inc}. parameter œïinc\\phi_{inc} increment ensure prior beta density boundary values equal zero (boundary values defined either continuity limits). default value œïinc\\phi_{inc} 1. value œïinc\\phi_{inc} can changed changing argument nu.prec.inc rspde.matern() function. higher value œïinc\\phi_{inc} (, value nu.prec.inc) informative prior distribution becomes. Let us denote beta distribution support (0,ŒΩUB)(0,\\nu_{UB}), mean Œº\\mu precision parameter œï\\phi ‚Ñ¨ŒΩUB(Œº,œï)\\mathcal{B}_{\\nu_{UB}}(\\mu,\\phi). want ŒΩ\\nu prior ŒΩ‚àº‚Ñ¨ŒΩUB(nu_1,prec_1),\\nu \\sim \\mathcal{B}_{\\nu_{UB}}(\\text{nu_1},\\text{prec_1}), one simply needs set prior.nu = list(mean=nu_1, prec=prec_1). one sets prior.nu = list(mean=nu_1), ŒΩ\\nu prior ŒΩ‚àº‚Ñ¨ŒΩUB(nu_1,œï1),\\nu \\sim \\mathcal{B}_{\\nu_{UB}}(\\text{nu_1},\\phi_1), œï1=max{ŒΩUBnu_1,ŒΩUBŒΩUB‚àínu_1}+nu.prec.inc.\\phi_1 = \\max\\Big\\{\\frac{\\nu_{UB}}{\\text{nu_1}}, \\frac{\\nu_{UB}}{\\nu_{UB}-\\text{nu_1}}\\Big\\} + \\text{nu.prec.inc}. one sets prior.nu = list(prec=prec_1), ŒΩ\\nu prior ŒΩ‚àº‚Ñ¨ŒΩUB(ŒΩ0,prec_1).\\nu\\sim \\mathcal{B}_{\\nu_{UB}}(\\nu_0, \\text{prec_1}). also noteworthy , terms R-INLA‚Äôs parameters, ŒΩ=ŒΩUB(exp(Œ∏3)1+exp(Œ∏3)).\\nu = \\nu_{UB}\\Big(\\frac{\\exp(\\theta_3)}{1+\\exp(\\theta_3)}\\Big). important mention , default, beta prior distribution chosen smoothness parameter ŒΩ\\nu, initial value ŒΩ\\nu mean prior beta distribution. , user change parameter, also change initial value, initial value ŒΩ\\nu min{1,ŒΩUB/2}\\min\\{1,\\nu_{UB}/2\\}. also assume , terms R-INLA‚Äôs parameters, ŒΩ=ŒΩUB(exp(Œ∏3)1+exp(Œ∏3)).\\nu = \\nu_{UB}\\Big(\\frac{\\exp(\\theta_3)}{1+\\exp(\\theta_3)}\\Big). can another possibility prior distribution ŒΩ\\nu, namely, truncated lognormal distribution. truncated lognormal distribution defined following sense. assume log(ŒΩ)\\log(\\nu) prior distribution given truncated normal distribution support (‚àí‚àû,log(ŒΩUB))(-\\infty,\\log(\\nu_{UB})), ŒΩUB\\nu_{UB} upper bound ŒΩ\\nu, location parameter Œº0=log(ŒΩ0)=log(min{1,ŒΩUB/2})\\mu_0 =\\log(\\nu_0)= \\log\\Big(\\min\\{1,\\nu_{UB}/2\\}\\Big) scale parameter œÉ0=1\\sigma_0 = 1. precisely, let Œ¶(‚ãÖ;Œº,œÉ)\\Phi(\\cdot; \\mu,\\sigma) stand cumulative distribution function (CDF) normal distribution mean Œº\\mu standard deviation œÉ\\sigma. , log(ŒΩ)\\log(\\nu) cumulative distribution function given Flog(ŒΩ)(x)=Œ¶(x;Œº0,œÉ0)Œ¶(ŒΩUB),x‚â§ŒΩUB,F_{\\log(\\nu)}(x) = \\frac{\\Phi(x;\\mu_0,\\sigma_0)}{\\Phi(\\nu_{UB})},\\quad x\\leq \\nu_{UB}, Flog(ŒΩ)(x)=1F_{\\log(\\nu)}(x) = 1 x>ŒΩUBx>\\nu_{UB}. call Œº0\\mu_0 œÉ0\\sigma_0 log-location log-scale parameters ŒΩ\\nu, respectively, say log(ŒΩ)\\log(\\nu) follows truncated normal distribution location parameter Œº0\\mu_0 scale parameter œÉ0\\sigma_0. change prior distribution ŒΩ\\nu truncated lognormal distribution, need set argument prior.nu.dist=\"lognormal\". change parameters prior distribution , say, log_nu_1 log_sigma_1, one can simply set prior.nu = list(loglocation=log_nu_1, logscale=sigma_1). one sets prior.nu = list(loglocation=log_nu_1), prior Œ∏3\\theta_3 truncated normal normal distribution location parameter log_nu_1 scale parameter 1. Analogously, one sets, prior.nu = list(logscale=sigma_1), prior Œ∏3\\theta_3 truncated normal distribution location parameter log(ŒΩ0)=log(min{1,ŒΩUB/2})\\log(\\nu_0)= \\log\\Big(\\min\\{1,\\nu_{UB}/2\\}\\Big) scale parameter sigma_1. important mention , default, truncated lognormal prior distribution chosen smoothness parameter ŒΩ\\nu, initial value ŒΩ\\nu exponential log-location parameter ŒΩ\\nu. , user change parameter, also change initial value, initial value ŒΩ\\nu min{1,ŒΩUB/2}\\min\\{1,\\nu_{UB}/2\\}. Let us consider example dataset used first model vignette change prior distribution ŒΩ\\nu beta lognormal. Since change rspde.order fixing ŒΩ\\nu, can use AA matrix index first example. Therefore, update formula fit model: summary: Also, can summary user‚Äôs scale: plot posterior marginal densities","code":"rspde_model_beta <- rspde.matern(mesh = prmesh, prior.nu.dist = \"lognormal\") f.s.beta <- y ~ -1 + Intercept + f(seaDist, model = \"rw1\") +   f(field, model = rspde_model_beta)  rspde_fit_beta <- inla(f.s.beta,   family = \"Gamma\", data = inla.stack.data(stk.dat),   verbose = FALSE,   control.inla = list(int.strategy = \"eb\"),   control.predictor = list(A = inla.stack.A(stk.dat), compute = TRUE) ) summary(rspde_fit_beta) ## Time used: ##     Pre = 0.227, Running = 3.03, Post = 0.0407, Total = 3.3  ## Fixed effects: ##            mean   sd 0.025quant 0.5quant 0.975quant  mode kld ## Intercept 1.941 0.04      1.862    1.941      2.019 1.941   0 ##  ## Random effects: ##   Name     Model ##     seaDist RW1 model ##    field CGeneric ##  ## Model hyperparameters: ##                                                    mean       sd 0.025quant ## Precision-parameter for the Gamma observations   14.686    1.050      12.72 ## Precision for seaDist                          7786.356 4535.782    2365.35 ## Theta1 for field                                 -2.100    1.364      -5.15 ## Theta2 for field                                  1.678    0.361       1.03 ## Theta3 for field                                  0.461    1.125      -1.38 ##                                                0.5quant 0.975quant    mode ## Precision-parameter for the Gamma observations   14.650   1.69e+01   14.58 ## Precision for seaDist                          6717.592   1.95e+04 5025.49 ## Theta1 for field                                 -1.968   1.18e-01   -1.32 ## Theta2 for field                                  1.659   2.45e+00    1.56 ## Theta3 for field                                  0.355   2.97e+00   -0.17 ##  ## Marginal log-Likelihood:  -1254.50  ##  is computed  ## Posterior summaries for the linear predictor and the fitted values are computed ## (Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)') result_fit_beta <- rspde.result(rspde_fit_beta, \"field\", rspde_model_beta) summary(result_fit_beta) ##           mean       sd 0.025quant 0.5quant 0.975quant       mode ## tau   0.253211 0.314348  0.0060024 0.145142    1.11590 0.00942731 ## kappa 5.720180 2.242700  2.8242400 5.213320   11.46120 4.35115000 ## nu    1.166220 0.429465  0.4057390 1.160400    1.89972 0.86794200 posterior_df_fit_beta <- gg_df(result_fit_beta)  ggplot(posterior_df_fit_beta) + geom_line(aes(x = x, y = y)) +  facet_wrap(~parameter, scales = \"free\") + labs(y = \"Density\")"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inla.html","id":"changing-the-starting-values","dir":"Articles","previous_headings":"Further options of the rSPDE-INLA implementation","what":"Changing the starting values","title":"R-INLA implementation of the rational SPDE approach","text":"starting values used R-INLA‚Äôs optimization algorithm can changed setting arguments start.ltau, start.lkappa start.nu. start.ltau initial value log(œÑ)\\log(\\tau), , logarithm œÑ\\tau. start.lkappa inital value log(Œ∫)\\log(\\kappa), , logarithm Œ∫\\kappa. start.nu initial value ŒΩ\\nu. Notice initial value log scale. One can change initial value one parameters. instance, let us consider example precipitation data, rspde.order=3, change initial values ones close fitted value considering default rspde.order (1): Since already computed AA matrix index rspde.order=3, update formula fit: summary:","code":"rspde_model_order_3_start <- rspde.matern(mesh = prmesh, rspde.order = 3,   nu.upper.bound = 2,   start.lkappa = result_fit$summary.log.kappa$mean,   start.ltau = result_fit$summary.log.tau$mean,   start.nu = min(result_fit$summary.nu$mean, 2 - 1e-5) ) f.s.3.start <- y ~ -1 + Intercept + f(seaDist, model = \"rw1\") +   f(field, model = rspde_model_order_3_start)  rspde_fit_order_3_start <- inla(f.s.3.start,   family = \"Gamma\",   data = inla.stack.data(stk.dat.3),   verbose = FALSE,   control.inla = list(int.strategy = \"eb\"),   control.predictor = list(     A = inla.stack.A(stk.dat.3),     compute = TRUE   ) ) summary(rspde_fit_order_3_start) ## Time used: ##     Pre = 0.242, Running = 12.9, Post = 0.0628, Total = 13.2  ## Fixed effects: ##            mean   sd 0.025quant 0.5quant 0.975quant  mode kld ## Intercept 1.941 0.04      1.863    1.941      2.019 1.941   0 ##  ## Random effects: ##   Name     Model ##     seaDist RW1 model ##    field CGeneric ##  ## Model hyperparameters: ##                                                   mean       sd 0.025quant ## Precision-parameter for the Gamma observations   14.70    1.048      12.74 ## Precision for seaDist                          7642.15 4290.415    2388.37 ## Theta1 for field                                 -3.35    2.234      -8.48 ## Theta2 for field                                  1.91    0.473       1.14 ## Theta3 for field                                  1.40    1.739      -1.27 ##                                                0.5quant 0.975quant     mode ## Precision-parameter for the Gamma observations    14.66   1.69e+01   14.594 ## Precision for seaDist                           6661.09   1.87e+04 5066.818 ## Theta1 for field                                  -3.07   6.40e-02   -1.647 ## Theta2 for field                                   1.86   2.97e+00    1.638 ## Theta3 for field                                   1.19   5.39e+00    0.089 ##  ## Marginal log-Likelihood:  -1254.03  ##  is computed  ## Posterior summaries for the linear predictor and the fitted values are computed ## (Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)')"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inla.html","id":"changing-the-type-of-the-rational-approximation","dir":"Articles","previous_headings":"Further options of the rSPDE-INLA implementation","what":"Changing the type of the rational approximation","title":"R-INLA implementation of the rational SPDE approach","text":"three rational approximations available. BRASIL algorithm Hofreither (2021), two ‚Äúversions‚Äù Clenshaw-Lord Chebyshev-Pade algorithm, one lower bound zero another lower bound given Bolin, Simas, Xiong (2023). type rational approximation can chosen setting type.rational.approx argument rspde.matern function. BRASIL algorithm corresponds choice brasil, Clenshaw-Lord Chebyshev pade zero lower bound non-zero lower bounds given, respectively, choices chebfun chebfunLB. Let us fit model assigning brasil rational approximation. consider model order rational approximation 1: Let us get summary: Finally, similarly order rational approximation, one can check order rational.type() function, assign new type rational.type<-() function. Let us change type rational approximation model rational approximation order 3: Let us get summary:","code":"rspde_model_brasil <- rspde.matern(prmesh,                type.rational.approx = \"brasil\")  f.s.brasil <- y ~ -1 + Intercept + f(seaDist, model = \"rw1\") +   f(field, model = rspde_model_brasil)  rspde_fit_order_1_brasil <- inla(f.s.brasil,   family = \"Gamma\", data = inla.stack.data(stk.dat),   verbose = FALSE,   control.inla = list(int.strategy = \"eb\"),   control.predictor = list(A = inla.stack.A(stk.dat), compute = TRUE) ) summary(rspde_fit_order_1_brasil) ## Time used: ##     Pre = 0.237, Running = 5, Post = 0.0419, Total = 5.28  ## Fixed effects: ##            mean   sd 0.025quant 0.5quant 0.975quant  mode kld ## Intercept 1.941 0.04      1.862    1.941      2.019 1.941   0 ##  ## Random effects: ##   Name     Model ##     seaDist RW1 model ##    field CGeneric ##  ## Model hyperparameters: ##                                                   mean       sd 0.025quant ## Precision-parameter for the Gamma observations   14.69    1.050      12.71 ## Precision for seaDist                          7794.48 4645.474    2334.11 ## Theta1 for field                                 -2.95    2.000      -7.59 ## Theta2 for field                                  1.80    0.424       1.11 ## Theta3 for field                                  1.16    1.641      -1.28 ##                                                0.5quant 0.975quant     mode ## Precision-parameter for the Gamma observations   14.655   1.68e+01   14.602 ## Precision for seaDist                          6679.053   1.99e+04 4946.547 ## Theta1 for field                                 -2.683   1.10e-02   -1.331 ## Theta2 for field                                  1.763   2.75e+00    1.560 ## Theta3 for field                                  0.939   4.96e+00   -0.159 ##  ## Marginal log-Likelihood:  -1254.06  ##  is computed  ## Posterior summaries for the linear predictor and the fitted values are computed ## (Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)') rational.type(rspde_model) ## [1] \"chebfun\" rational.type(rspde_model_brasil) ## [1] \"brasil\" rational.type(rspde_model_order_3) <- \"brasil\"  f.s.3 <- y ~ -1 + Intercept + f(seaDist, model = \"rw1\") +   f(field, model = rspde_model_order_3)  rspde_fit_order_3_brasil <- inla(f.s.3,   family = \"Gamma\", data = inla.stack.data(stk.dat.3),   verbose = FALSE,   control.inla = list(int.strategy = \"eb\"),   control.predictor = list(A = inla.stack.A(stk.dat.3), compute = TRUE) ) summary(rspde_fit_order_3_brasil) ## Time used: ##     Pre = 0.231, Running = 14.5, Post = 0.0626, Total = 14.8  ## Fixed effects: ##           mean   sd 0.025quant 0.5quant 0.975quant mode kld ## Intercept 1.94 0.04      1.861     1.94      2.019 1.94   0 ##  ## Random effects: ##   Name     Model ##     seaDist RW1 model ##    field CGeneric ##  ## Model hyperparameters: ##                                                   mean       sd 0.025quant ## Precision-parameter for the Gamma observations   14.69    1.048      12.74 ## Precision for seaDist                          7483.88 4079.763    2152.35 ## Theta1 for field                                 -3.16    2.019      -7.82 ## Theta2 for field                                  1.89    0.475       1.13 ## Theta3 for field                                  1.23    1.537      -1.10 ##                                                0.5quant 0.975quant     mode ## Precision-parameter for the Gamma observations    14.65     16.862   14.569 ## Precision for seaDist                           6628.93  17714.203 5051.556 ## Theta1 for field                                  -2.90     -0.118   -1.586 ## Theta2 for field                                   1.85      2.963    1.609 ## Theta3 for field                                   1.03      4.765    0.047 ##  ## Marginal log-Likelihood:  -1254.14  ##  is computed  ## Posterior summaries for the linear predictor and the fitted values are computed ## (Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)')"},{"path":[]},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inlabru.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"inlabru implementation of the rational SPDE approach","text":"vignette present inlabru implementation covariance-based rational SPDE approach. technical details covariance-based approach, see Rational approximation rSPDE package vignette Bolin, Simas, Xiong (2023). begin providing step--step illustration use implementation. end consider real world data set consists precipitation measurements Paran√° region Brazil. initial model fitting, show change parameters model. end, also provide example replicates. examples vignette R-INLA implementation rational SPDE approach vignette. case, important mention one can improve performance using PARDISO solver. Please, go https://www.pardiso-project.org/r-inla/#license apply license. Also, use inla.pardiso() instructions enable PARDISO sparse library.","code":""},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inlabru.html","id":"an-example-with-real-data","dir":"Articles","previous_headings":"","what":"An example with real data","title":"inlabru implementation of the rational SPDE approach","text":"illustrate implementation rSPDE inlabru consider dataset available R-INLA. data also used illustrate SPDE approach, see instance book Advanced Spatial Modeling Stochastic Partial Differential Equations Using R INLA also vignette Spatial Statistics using R-INLA Gaussian Markov random fields. See also Lindgren, Rue, Lindstr√∂m (2011) theoretical details standard SPDE approach. data consist precipitation measurements Paran√° region Brazil provided Brazilian National Water Agency. data collected 616 gauge stations Paran√° state, south Brazil, day 2011.","code":""},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inlabru.html","id":"an-rspde-model-for-precipitation","dir":"Articles","previous_headings":"An example with real data","what":"An rSPDE model for precipitation","title":"inlabru implementation of the rational SPDE approach","text":"follow vignette Spatial Statistics using R-INLA Gaussian Markov random fields. precipitation data always positive, assume Gamma distributed. R-INLA uses following parameterization Gamma distribution, Œì(Œº,œï):œÄ(y)=1Œì(œï)(œïŒº)œïyœï‚àí1exp(‚àíœïyŒº).\\Gamma(\\mu, \\phi): \\pi (y) = \\frac{1}{\\Gamma(\\phi)} \\left(\\frac{\\phi}{\\mu}\\right)^{\\phi} y^{\\phi - 1} \\exp\\left(-\\frac{\\phi y}{\\mu}\\right) . parameterization, distribution expected value E(x)=ŒºE(x) = \\mu variance V(x)=Œº2/œïV(x) = \\mu^2/\\phi, 1/œï1/\\phi dispersion parameter. example Œº\\mu modelled using stochastic model includes covariates spatial structure, resulting latent Gaussian model precipitation measurements yi‚à£Œº(si),Œ∏‚àºŒì(Œº(si),cœï)log(Œº(s))=Œ∑(s)=‚àëkfk(ck(s))+u(s)Œ∏‚àºœÄ(Œ∏),\\begin{align} y_i\\mid \\mu(s_i), \\theta &\\sim \\Gamma(\\mu(s_i),c\\phi)\\\\ \\log (\\mu(s)) &= \\eta(s) = \\sum_k f_k(c_k(s))+u(s)\\\\ \\theta &\\sim \\pi(\\theta) \\end{align}, yiy_i denotes measurement taken location sis_i, ck(s)c_k(s) covariates, u(s)u(s) mean-zero Gaussian Mat√©rn field, Œ∏\\theta vector containing parameters model, including smoothness field. , using rSPDE model also able estimate smoothness latent field.","code":""},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inlabru.html","id":"examining-the-data","dir":"Articles","previous_headings":"An example with real data","what":"Examining the data","title":"inlabru implementation of the rational SPDE approach","text":"using inlabru. inlabru package available CRAN also GitHub. begin loading libraries need get data build plots. Let us load data border region data frame contains daily measurements 616 stations year 2011, well coordinates altitude information measurement stations. analyze full spatio-temporal data set, instead look total precipitation January, calculate next snippet code, extract coordinates altitudes remove locations missing values. Let us build plot precipitations:  red line figure shows coast line, expect distance coast good covariate precipitation. covariate available, let us calculate observation location: Now, let us plot precipitation function possible covariates:","code":"library(ggplot2) library(INLA) library(inlabru) library(splancs) library(viridis) data(PRprec) data(PRborder) Y <- rowMeans(PRprec[, 3 + 1:31]) ind <- !is.na(Y) Y <- Y[ind] coords <- as.matrix(PRprec[ind, 1:2]) alt <- PRprec$Altitude[ind] ggplot() +   geom_point(aes(     x = coords[, 1], y = coords[, 2],     colour = Y   ), size = 2, alpha = 1) +   geom_path(aes(x = PRborder[, 1], y = PRborder[, 2])) +   geom_path(aes(x = PRborder[1034:1078, 1], y = PRborder[     1034:1078,     2   ]), colour = \"red\") +    scale_color_viridis() seaDist <- apply(spDists(coords, PRborder[1034:1078, ],   longlat = TRUE ), 1, min) par(mfrow = c(2, 2)) plot(coords[, 1], Y, cex = 0.5, xlab = \"Longitude\") plot(coords[, 2], Y, cex = 0.5, xlab = \"Latitude\") plot(seaDist, Y, cex = 0.5, xlab = \"Distance to sea\") plot(alt, Y, cex = 0.5, xlab = \"Altitude\") par(mfrow = c(1, 1))"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inlabru.html","id":"creating-the-rspde-model","dir":"Articles","previous_headings":"An example with real data","what":"Creating the rSPDE model","title":"inlabru implementation of the rational SPDE approach","text":"use inlabru implementation rSPDE model need load functions: create rSPDE model, one rspde.matern() function similar fashion one use inla.spde2.matern() function.","code":"library(rSPDE)"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inlabru.html","id":"mesh","dir":"Articles","previous_headings":"An example with real data > Creating the rSPDE model","what":"Mesh","title":"inlabru implementation of the rational SPDE approach","text":"can use fm_mesh_2d() function fmesher package creating mesh. Let us create mesh based non-convex hull avoid adding many small triangles outside domain interest:","code":"library(fmesher)  prdomain <- fm_nonconvex_hull(coords, -0.03, -0.05, resolution = c(100, 100)) prmesh <- fm_mesh_2d(boundary = prdomain, max.edge = c(0.45, 1), cutoff = 0.2) plot(prmesh, asp = 1, main = \"\") lines(PRborder, col = 3) points(coords[, 1], coords[, 2], pch = 19, cex = 0.5, col = \"red\")"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inlabru.html","id":"setting-up-the-data-frame","dir":"Articles","previous_headings":"An example with real data > Creating the rSPDE model","what":"Setting up the data frame","title":"inlabru implementation of the rational SPDE approach","text":"place inla.stack, can set data.frame() use inlabru. refer reader vignettes https://inlabru-org.github.io/inlabru/index.html details.","code":"prdata <- data.frame(long = coords[,1], lat = coords[,2],                          seaDist = inla.group(seaDist), y = Y) coordinates(prdata) <- c(\"long\",\"lat\")"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inlabru.html","id":"setting-up-the-rspde-model","dir":"Articles","previous_headings":"An example with real data > Creating the rSPDE model","what":"Setting up the rSPDE model","title":"inlabru implementation of the rational SPDE approach","text":"set rSPDEmodel, need mesh. default assume want estimate smoothness parameter ŒΩ\\nu covariance-based rational approximation order 2. Later vignette also see options setting rSPDE models keeping smoothness parameter fixed /increasing order covariance-based rational approximation. Therefore, set model use rspde.matern() function: Notice function reminiscent R-INLA‚Äôs inla.spde2.matern() function. assume following linkage model components observations Œ∑(s)‚àºAx(s)+Intercept+seaDist.\\eta(s) \\sim x(s) + \\text{ Intercept} + \\text{seaDist}.Œ∑(s)\\eta(s) used observation-likelihood, yi‚à£Œ∑(si),Œ∏‚àºŒì(exp(Œ∑(si)),cœï).y_i\\mid \\eta(s_i),\\theta \\sim \\Gamma(\\exp(\\eta (s_i)), c\\phi).","code":"rspde_model <- rspde.matern(mesh = prmesh)"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inlabru.html","id":"model-fitting","dir":"Articles","previous_headings":"An example with real data","what":"Model fitting","title":"inlabru implementation of the rational SPDE approach","text":"build model using distance sea xix_i covariate improper CAR(1) model Œ≤ij=1(‚àºj)\\beta_{ij}=1(\\sim j), R-INLA calls random walk order 1. fit inlabru‚Äôs style: fit model simply use bru() function:","code":"cmp <- y ~ Intercept(1) + distSea(seaDist, model=\"rw1\") + field(coordinates, model = rspde_model) rspde_fit <- bru(cmp, data = prdata,   family = \"Gamma\",   options = list(     control.inla = list(int.strategy = \"eb\"),     verbose = FALSE) )"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inlabru.html","id":"inlabru-results","dir":"Articles","previous_headings":"An example with real data","what":"inlabru results","title":"inlabru implementation of the rational SPDE approach","text":"can look summaries posterior distributions parameters, example fixed effects (.e.¬†intercept) hyper-parameters (.e.¬†dispersion gamma likelihood, precision RW1, parameters spatial field): Let Œ∏1=Theta1\\theta_1 = \\textrm{Theta1}, Œ∏2=Theta2\\theta_2=\\textrm{Theta2} Œ∏3=Theta3\\theta_3=\\textrm{Theta3}. terms SPDE (Œ∫2I‚àíŒî)Œ±/2(œÑu)=ùí≤,(\\kappa^2 - \\Delta)^{\\alpha/2}(\\tau u) = \\mathcal{W}, Œ±=ŒΩ+d/2\\alpha = \\nu + d/2, œÑ=exp(Œ∏1),Œ∫=exp(Œ∏2),\\tau = \\exp(\\theta_1),\\quad \\kappa = \\exp(\\theta_2),  default ŒΩ=4(exp(Œ∏3)1+exp(Œ∏3)).\\nu = 4\\Big(\\frac{\\exp(\\theta_3)}{1+\\exp(\\theta_3)}\\Big). number 4 comes upper bound ŒΩ\\nu, discussed R-INLA implementation rational SPDE approach vignette. general, ŒΩ=ŒΩUB(exp(Œ∏3)1+exp(Œ∏3)),\\nu = \\nu_{UB}\\Big(\\frac{\\exp(\\theta_3)}{1+\\exp(\\theta_3)}\\Big), ŒΩUB\\nu_{UB} value upper bound smoothness parameter ŒΩ\\nu. Another choice prior ŒΩ\\nu truncated lognormal distribution also discussed R-INLA implementation rational SPDE approach vignette.","code":"summary(rspde_fit) ## inlabru version: 2.11.1 ## INLA version: 24.06.27 ## Components: ## Intercept: main = linear(1), group = exchangeable(1L), replicate = iid(1L) ## distSea: main = rw1(seaDist), group = exchangeable(1L), replicate = iid(1L) ## field: main = cgeneric(coordinates), group = exchangeable(1L), replicate = iid(1L) ## Likelihoods: ##   Family: 'Gamma' ##     Data class: 'SpatialPointsDataFrame' ##     Predictor: y ~ . ## Time used: ##     Pre = 0.407, Running = 3.15, Post = 0.122, Total = 3.68  ## Fixed effects: ##            mean    sd 0.025quant 0.5quant 0.975quant  mode kld ## Intercept 1.941 0.041       1.86    1.941      2.022 1.941   0 ##  ## Random effects: ##   Name     Model ##     distSea RW1 model ##    field CGeneric ##  ## Model hyperparameters: ##                                                    mean       sd 0.025quant ## Precision-parameter for the Gamma observations   14.657    1.048     12.692 ## Precision for distSea                          7733.501 4449.844   2433.283 ## Theta1 for field                                 -1.079    0.405     -1.875 ## Theta2 for field                                  1.511    0.270      0.989 ## Theta3 for field                                 -0.357    0.378     -1.106 ##                                                0.5quant 0.975quant    mode ## Precision-parameter for the Gamma observations   14.623     16.815   14.56 ## Precision for distSea                          6681.099  19291.183 5035.01 ## Theta1 for field                                 -1.079     -0.280   -1.08 ## Theta2 for field                                  1.507      2.053    1.49 ## Theta3 for field                                 -0.356      0.384   -0.35 ##  ## Deviance Information Criterion (DIC) ...............: 2466.38 ## Deviance Information Criterion (DIC, saturated) ....: 723.30 ## Effective number of parameters .....................: 110.86 ##  ## Watanabe-Akaike information criterion (WAIC) ...: 2467.57 ## Effective number of parameters .................: 96.67 ##  ## Marginal log-Likelihood:  -1255.36  ##  is computed  ## Posterior summaries for the linear predictor and the fitted values are computed ## (Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)')"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inlabru.html","id":"inlabru-results-in-the-original-scale","dir":"Articles","previous_headings":"An example with real data","what":"inlabru results in the original scale","title":"inlabru implementation of the rational SPDE approach","text":"can obtain outputs respect parameters original scale using function rspde.result(): can also plot posterior densities. end use gg_df() function, creates ggplot2 user-friendly data frames:  can also obtain summary different parameterization setting parameterization argument rspde.result() function: similar manner, can obtain posterior plots matern parameterization:","code":"result_fit <- rspde.result(rspde_fit, \"field\",                  rspde_model) summary(result_fit) ##           mean       sd 0.025quant 0.5quant 0.975quant     mode ## tau   0.368673 0.154155   0.154356 0.339731   0.750872 0.289319 ## kappa 4.696260 1.294140   2.699070 4.510680   7.751820 4.146620 ## nu    0.829204 0.176972   0.499781 0.824232   1.186890 0.813881 posterior_df_fit <- gg_df(result_fit)  ggplot(posterior_df_fit) + geom_line(aes(x = x, y = y)) +  facet_wrap(~parameter, scales = \"free\") + labs(y = \"Density\") result_fit_matern <- rspde.result(rspde_fit, \"field\",                  rspde_model, parameterization = \"matern\") summary(result_fit_matern) ##             mean        sd 0.025quant 0.5quant 0.975quant     mode ## std.dev 0.330978 0.0396776   0.254958 0.329444   0.411828 0.330208 ## range   0.588100 0.1808970   0.299247 0.566527   1.004530 0.523643 ## nu      0.829204 0.1769720   0.499781 0.824232   1.186890 0.813881 posterior_df_fit_matern <- gg_df(result_fit_matern)  ggplot(posterior_df_fit_matern) + geom_line(aes(x = x, y = y)) +  facet_wrap(~parameter, scales = \"free\") + labs(y = \"Density\")"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inlabru.html","id":"predictions","dir":"Articles","previous_headings":"An example with real data","what":"Predictions","title":"inlabru implementation of the rational SPDE approach","text":"Let us now obtain predictions (.e.¬†kriging) expected precipitation dense grid region. begin creating grid want predictions. end, can use fm_evaluator() function: lattice contains 150 √ó 100 locations. One can easily change resolution kriging prediction changing nxy. Let us find cells outside region interest plot estimates . Let us plot locations prediction:  Let us now create data.frame() coordinates: Since using distance sea covariate, also calculate covariate prediction locations. Finally, add prediction location prediction data.frame(), namely, coord.prd.df: Let us now build data frame results: Finally, plot results. First predicted mean:  , std. deviations:","code":"nxy <- c(150, 100) projgrid <- fm_evaluator(prmesh,   xlim = range(PRborder[, 1]),   ylim = range(PRborder[, 2]), dims = nxy ) xy.in <- inout(projgrid$lattice$loc, cbind(PRborder[, 1], PRborder[, 2])) coord.prd <- projgrid$lattice$loc[xy.in, ] plot(coord.prd, type = \"p\", cex = 0.1) lines(PRborder) points(coords[, 1], coords[, 2], pch = 19, cex = 0.5, col = \"red\") coord.prd.df <- data.frame(x1 = coord.prd[,1],                             x2 = coord.prd[,2]) coordinates(coord.prd.df) <- c(\"x1\", \"x2\") seaDist.prd <- apply(spDists(coord.prd,   PRborder[1034:1078, ],   longlat = TRUE ), 1, min) coord.prd.df$seaDist <- seaDist.prd pred_obs <- predict(rspde_fit, coord.prd.df,          ~exp(Intercept + field + distSea)) pred_df <- pred_obs@data pred_df <- cbind(pred_df, pred_obs@coords) ggplot(pred_df, aes(x = x1, y = x2, fill = mean)) +   geom_raster() +   scale_fill_viridis() ggplot(pred_df, aes(x = x1, y = x2, fill = sd)) +   geom_raster() + scale_fill_viridis()"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inlabru.html","id":"an-example-with-replicates","dir":"Articles","previous_headings":"","what":"An example with replicates","title":"inlabru implementation of the rational SPDE approach","text":"example simulate data replicates. use example considered Rational approximation rSPDE package vignette (difference way data organized). also refer reader vignette description function matern.operators(), along methods (instance, simulate() method).","code":""},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inlabru.html","id":"simulating-the-data","dir":"Articles","previous_headings":"An example with replicates","what":"Simulating the data","title":"inlabru implementation of the rational SPDE approach","text":"Let us consider simple Gaussian linear model 30 independent replicates latent spatial field x(ùê¨)x(\\mathbf{s}), observed mm locations, {ùê¨1,‚Ä¶,ùê¨m}\\{\\mathbf{s}_1 , \\ldots , \\mathbf{s}_m \\}, replicate. =1,‚Ä¶,m,= 1,\\ldots,m, yi=x1(ùê¨i)+Œµi,‚ãÆ=‚ãÆyi+29m=x30(ùê¨i)+Œµi+29m,\\begin{align}  y_i &= x_1(\\mathbf{s}_i)+\\varepsilon_i,\\\\ \\vdots &= \\vdots\\\\  y_{+29m} &= x_{30}(\\mathbf{s}_i) + \\varepsilon_{+29m}, \\end{align} Œµ1,‚Ä¶,Œµ30m\\varepsilon_1,\\ldots,\\varepsilon_{30m} iid normally distributed mean 0 standard deviation 0.1. use basis function representation x(‚ãÖ)x(\\cdot) define AA matrix linking point locations mesh. also need account fact 30 replicates locations. end, AA matrix need can generated spde.make.() function. reason sampling x(‚ãÖ)x(\\cdot) directly latent vector described introduction Rational approximation rSPDE package vignette. begin creating mesh:  compute AA matrix, needed simulation, connects observation locations mesh. end use spde.make.() helper function, wrapper uses functions fm_basis(), fm_block() fm_row_kron() fmesher package. Notice simulated data, use AA matrix spde.make.() function instead rspde.make.(). now simulate latent process standard deviation œÉ=1\\sigma=1 range 0.10.1. use ŒΩ=0.5\\nu=0.5 model exponential covariance function. end create model object matern.operators() function: details function can found Rational approximation rSPDE package vignette. simulate latent process need use simulate() method operator_information object. obtain simulated data yy connecting AA matrix adding gaussian noise. first replicate simulated random field well observation locations shown following figure.","code":"m <- 200 loc_2d_mesh <- matrix(runif(m * 2), m, 2) mesh_2d <- fm_mesh_2d(   loc = loc_2d_mesh,   cutoff = 0.05,   offset = c(0.1, 0.4),   max.edge = c(0.05, 0.5) ) plot(mesh_2d, main = \"\") points(loc_2d_mesh[, 1], loc_2d_mesh[, 2]) n.rep <- 30 A <- spde.make.A(   mesh = mesh_2d,   loc = loc_2d_mesh,   index = rep(1:m, times = n.rep),   repl = rep(1:n.rep, each = m) ) nu <- 0.5 sigma <- 1 range <- 0.1 kappa <- sqrt(8 * nu) / range tau <- sqrt(gamma(nu) / (sigma^2 * kappa^(2 * nu) * (4 * pi) * gamma(nu + 1))) d <- 2 operator_information <- matern.operators(   mesh = mesh_2d,   nu = nu,   range = range,   sigma = sigma,   m = 2,   parameterization = \"matern\" ) set.seed(1) u <- simulate(operator_information, nsim = n.rep) y <- as.vector(A %*% as.vector(u)) +   rnorm(m * n.rep) * 0.1 proj <- fm_evaluator(mesh_2d, dims = c(100, 100))  df_field <- data.frame(x = proj$lattice$loc[,1],                         y = proj$lattice$loc[,2],                         field = as.vector(fm_evaluate(proj,                          field = as.vector(u[, 1]))),                         type = \"field\")  df_loc <- data.frame(x = loc_2d_mesh[, 1],                       y = loc_2d_mesh[, 2],                       field = y[1:m],                       type = \"locations\") df_plot <- rbind(df_field, df_loc)  ggplot(df_plot) + aes(x = x, y = y, fill = field) +         facet_wrap(~type) + xlim(0,1) + ylim(0,1) +          geom_raster(data = df_field) +         geom_point(data = df_loc, aes(colour = field),         show.legend = FALSE) +          scale_fill_viridis() + scale_colour_viridis()"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inlabru.html","id":"fitting-the-inlabru-rspde-model","dir":"Articles","previous_headings":"An example with replicates","what":"Fitting the inlabru rSPDE model","title":"inlabru implementation of the rational SPDE approach","text":"Let us use rational SPDE approach fit data. begin creating model object. Let us now create data.frame() vector replicates indexes: Let us create component fit. extremely important forget replicate fitting model bru() function. produce warning might fit meaningless model. can get summary: summary user‚Äôs scale: Let us also obtain summary matern parameterization:","code":"rspde_model.rep <- rspde.matern(mesh = mesh_2d,           parameterization = \"spde\") rep.df <- data.frame(y = y, x1 = rep(loc_2d_mesh[,1], n.rep),                       x2 = rep(loc_2d_mesh[,2], n.rep)) coordinates(rep.df) <- c(\"x1\", \"x2\") repl <- rep(1:n.rep, each=m) cmp.rep <-   y ~ -1 + field(coordinates,     model = rspde_model.rep,     replicate = repl   )   rspde_fit.rep <-   bru(cmp.rep,     data = rep.df,     family = \"gaussian\"   ) summary(rspde_fit.rep) ## inlabru version: 2.11.1 ## INLA version: 24.06.27 ## Components: ## field: main = cgeneric(coordinates), group = exchangeable(1L), replicate = iid(repl) ## Likelihoods: ##   Family: 'gaussian' ##     Data class: 'SpatialPointsDataFrame' ##     Predictor: y ~ . ## Time used: ##     Pre = 0.253, Running = 33.8, Post = 3.83, Total = 37.9  ## Random effects: ##   Name     Model ##     field CGeneric ##  ## Model hyperparameters: ##                                           mean    sd 0.025quant 0.5quant ## Precision for the Gaussian observations 93.718 4.704      84.89   93.568 ## Theta1 for field                        -3.166 0.052      -3.29   -3.160 ## Theta2 for field                         3.154 0.033       3.09    3.153 ## Theta3 for field                        -0.671 0.030      -0.72   -0.674 ##                                         0.975quant   mode ## Precision for the Gaussian observations    103.409 93.201 ## Theta1 for field                            -3.084 -3.130 ## Theta2 for field                             3.219  3.151 ## Theta3 for field                            -0.605 -0.688 ##  ## Deviance Information Criterion (DIC) ...............: -5209.93 ## Deviance Information Criterion (DIC, saturated) ....: 10931.78 ## Effective number of parameters .....................: 4930.05 ##  ## Watanabe-Akaike information criterion (WAIC) ...: -6352.31 ## Effective number of parameters .................: 2770.37 ##  ## Marginal log-Likelihood:  -4780.06  ##  is computed  ## Posterior summaries for the linear predictor and the fitted values are computed ## (Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)') result_fit_rep <- rspde.result(rspde_fit.rep, \"field\", rspde_model.rep) summary(result_fit_rep) ##             mean         sd 0.025quant   0.5quant 0.975quant       mode ## tau    0.0422524 0.00216812  0.0375004  0.0425025  0.0457834  0.0436407 ## kappa 23.4334000 0.75855900 22.0106000 23.4077000 24.9884000 23.3360000 ## nu     0.6763380 0.01321380  0.6548380  0.6747370  0.7058230  0.6689720 result_df <- data.frame(   parameter = c(\"tau\", \"kappa\", \"nu\"),   true = c(tau, kappa, nu),   mean = c(     result_fit_rep$summary.tau$mean,     result_fit_rep$summary.kappa$mean,     result_fit_rep$summary.nu$mean   ),   mode = c(     result_fit_rep$summary.tau$mode,     result_fit_rep$summary.kappa$mode,     result_fit_rep$summary.nu$mode   ) ) print(result_df) ##   parameter        true        mean        mode ## 1       tau  0.08920621  0.04225244  0.04364071 ## 2     kappa 20.00000000 23.43341365 23.33599641 ## 3        nu  0.50000000  0.67633834  0.66897236 result_fit_rep_matern <- rspde.result(rspde_fit.rep, \"field\", rspde_model.rep,                            parameterization = \"matern\") summary(result_fit_rep_matern) ##              mean         sd 0.025quant  0.5quant 0.975quant     mode ## std.dev 1.1009600 0.01191310  1.0777700 1.1008700   1.124470 1.101460 ## range   0.0990958 0.00363249  0.0921262 0.0990625   0.106294 0.099001 ## nu      0.6763380 0.01321380  0.6548380 0.6747370   0.705823 0.668972 result_df_matern <- data.frame(   parameter = c(\"std_dev\", \"range\", \"nu\"),   true = c(sigma, range, nu),   mean = c(     result_fit_rep_matern$summary.std.dev$mean,     result_fit_rep_matern$summary.range$mean,     result_fit_rep_matern$summary.nu$mean   ),   mode = c(     result_fit_rep$summary.std.dev$mode,     result_fit_rep$summary.range$mode,     result_fit_rep$summary.nu$mode   ) ) print(result_df_matern) ##   parameter true       mean      mode ## 1   std_dev  1.0 1.10096167 0.6689724 ## 2     range  0.1 0.09909577 0.6689724 ## 3        nu  0.5 0.67633834 0.6689724"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inlabru.html","id":"an-example-with-a-non-stationary-model","dir":"Articles","previous_headings":"","what":"An example with a non-stationary model","title":"inlabru implementation of the rational SPDE approach","text":"goal now show one can fit model non-stationary œÉ\\sigma (std. deviation) non-stationary œÅ\\rho (range parameter). One can also use parameterization terms non-stationary SPDE parameters Œ∫\\kappa œÑ\\tau. example consider simulated data.","code":""},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inlabru.html","id":"simulating-the-data-1","dir":"Articles","previous_headings":"An example with a non-stationary model","what":"Simulating the data","title":"inlabru implementation of the rational SPDE approach","text":"Let us consider simple Gaussian linear model latent spatial field x(ùê¨)x(\\mathbf{s}), defined rectangle (0,10)√ó(0,5)(0,10) \\times (0,5), std. deviation range parameter satisfy following log-linear regressions: log(œÉ(ùê¨))=Œ∏1+Œ∏3b(ùê¨),log(œÅ(ùê¨))=Œ∏2+Œ∏3b(ùê¨),\\begin{align} \\log(\\sigma(\\mathbf{s})) &= \\theta_1 + \\theta_3 b(\\mathbf{s}),\\\\ \\log(\\rho(\\mathbf{s})) &= \\theta_2 + \\theta_3 b(\\mathbf{s}), \\end{align} b(ùê¨)=(s1‚àí5)/10b(\\mathbf{s}) = (s_1-5)/10. assume data observed mm locations, {ùê¨1,‚Ä¶,ùê¨m}\\{\\mathbf{s}_1 , \\ldots , \\mathbf{s}_m \\}. =1,‚Ä¶,m,= 1,\\ldots,m, yi=x1(ùê¨i)+Œµi,y_i = x_1(\\mathbf{s}_i)+\\varepsilon_i, Œµ1,‚Ä¶,Œµm\\varepsilon_1,\\ldots,\\varepsilon_{m} iid normally distributed mean 0 standard deviation 0.1. begin defining domain creating mesh: follow structure INLA. However, INLA allows one specify B.tau B.kappa matrices, , INLA, one wants parameterize terms range standard deviation one needs manually. provide option directly provide matrices B.sigma B.range. usage matrices B.tau B.kappa identical corresponding ones inla.spde2.matern() function. matrices B.sigma B.range work way, parameterize stardard deviation range, respectively. columns B matrices correspond parameter. first column parameter estimated, constant column. , instance, one wants share parameter sigma range (tau kappa), one simply let corresponding column nonzero B.sigma B.range (B.tau B.kappa). assume ŒΩ=0.8\\nu = 0.8, Œ∏1=0,Œ∏2=1\\theta_1 = 0, \\theta_2 = 1 Œ∏3=1\\theta_3=1. Let us now build model obtain sample spde.matern.operators() function: Let us now sample data simulate() method: Let us now obtain 600 random locations rectangle compute AA matrix: can now generate response vector y:","code":"rec_domain <- cbind(c(0, 1, 1, 0, 0) * 10, c(0, 0, 1, 1, 0) * 5)  mesh <- fm_mesh_2d(loc.domain = rec_domain, cutoff = 0.1,    max.edge = c(0.5, 1.5), offset = c(0.5, 1.5)) nu <- 0.8 true_theta <- c(0,1, 1) B.sigma = cbind(0, 1, 0, (mesh$loc[,1] - 5) / 10) B.range = cbind(0, 0, 1, (mesh$loc[,1] - 5) / 10)  # SPDE model op_cov_ns <- spde.matern.operators(mesh = mesh,    theta = true_theta,   nu = nu,   B.sigma = B.sigma,    B.range = B.range, m = 2,   parameterization = \"matern\") u <- as.vector(simulate(op_cov_ns, seed = 123)) m <- 600 loc_mesh <- cbind(runif(m) * 10, runif(m) * 5)  A <- spde.make.A(   mesh = mesh,   loc = loc_mesh ) y <- as.vector(A %*% as.vector(u)) + rnorm(m) * 0.1"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inlabru.html","id":"fitting-the-inlabru-rspde-model-1","dir":"Articles","previous_headings":"An example with a non-stationary model","what":"Fitting the inlabru rSPDE model","title":"inlabru implementation of the rational SPDE approach","text":"Let us use rational SPDE approach fit data. begin creating model object. creating new one start estimation true values. Let us now create data.frame() vector replicates indexes: Let us create component fit. extremely important forget replicate fitting model bru() function. produce warning might fit meaningless model. can get summary: can obtain outputs respect parameters original scale using function rspde.result(): Let us compare mean true values parameters: can also plot posterior densities. end use gg_df() function, creates ggplot2 user-friendly data frames:","code":"rspde_model_nonstat <- rspde.matern(mesh = mesh,   B.sigma = B.sigma,   B.range = B.range,   parameterization = \"matern\") nonstat_df <- data.frame(y = y, x1 = loc_mesh[,1],                       x2 = loc_mesh[,2]) coordinates(nonstat_df) <- c(\"x1\", \"x2\") cmp_nonstat <-   y ~ -1 + field(coordinates,     model = rspde_model_nonstat   )   rspde_fit_nonstat <-   bru(cmp_nonstat,     data = nonstat_df,     family = \"gaussian\",     options = list(verbose = FALSE)   ) summary(rspde_fit_nonstat) ## inlabru version: 2.11.1 ## INLA version: 24.06.27 ## Components: ## field: main = cgeneric(coordinates), group = exchangeable(1L), replicate = iid(1L) ## Likelihoods: ##   Family: 'gaussian' ##     Data class: 'SpatialPointsDataFrame' ##     Predictor: y ~ . ## Time used: ##     Pre = 0.218, Running = 6.86, Post = 0.166, Total = 7.24  ## Random effects: ##   Name     Model ##     field CGeneric ##  ## Model hyperparameters: ##                                            mean     sd 0.025quant 0.5quant ## Precision for the Gaussian observations 104.517 11.334     82.542  104.382 ## Theta1 for field                         -0.096  0.129     -0.330   -0.102 ## Theta2 for field                          0.785  0.155      0.525    0.773 ## Theta3 for field                          1.126  0.146      0.880    1.115 ## Theta4 for field                         -0.021  0.149     -0.317   -0.021 ##                                         0.975quant    mode ## Precision for the Gaussian observations    126.987 105.370 ## Theta1 for field                             0.177  -0.131 ## Theta2 for field                             1.128   0.710 ## Theta3 for field                             1.448   1.056 ## Theta4 for field                             0.272  -0.019 ##  ## Deviance Information Criterion (DIC) ...............: -734.12 ## Deviance Information Criterion (DIC, saturated) ....: 953.58 ## Effective number of parameters .....................: 350.89 ##  ## Watanabe-Akaike information criterion (WAIC) ...: -771.99 ## Effective number of parameters .................: 236.77 ##  ## Marginal log-Likelihood:  -15.07  ##  is computed  ## Posterior summaries for the linear predictor and the fitted values are computed ## (Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)') result_fit_nonstat <- rspde.result(rspde_fit_nonstat, \"field\", rspde_model_nonstat) summary(result_fit_nonstat) ##                     mean        sd 0.025quant  0.5quant 0.975quant      mode ## Theta1.matern -0.0960805 0.1291200  -0.330289 -0.101914   0.176615 -0.131140 ## Theta2.matern  0.7852450 0.1552230   0.525012  0.773162   1.127880  0.709692 ## Theta3.matern  1.1256900 0.1460990   0.880132  1.114610   1.447860  1.055590 ## nu             0.9896380 0.0738959   0.844136  0.989516   1.133470  0.990255 summ_res_nonstat <- summary(result_fit_nonstat) result_df <- data.frame(   parameter = result_fit_nonstat$params,   true = c(true_theta, nu),   mean = summ_res_nonstat[,1],   mode = summ_res_nonstat[,6] ) print(result_df) ##       parameter true       mean      mode ## 1 Theta1.matern  0.0 -0.0960805 -0.131140 ## 2 Theta2.matern  1.0  0.7852450  0.709692 ## 3 Theta3.matern  1.0  1.1256900  1.055590 ## 4            nu  0.8  0.9896380  0.990255 posterior_df_fit <- gg_df(result_fit_nonstat)  ggplot(posterior_df_fit) + geom_line(aes(x = x, y = y)) +  facet_wrap(~parameter, scales = \"free\") + labs(y = \"Density\")"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inlabru.html","id":"comparing-the-results-by-cross-validation","dir":"Articles","previous_headings":"","what":"Comparing the results by cross-validation","title":"inlabru implementation of the rational SPDE approach","text":"can compare models fitted inlabru using function cross_validation(). illustrate, consider nonstationary model rspde_fit_nonstat fitted previous example stationary fit dataset. Let us, , fit stationary model previous dataset. start defining stationary model: , inlabru‚Äôs component: can now fit model: perform cross-validation, create list fitted models, pass list cross_validation() function. also important create named list, output meaningful names models. perform leave percentage cross-validation, default fits model 20% data, predict 80% data. Let us create models list: now run cross-validation models . set cv_type lpo perform leave percentage cross-validation, also k-fold (default) loo options perform k-fold leave one cross-validations, respectively. Observe default performing pseudo cross-validation, , refit model fold, however training data used perform prediction. can now look results printing cv_result. Observe best model respect score displayed last row. cross_validation() function also following useful options: return_score_folds option, scores fold can returned order create confidence regions scores. return_train_test return train test indexes used perform cross-validation. true_CV perform true cross-validation, , data fit fold, costly. train_test_indexes user can provide indexes train test sets. details can found manual page cross_validation() function.","code":"rspde_model_stat <- rspde.matern(mesh = mesh) cmp_stat <-   y ~ -1 + field(coordinates,     model = rspde_model_stat   ) rspde_fit_stat <-   bru(cmp_stat,     data = nonstat_df,     family = \"gaussian\",     options = list(verbose = FALSE)   ) models <- list(stationary = rspde_fit_stat,                  nonstationary = rspde_fit_nonstat) cv_result <- cross_validation(models, cv_type = \"lpo\", print = FALSE) ## [[1]] ## $family ## [1] \"gaussian\" ##  ## $formula ## y ~ . ## <environment: 0x55d6c268c288> ##  ## $response_data ## $response_data$BRU_response ##   [1]  1.5374384496  2.4784371624 -1.4697469269  2.2660738319  0.0891323305 ##   [6]  0.4107074316  2.0013010075  0.2444013318 -0.6589689843  1.3103623454 ##  [11]  0.6986495286  1.1483198530  1.2963476414  2.5610335069  0.4261117342 ##  [16]  1.2872090466  1.5384335160 -0.0945986304  0.2627751753 -0.7426957927 ##  [21]  0.5100312939  1.0491793810  0.2252735154  0.0457342110 -0.0142939462 ##  [26]  1.9887446938  1.4825073703  2.3755654010 -0.3574352472  1.6427366595 ##  [31]  1.3296347014 -0.0024886837  0.0974233661  2.3689520022 -0.0006209654 ##  [36]  0.3055075621 -0.6633833414  0.9270318431  0.6111675095  0.0294475967 ##  [41]  0.1177695202  0.0133957092  0.8663405042  1.7463856315  0.1100284745 ##  [46]  0.0006467918  2.2887683256  1.7174514475 -0.0797455108  2.5373883140 ##  [51]  1.4965863978  1.3935523424 -0.7415585220  0.4538356464 -0.0449025706 ##  [56]  0.4715554886  0.6852309527  0.6811530069  2.1130617434 -0.1393513590 ##  [61]  1.5005172456  0.9520778746  0.0188969995  0.1410569205  1.4911590485 ##  [66]  0.3001542539  0.8494503300 -0.2823511613  0.0011067876  1.2655135138 ##  [71]  1.3631643111  3.0424718703  0.2172431826  1.1527376773  1.2082638906 ##  [76]  0.0818240571  0.4414046771  0.9517304875  0.2563988472  2.1922190936 ##  [81] -0.7670771055 -0.3050926664  1.1281971531  2.1938022768  2.8655361788 ##  [86]  1.5903791612 -0.0474320080  1.0851325547  0.6379348398  0.2214363677 ##  [91]  2.2675835467  2.0684679577 -0.5199408157  0.1255301487  2.4889766752 ##  [96] -0.1162922867 -0.8920458112  1.2494583521  0.0226624203  0.6934784555 ## [101]  1.5497719217  0.5665203039  1.8632271096  0.9058215384  1.8675396257 ## [106]  1.7118369191  0.5017929706 -0.0561288210  0.2198228103  2.1270479473 ## [111]  0.2484250884  0.2102031710  0.3196198070 -0.2515045084  1.4041525222 ## [116]  2.1621779159 -0.3487977502  1.1909537111  3.0760798038  0.1224504968 ##  ## $response_data$BRU_E ## [1] 1 ##  ## $response_data$BRU_Ntrials ## [1] 1 ##  ## $response_data$BRU_scale ## [1] 1 ##  ##  ## $data ##                coordinates             y ## 1     (8.594981, 2.680497)  1.5374384496 ## 5     (7.662535, 1.354513)  2.4784371624 ## 7     (9.251893, 1.280585) -1.4697469269 ## 13    (7.394178, 1.877395)  2.2660738319 ## 22    (5.420688, 3.962653)  0.0891323305 ## 34    (6.415449, 4.470381)  0.4107074316 ## 37     (7.305513, 1.54024)  2.0013010075 ## 45     (3.0784, 0.6510523)  0.2444013318 ## 52   (0.2566116, 3.952345) -0.6589689843 ## 53     (7.553331, 4.20413)  1.3103623454 ## 58    (9.100522, 3.845274)  0.6986495286 ## 72    (8.565509, 2.001331)  1.1483198530 ## 73    (1.839418, 4.983126)  1.2963476414 ## 74     (5.054748, 2.21294)  2.5610335069 ## 79   (2.701634, 0.5726394)  0.4261117342 ## 92     (7.785768, 2.95715)  1.2872090466 ## 93    (8.593795, 3.974606)  1.5384335160 ## 99     (0.37575, 3.037941) -0.0945986304 ## 100  (4.102906, 0.9819229)  0.2627751753 ## 103   (1.336778, 3.192196) -0.7426957927 ## 104   (4.794563, 4.287101)  0.5100312939 ## 106   (4.899329, 3.021572)  1.0491793810 ## 108   (5.009973, 3.734563)  0.2252735154 ## 113 (0.1885503, 0.4932166)  0.0457342110 ## 114 (0.3681457, 0.1656634) -0.0142939462 ## 116   (7.900359, 2.688549)  1.9887446938 ## 117    (7.35261, 4.109116)  1.4825073703 ## 119    (8.053664, 2.34125)  2.3755654010 ## 127     (9.5896, 1.551667) -0.3574352472 ## 132    (8.51408, 2.621992)  1.6427366595 ## 133   (6.247239, 3.774221)  1.3296347014 ## 135   (1.437549, 2.383648) -0.0024886837 ## 138   (3.386237, 2.467673)  0.0974233661 ## 140   (4.939354, 2.560598)  2.3689520022 ## 142  (9.184151, 0.3800263) -0.0006209654 ## 148   (2.952294, 3.798363)  0.3055075621 ## 151   (3.623513, 4.745853) -0.6633833414 ## 155    (6.47497, 4.965168)  0.9270318431 ## 162 (0.04170842, 1.677276)  0.6111675095 ## 168  (4.392328, 0.2553791)  0.0294475967 ## 172   (1.315296, 2.019908)  0.1177695202 ## 173  (4.945315, 0.1631137)  0.0133957092 ## 179   (7.133719, 3.664549)  0.8663405042 ## 183   (6.638664, 1.904938)  1.7463856315 ## 188   (2.549621, 3.326859)  0.1100284745 ## 190    (4.69608, 4.517929)  0.0006467918 ## 193   (7.526312, 1.168505)  2.2887683256 ## 204  (7.602703, 0.4957661)  1.7174514475 ## 207   (2.704743, 4.364378) -0.0797455108 ## 210   (7.569693, 2.048543)  2.5373883140 ## 222    (8.667424, 2.82618)  1.4965863978 ## 227    (7.16385, 4.718297)  1.3935523424 ## 235 (0.06785675, 4.305523) -0.7415585220 ## 238   (7.932701, 4.649456)  0.4538356464 ## 241   (1.874595, 3.270571) -0.0449025706 ## 244   (2.723401, 1.910724)  0.4715554886 ## 247    (9.57917, 3.341107)  0.6852309527 ## 248   (1.786093, 1.459911)  0.6811530069 ## 257  (6.352767, 0.8679928)  2.1130617434 ## 262   (5.168083, 4.628116) -0.1393513590 ## 267   (8.52649, 0.9491271)  1.5005172456 ## 271  (8.736917, 0.1384069)  0.9520778746 ## 274   (5.782891, 4.970651)  0.0188969995 ## 277  (5.101238, 0.2210469)  0.1410569205 ## 287    (8.67415, 3.473783)  1.4911590485 ## 295   (1.040102, 3.784912)  0.3001542539 ## 301   (1.444304, 4.755057)  0.8494503300 ## 305   (2.394938, 3.667676) -0.2823511613 ## 309   (1.650989, 3.581076)  0.0011067876 ## 316   (8.794302, 3.532642)  1.2655135138 ## 339   (8.706238, 2.977778)  1.3631643111 ## 347  (6.725699, 0.5021193)  3.0424718703 ## 364  (0.7799563, 4.120957)  0.2172431826 ## 365   (8.722578, 3.133491)  1.1527376773 ## 370   (7.692295, 3.866935)  1.2082638906 ## 372   (1.621181, 4.133781)  0.0818240571 ## 375  (2.524803, 0.2331395)  0.4414046771 ## 382    (8.446514, 4.54166)  0.9517304875 ## 388  (3.266905, 0.6505034)  0.2563988472 ## 394   (7.667077, 2.524956)  2.1922190936 ## 395   (9.380045, 4.652021) -0.7670771055 ## 419   (0.49568, 0.3689271) -0.3050926664 ## 420   (6.385012, 3.584249)  1.1281971531 ## 421   (4.938933, 1.214062)  2.1938022768 ## 425   (5.184723, 2.425385)  2.8655361788 ## 427    (6.776022, 4.09754)  1.5903791612 ## 428    (5.13768, 3.827838) -0.0474320080 ## 440   (8.789817, 4.818154)  1.0851325547 ## 442   (3.210356, 3.373614)  0.6379348398 ## 443   (4.126111, 2.030218)  0.2214363677 ## 448   (6.101503, 2.605235)  2.2675835467 ## 450   (6.620642, 2.508676)  2.0684679577 ## 452   (9.922463, 1.174754) -0.5199408157 ## 463   (1.07915, 0.1059277)  0.1255301487 ## 470    (5.676537, 1.09235)  2.4889766752 ## 474   (5.301142, 4.777785) -0.1162922867 ## 475   (9.556354, 1.116005) -0.8920458112 ## 483   (7.692362, 3.794863)  1.2494583521 ## 484   (9.105274, 1.722987)  0.0226624203 ## 486   (0.974121, 1.015628)  0.6934784555 ## 490   (6.712682, 1.651357)  1.5497719217 ## 506   (9.655488, 2.738529)  0.5665203039 ## 512  (5.680321, 0.5106848)  1.8632271096 ## 513 (4.075126, 0.07329848)  0.9058215384 ## 514  (5.797955, 0.4818001)  1.8675396257 ## 519   (8.085036, 2.813951)  1.7118369191 ## 536    (4.621371, 3.24756)  0.5017929706 ## 547   (6.314306, 4.658269) -0.0561288210 ## 548    (9.64617, 2.363611)  0.2198228103 ## 554   (6.694261, 2.627189)  2.1270479473 ## 562   (1.531332, 0.438622)  0.2484250884 ## 573   (2.906453, 3.100389)  0.2102031710 ## 574  (3.056277, 0.2753938)  0.3196198070 ## 581   (3.835713, 4.001397) -0.2515045084 ## 586   (8.321681, 3.618737)  1.4041525222 ## 587  (6.979652, 0.7663116)  2.1621779159 ## 592   (9.682872, 1.397534) -0.3487977502 ## 594   (7.440786, 4.783676)  1.1909537111 ## 597   (5.206548, 2.042345)  3.0760798038 ## 599  (4.767034, 0.1971005)  0.1224504968 ##  ## $E ## [1] 1 ##  ## $Ntrials ## [1] 1 ##  ## $weights ## [1] 1 ##  ## $scale ## [1] 1 ##  ## $samplers ## NULL ##  ## $linear ## [1] TRUE ##  ## $expr ## NULL ##  ## $response ## [1] \"BRU_response\" ##  ## $inla.family ## [1] \"gaussian\" ##  ## $domain ## NULL ##  ## $used ## Used effects : field ## Used latent  :  ##  ## $allow_combine ## [1] FALSE ##  ## $control.family ## NULL ##  ## $drange ## $drange$y ## [1] -1.469747  3.076080 ##  ##  ## attr(,\"class\") ## [1] \"bru_like\" \"list\"     ##  ## attr(,\"class\") ## [1] \"bru_like_list\" \"list\"          ## [1] \"Time:\" ## Time difference of 6.020064 secs ## [[1]] ## $family ## [1] \"gaussian\" ##  ## $formula ## y ~ . ## <environment: 0x55d6afd64a98> ##  ## $response_data ## $response_data$BRU_response ##   [1]  1.5374384496  2.4784371624 -1.4697469269  2.2660738319  0.0891323305 ##   [6]  0.4107074316  2.0013010075  0.2444013318 -0.6589689843  1.3103623454 ##  [11]  0.6986495286  1.1483198530  1.2963476414  2.5610335069  0.4261117342 ##  [16]  1.2872090466  1.5384335160 -0.0945986304  0.2627751753 -0.7426957927 ##  [21]  0.5100312939  1.0491793810  0.2252735154  0.0457342110 -0.0142939462 ##  [26]  1.9887446938  1.4825073703  2.3755654010 -0.3574352472  1.6427366595 ##  [31]  1.3296347014 -0.0024886837  0.0974233661  2.3689520022 -0.0006209654 ##  [36]  0.3055075621 -0.6633833414  0.9270318431  0.6111675095  0.0294475967 ##  [41]  0.1177695202  0.0133957092  0.8663405042  1.7463856315  0.1100284745 ##  [46]  0.0006467918  2.2887683256  1.7174514475 -0.0797455108  2.5373883140 ##  [51]  1.4965863978  1.3935523424 -0.7415585220  0.4538356464 -0.0449025706 ##  [56]  0.4715554886  0.6852309527  0.6811530069  2.1130617434 -0.1393513590 ##  [61]  1.5005172456  0.9520778746  0.0188969995  0.1410569205  1.4911590485 ##  [66]  0.3001542539  0.8494503300 -0.2823511613  0.0011067876  1.2655135138 ##  [71]  1.3631643111  3.0424718703  0.2172431826  1.1527376773  1.2082638906 ##  [76]  0.0818240571  0.4414046771  0.9517304875  0.2563988472  2.1922190936 ##  [81] -0.7670771055 -0.3050926664  1.1281971531  2.1938022768  2.8655361788 ##  [86]  1.5903791612 -0.0474320080  1.0851325547  0.6379348398  0.2214363677 ##  [91]  2.2675835467  2.0684679577 -0.5199408157  0.1255301487  2.4889766752 ##  [96] -0.1162922867 -0.8920458112  1.2494583521  0.0226624203  0.6934784555 ## [101]  1.5497719217  0.5665203039  1.8632271096  0.9058215384  1.8675396257 ## [106]  1.7118369191  0.5017929706 -0.0561288210  0.2198228103  2.1270479473 ## [111]  0.2484250884  0.2102031710  0.3196198070 -0.2515045084  1.4041525222 ## [116]  2.1621779159 -0.3487977502  1.1909537111  3.0760798038  0.1224504968 ##  ## $response_data$BRU_E ## [1] 1 ##  ## $response_data$BRU_Ntrials ## [1] 1 ##  ## $response_data$BRU_scale ## [1] 1 ##  ##  ## $data ##                coordinates             y ## 1     (8.594981, 2.680497)  1.5374384496 ## 5     (7.662535, 1.354513)  2.4784371624 ## 7     (9.251893, 1.280585) -1.4697469269 ## 13    (7.394178, 1.877395)  2.2660738319 ## 22    (5.420688, 3.962653)  0.0891323305 ## 34    (6.415449, 4.470381)  0.4107074316 ## 37     (7.305513, 1.54024)  2.0013010075 ## 45     (3.0784, 0.6510523)  0.2444013318 ## 52   (0.2566116, 3.952345) -0.6589689843 ## 53     (7.553331, 4.20413)  1.3103623454 ## 58    (9.100522, 3.845274)  0.6986495286 ## 72    (8.565509, 2.001331)  1.1483198530 ## 73    (1.839418, 4.983126)  1.2963476414 ## 74     (5.054748, 2.21294)  2.5610335069 ## 79   (2.701634, 0.5726394)  0.4261117342 ## 92     (7.785768, 2.95715)  1.2872090466 ## 93    (8.593795, 3.974606)  1.5384335160 ## 99     (0.37575, 3.037941) -0.0945986304 ## 100  (4.102906, 0.9819229)  0.2627751753 ## 103   (1.336778, 3.192196) -0.7426957927 ## 104   (4.794563, 4.287101)  0.5100312939 ## 106   (4.899329, 3.021572)  1.0491793810 ## 108   (5.009973, 3.734563)  0.2252735154 ## 113 (0.1885503, 0.4932166)  0.0457342110 ## 114 (0.3681457, 0.1656634) -0.0142939462 ## 116   (7.900359, 2.688549)  1.9887446938 ## 117    (7.35261, 4.109116)  1.4825073703 ## 119    (8.053664, 2.34125)  2.3755654010 ## 127     (9.5896, 1.551667) -0.3574352472 ## 132    (8.51408, 2.621992)  1.6427366595 ## 133   (6.247239, 3.774221)  1.3296347014 ## 135   (1.437549, 2.383648) -0.0024886837 ## 138   (3.386237, 2.467673)  0.0974233661 ## 140   (4.939354, 2.560598)  2.3689520022 ## 142  (9.184151, 0.3800263) -0.0006209654 ## 148   (2.952294, 3.798363)  0.3055075621 ## 151   (3.623513, 4.745853) -0.6633833414 ## 155    (6.47497, 4.965168)  0.9270318431 ## 162 (0.04170842, 1.677276)  0.6111675095 ## 168  (4.392328, 0.2553791)  0.0294475967 ## 172   (1.315296, 2.019908)  0.1177695202 ## 173  (4.945315, 0.1631137)  0.0133957092 ## 179   (7.133719, 3.664549)  0.8663405042 ## 183   (6.638664, 1.904938)  1.7463856315 ## 188   (2.549621, 3.326859)  0.1100284745 ## 190    (4.69608, 4.517929)  0.0006467918 ## 193   (7.526312, 1.168505)  2.2887683256 ## 204  (7.602703, 0.4957661)  1.7174514475 ## 207   (2.704743, 4.364378) -0.0797455108 ## 210   (7.569693, 2.048543)  2.5373883140 ## 222    (8.667424, 2.82618)  1.4965863978 ## 227    (7.16385, 4.718297)  1.3935523424 ## 235 (0.06785675, 4.305523) -0.7415585220 ## 238   (7.932701, 4.649456)  0.4538356464 ## 241   (1.874595, 3.270571) -0.0449025706 ## 244   (2.723401, 1.910724)  0.4715554886 ## 247    (9.57917, 3.341107)  0.6852309527 ## 248   (1.786093, 1.459911)  0.6811530069 ## 257  (6.352767, 0.8679928)  2.1130617434 ## 262   (5.168083, 4.628116) -0.1393513590 ## 267   (8.52649, 0.9491271)  1.5005172456 ## 271  (8.736917, 0.1384069)  0.9520778746 ## 274   (5.782891, 4.970651)  0.0188969995 ## 277  (5.101238, 0.2210469)  0.1410569205 ## 287    (8.67415, 3.473783)  1.4911590485 ## 295   (1.040102, 3.784912)  0.3001542539 ## 301   (1.444304, 4.755057)  0.8494503300 ## 305   (2.394938, 3.667676) -0.2823511613 ## 309   (1.650989, 3.581076)  0.0011067876 ## 316   (8.794302, 3.532642)  1.2655135138 ## 339   (8.706238, 2.977778)  1.3631643111 ## 347  (6.725699, 0.5021193)  3.0424718703 ## 364  (0.7799563, 4.120957)  0.2172431826 ## 365   (8.722578, 3.133491)  1.1527376773 ## 370   (7.692295, 3.866935)  1.2082638906 ## 372   (1.621181, 4.133781)  0.0818240571 ## 375  (2.524803, 0.2331395)  0.4414046771 ## 382    (8.446514, 4.54166)  0.9517304875 ## 388  (3.266905, 0.6505034)  0.2563988472 ## 394   (7.667077, 2.524956)  2.1922190936 ## 395   (9.380045, 4.652021) -0.7670771055 ## 419   (0.49568, 0.3689271) -0.3050926664 ## 420   (6.385012, 3.584249)  1.1281971531 ## 421   (4.938933, 1.214062)  2.1938022768 ## 425   (5.184723, 2.425385)  2.8655361788 ## 427    (6.776022, 4.09754)  1.5903791612 ## 428    (5.13768, 3.827838) -0.0474320080 ## 440   (8.789817, 4.818154)  1.0851325547 ## 442   (3.210356, 3.373614)  0.6379348398 ## 443   (4.126111, 2.030218)  0.2214363677 ## 448   (6.101503, 2.605235)  2.2675835467 ## 450   (6.620642, 2.508676)  2.0684679577 ## 452   (9.922463, 1.174754) -0.5199408157 ## 463   (1.07915, 0.1059277)  0.1255301487 ## 470    (5.676537, 1.09235)  2.4889766752 ## 474   (5.301142, 4.777785) -0.1162922867 ## 475   (9.556354, 1.116005) -0.8920458112 ## 483   (7.692362, 3.794863)  1.2494583521 ## 484   (9.105274, 1.722987)  0.0226624203 ## 486   (0.974121, 1.015628)  0.6934784555 ## 490   (6.712682, 1.651357)  1.5497719217 ## 506   (9.655488, 2.738529)  0.5665203039 ## 512  (5.680321, 0.5106848)  1.8632271096 ## 513 (4.075126, 0.07329848)  0.9058215384 ## 514  (5.797955, 0.4818001)  1.8675396257 ## 519   (8.085036, 2.813951)  1.7118369191 ## 536    (4.621371, 3.24756)  0.5017929706 ## 547   (6.314306, 4.658269) -0.0561288210 ## 548    (9.64617, 2.363611)  0.2198228103 ## 554   (6.694261, 2.627189)  2.1270479473 ## 562   (1.531332, 0.438622)  0.2484250884 ## 573   (2.906453, 3.100389)  0.2102031710 ## 574  (3.056277, 0.2753938)  0.3196198070 ## 581   (3.835713, 4.001397) -0.2515045084 ## 586   (8.321681, 3.618737)  1.4041525222 ## 587  (6.979652, 0.7663116)  2.1621779159 ## 592   (9.682872, 1.397534) -0.3487977502 ## 594   (7.440786, 4.783676)  1.1909537111 ## 597   (5.206548, 2.042345)  3.0760798038 ## 599  (4.767034, 0.1971005)  0.1224504968 ##  ## $E ## [1] 1 ##  ## $Ntrials ## [1] 1 ##  ## $weights ## [1] 1 ##  ## $scale ## [1] 1 ##  ## $samplers ## NULL ##  ## $linear ## [1] TRUE ##  ## $expr ## NULL ##  ## $response ## [1] \"BRU_response\" ##  ## $inla.family ## [1] \"gaussian\" ##  ## $domain ## NULL ##  ## $used ## Used effects : field ## Used latent  :  ##  ## $allow_combine ## [1] FALSE ##  ## $control.family ## NULL ##  ## $drange ## $drange$y ## [1] -1.469747  3.076080 ##  ##  ## attr(,\"class\") ## [1] \"bru_like\" \"list\"     ##  ## attr(,\"class\") ## [1] \"bru_like_list\" \"list\"          ## [1] \"Time:\" ## Time difference of 18.67303 secs ## [[1]] ## $family ## [1] \"gaussian\" ##  ## $formula ## y ~ . ## <environment: 0x55d6c268c288> ##  ## $response_data ## $response_data$BRU_response ##   [1] -1.469746927  1.372753966  0.463514482 -0.055182128  2.468704043 ##   [6]  0.823345210  0.202884459  1.564863325  1.223032690  1.296347641 ##  [11]  1.837909542 -0.252083025  2.327701531 -0.094598630  0.151701252 ##  [16]  0.340569663  0.833663088  0.169981114 -0.014293946  2.126208038 ##  [21] -0.237818884 -0.002488684  2.510227879  1.835641762  0.305507562 ##  [26]  1.647161398  0.031834879  0.529099422  0.897507421  2.179083938 ##  [31]  0.223360826  0.895761519  0.655889613  1.969369813  1.871143587 ##  [36]  1.476352170 -0.643248828  0.333763142 -0.430752041  1.496586398 ##  [41]  1.814282447  1.707415384 -0.741558522 -0.044902571  0.199575961 ##  [46] -0.055194375  0.422081265 -0.716346788  1.053560186  2.424573040 ##  [51]  1.462818269  0.495113838  0.066484661 -0.206305396  2.961016325 ##  [56]  1.005545832  3.331186442  0.165811289 -0.177577339  0.102908479 ##  [61]  0.057728937  0.301161570  0.208379234  0.217243183  0.541259115 ##  [66]  0.514175826  0.458503197  0.441404677  2.195012981  0.358940192 ##  [71]  2.192219094  1.814283271  2.923191311  0.901329951  0.617926030 ##  [76]  2.193802277  1.590379161 -0.390410349 -0.539097821  0.053004527 ##  [81]  0.350546293  0.637934840 -0.121093030  1.697990106  2.068467958 ##  [86] -0.519940816  0.750194263  1.830729308  0.474843207  2.488976675 ##  [91] -0.314792993  0.854082385 -0.116292287 -0.892045811  0.319249401 ##  [96]  1.249458352 -0.130640033 -0.008826203  2.011192079  2.039368467 ## [101]  0.180755009  2.198411414  1.061093801  0.209238672  1.711836919 ## [106]  0.457824996  0.082717309  0.211362761  0.360440714  0.154064082 ## [111]  0.941493713  0.609553933  0.289906656  1.373366421  1.806665720 ## [116]  1.324032692  1.266757597  0.083250505  1.895984647  1.348353598 ##  ## $response_data$BRU_E ## [1] 1 ##  ## $response_data$BRU_Ntrials ## [1] 1 ##  ## $response_data$BRU_scale ## [1] 1 ##  ##  ## $data ##                coordinates            y ## 7     (9.251893, 1.280585) -1.469746927 ## 11    (9.266492, 2.840033)  1.372753966 ## 15    (2.486299, 3.121862)  0.463514482 ## 35     (9.79422, 1.978052) -0.055182128 ## 47    (6.133916, 2.230922)  2.468704043 ## 56    (1.194358, 1.263909)  0.823345210 ## 59    (2.589966, 1.384391)  0.202884459 ## 62    (4.392852, 2.386175)  1.564863325 ## 64   (8.66154, 0.07034407)  1.223032690 ## 73    (1.839418, 4.983126)  1.296347641 ## 88    (8.412401, 0.798832)  1.837909542 ## 89    (3.125102, 3.007179) -0.252083025 ## 96   (5.916809, 0.6519829)  2.327701531 ## 99     (0.37575, 3.037941) -0.094598630 ## 101   (3.652162, 1.408331)  0.151701252 ## 102  (4.765848, 0.4044027)  0.340569663 ## 107   (9.060612, 3.315835)  0.833663088 ## 110  (0.5791003, 1.036138)  0.169981114 ## 114 (0.3681457, 0.1656634) -0.014293946 ## 124   (7.809509, 1.068102)  2.126208038 ## 129   (2.122513, 3.538558) -0.237818884 ## 135   (1.437549, 2.383648) -0.002488684 ## 139   (5.13313, 0.9758311)  2.510227879 ## 145   (8.074389, 1.639138)  1.835641762 ## 148   (2.952294, 3.798363)  0.305507562 ## 149   (8.676238, 2.652245)  1.647161398 ## 156   (3.439523, 2.038872)  0.031834879 ## 163   (2.809017, 1.282038)  0.529099422 ## 169   (9.583845, 3.296534)  0.897507421 ## 171    (7.853446, 1.60167)  2.179083938 ## 185    (2.753324, 2.19885)  0.223360826 ## 194   (2.438755, 2.157226)  0.895761519 ## 203   (9.742097, 2.896811)  0.655889613 ## 208   (6.07255, 0.9942085)  1.969369813 ## 213   (7.704936, 0.968206)  1.871143587 ## 214   (8.826984, 3.600317)  1.476352170 ## 216   (3.240051, 4.906171) -0.643248828 ## 217  (1.786597, 0.1291328)  0.333763142 ## 218   (1.498501, 2.546066) -0.430752041 ## 222    (8.667424, 2.82618)  1.496586398 ## 228  (5.952019, 0.4625379)  1.814282447 ## 232  (8.006751, 0.5595053)  1.707415384 ## 235 (0.06785675, 4.305523) -0.741558522 ## 241   (1.874595, 3.270571) -0.044902571 ## 269   (4.085919, 3.174906)  0.199575961 ## 275   (3.338752, 3.902063) -0.055194375 ## 279   (1.42478, 0.5745941)  0.422081265 ## 290   (1.614027, 2.762526) -0.716346788 ## 296    (3.302644, 1.23206)  1.053560186 ## 314   (7.880802, 2.200437)  2.424573040 ## 323   (6.453924, 1.359498)  1.462818269 ## 335   (7.433871, 3.547134)  0.495113838 ## 337   (3.685227, 3.038229)  0.066484661 ## 343 (0.3957034, 0.3799773) -0.206305396 ## 348  (6.822793, 0.5278166)  2.961016325 ## 350   (6.660371, 4.770125)  1.005545832 ## 351    (5.24006, 2.014899)  3.331186442 ## 353  (0.2618564, 2.241399)  0.165811289 ## 354   (1.300415, 2.168761) -0.177577339 ## 355   (5.019276, 4.813659)  0.102908479 ## 356   (5.109239, 3.706667)  0.057728937 ## 361  (1.525337, 0.3967622)  0.301161570 ## 362   (4.28908, 0.2965067)  0.208379234 ## 364  (0.7799563, 4.120957)  0.217243183 ## 366   (2.141775, 1.069482)  0.541259115 ## 367   (2.028375, 1.743929)  0.514175826 ## 368  (3.165539, 0.7068487)  0.458503197 ## 375  (2.524803, 0.2331395)  0.441404677 ## 378   (8.292433, 2.243757)  2.195012981 ## 380   (7.666086, 3.537253)  0.358940192 ## 394   (7.667077, 2.524956)  2.192219094 ## 402  (7.997346, 0.6748052)  1.814283271 ## 404  (6.967856, 0.4228904)  2.923191311 ## 405   (7.611821, 4.278237)  0.901329951 ## 414     (2.8942, 4.507411)  0.617926030 ## 421   (4.938933, 1.214062)  2.193802277 ## 427    (6.776022, 4.09754)  1.590379161 ## 429   (3.072225, 2.134001) -0.390410349 ## 430   (3.973893, 4.679858) -0.539097821 ## 431   (1.532962, 3.645054)  0.053004527 ## 439  (2.175135, 0.2185995)  0.350546293 ## 442   (3.210356, 3.373614)  0.637934840 ## 445    (6.291269, 4.64161) -0.121093030 ## 447   (9.017999, 2.747461)  1.697990106 ## 450   (6.620642, 2.508676)  2.068467958 ## 452   (9.922463, 1.174754) -0.519940816 ## 453   (2.585164, 1.817675)  0.750194263 ## 460   (8.445455, 2.250102)  1.830729308 ## 467  (2.946861, 0.2565029)  0.474843207 ## 470    (5.676537, 1.09235)  2.488976675 ## 471    (2.48399, 2.618035) -0.314792993 ## 472    (1.34266, 1.649327)  0.854082385 ## 474   (5.301142, 4.777785) -0.116292287 ## 475   (9.556354, 1.116005) -0.892045811 ## 480   (2.660705, 1.382302)  0.319249401 ## 483   (7.692362, 3.794863)  1.249458352 ## 487  (9.455901, 0.2766176) -0.130640033 ## 491     (4.183216, 4.2625) -0.008826203 ## 494  (5.940315, 0.5918995)  2.011192079 ## 500   (4.558299, 2.526379)  2.039368467 ## 503  (0.0994651, 3.900551)  0.180755009 ## 504   (6.555589, 2.533826)  2.198411414 ## 507   (4.471439, 1.792583)  1.061093801 ## 511   (9.472872, 2.282848)  0.209238672 ## 519   (8.085036, 2.813951)  1.711836919 ## 524     (4.8957, 3.862456)  0.457824996 ## 527   (1.714286, 3.745808)  0.082717309 ## 529    (9.060211, 4.91211)  0.211362761 ## 532    (9.29565, 2.124611)  0.360440714 ## 539   (1.338962, 2.437735)  0.154064082 ## 552    (4.55767, 3.017612)  0.941493713 ## 555    (3.496973, 1.19302)  0.609553933 ## 563   (3.441233, 3.281966)  0.289906656 ## 567    (8.63191, 1.377026)  1.373366421 ## 571   (5.278135, 3.093516)  1.806665720 ## 579   (8.334271, 2.787907)  1.324032692 ## 584   (6.875753, 1.128986)  1.266757597 ## 588   (5.248418, 4.265039)  0.083250505 ## 593   (5.245938, 2.986664)  1.895984647 ## 595  (7.958217, 0.2922243)  1.348353598 ##  ## $E ## [1] 1 ##  ## $Ntrials ## [1] 1 ##  ## $weights ## [1] 1 ##  ## $scale ## [1] 1 ##  ## $samplers ## NULL ##  ## $linear ## [1] TRUE ##  ## $expr ## NULL ##  ## $response ## [1] \"BRU_response\" ##  ## $inla.family ## [1] \"gaussian\" ##  ## $domain ## NULL ##  ## $used ## Used effects : field ## Used latent  :  ##  ## $allow_combine ## [1] FALSE ##  ## $control.family ## NULL ##  ## $drange ## $drange$y ## [1] -1.469747  3.331186 ##  ##  ## attr(,\"class\") ## [1] \"bru_like\" \"list\"     ##  ## attr(,\"class\") ## [1] \"bru_like_list\" \"list\"          ## [1] \"Time:\" ## Time difference of 7.14661 secs ## [[1]] ## $family ## [1] \"gaussian\" ##  ## $formula ## y ~ . ## <environment: 0x55d6afd64a98> ##  ## $response_data ## $response_data$BRU_response ##   [1] -1.469746927  1.372753966  0.463514482 -0.055182128  2.468704043 ##   [6]  0.823345210  0.202884459  1.564863325  1.223032690  1.296347641 ##  [11]  1.837909542 -0.252083025  2.327701531 -0.094598630  0.151701252 ##  [16]  0.340569663  0.833663088  0.169981114 -0.014293946  2.126208038 ##  [21] -0.237818884 -0.002488684  2.510227879  1.835641762  0.305507562 ##  [26]  1.647161398  0.031834879  0.529099422  0.897507421  2.179083938 ##  [31]  0.223360826  0.895761519  0.655889613  1.969369813  1.871143587 ##  [36]  1.476352170 -0.643248828  0.333763142 -0.430752041  1.496586398 ##  [41]  1.814282447  1.707415384 -0.741558522 -0.044902571  0.199575961 ##  [46] -0.055194375  0.422081265 -0.716346788  1.053560186  2.424573040 ##  [51]  1.462818269  0.495113838  0.066484661 -0.206305396  2.961016325 ##  [56]  1.005545832  3.331186442  0.165811289 -0.177577339  0.102908479 ##  [61]  0.057728937  0.301161570  0.208379234  0.217243183  0.541259115 ##  [66]  0.514175826  0.458503197  0.441404677  2.195012981  0.358940192 ##  [71]  2.192219094  1.814283271  2.923191311  0.901329951  0.617926030 ##  [76]  2.193802277  1.590379161 -0.390410349 -0.539097821  0.053004527 ##  [81]  0.350546293  0.637934840 -0.121093030  1.697990106  2.068467958 ##  [86] -0.519940816  0.750194263  1.830729308  0.474843207  2.488976675 ##  [91] -0.314792993  0.854082385 -0.116292287 -0.892045811  0.319249401 ##  [96]  1.249458352 -0.130640033 -0.008826203  2.011192079  2.039368467 ## [101]  0.180755009  2.198411414  1.061093801  0.209238672  1.711836919 ## [106]  0.457824996  0.082717309  0.211362761  0.360440714  0.154064082 ## [111]  0.941493713  0.609553933  0.289906656  1.373366421  1.806665720 ## [116]  1.324032692  1.266757597  0.083250505  1.895984647  1.348353598 ##  ## $response_data$BRU_E ## [1] 1 ##  ## $response_data$BRU_Ntrials ## [1] 1 ##  ## $response_data$BRU_scale ## [1] 1 ##  ##  ## $data ##                coordinates            y ## 7     (9.251893, 1.280585) -1.469746927 ## 11    (9.266492, 2.840033)  1.372753966 ## 15    (2.486299, 3.121862)  0.463514482 ## 35     (9.79422, 1.978052) -0.055182128 ## 47    (6.133916, 2.230922)  2.468704043 ## 56    (1.194358, 1.263909)  0.823345210 ## 59    (2.589966, 1.384391)  0.202884459 ## 62    (4.392852, 2.386175)  1.564863325 ## 64   (8.66154, 0.07034407)  1.223032690 ## 73    (1.839418, 4.983126)  1.296347641 ## 88    (8.412401, 0.798832)  1.837909542 ## 89    (3.125102, 3.007179) -0.252083025 ## 96   (5.916809, 0.6519829)  2.327701531 ## 99     (0.37575, 3.037941) -0.094598630 ## 101   (3.652162, 1.408331)  0.151701252 ## 102  (4.765848, 0.4044027)  0.340569663 ## 107   (9.060612, 3.315835)  0.833663088 ## 110  (0.5791003, 1.036138)  0.169981114 ## 114 (0.3681457, 0.1656634) -0.014293946 ## 124   (7.809509, 1.068102)  2.126208038 ## 129   (2.122513, 3.538558) -0.237818884 ## 135   (1.437549, 2.383648) -0.002488684 ## 139   (5.13313, 0.9758311)  2.510227879 ## 145   (8.074389, 1.639138)  1.835641762 ## 148   (2.952294, 3.798363)  0.305507562 ## 149   (8.676238, 2.652245)  1.647161398 ## 156   (3.439523, 2.038872)  0.031834879 ## 163   (2.809017, 1.282038)  0.529099422 ## 169   (9.583845, 3.296534)  0.897507421 ## 171    (7.853446, 1.60167)  2.179083938 ## 185    (2.753324, 2.19885)  0.223360826 ## 194   (2.438755, 2.157226)  0.895761519 ## 203   (9.742097, 2.896811)  0.655889613 ## 208   (6.07255, 0.9942085)  1.969369813 ## 213   (7.704936, 0.968206)  1.871143587 ## 214   (8.826984, 3.600317)  1.476352170 ## 216   (3.240051, 4.906171) -0.643248828 ## 217  (1.786597, 0.1291328)  0.333763142 ## 218   (1.498501, 2.546066) -0.430752041 ## 222    (8.667424, 2.82618)  1.496586398 ## 228  (5.952019, 0.4625379)  1.814282447 ## 232  (8.006751, 0.5595053)  1.707415384 ## 235 (0.06785675, 4.305523) -0.741558522 ## 241   (1.874595, 3.270571) -0.044902571 ## 269   (4.085919, 3.174906)  0.199575961 ## 275   (3.338752, 3.902063) -0.055194375 ## 279   (1.42478, 0.5745941)  0.422081265 ## 290   (1.614027, 2.762526) -0.716346788 ## 296    (3.302644, 1.23206)  1.053560186 ## 314   (7.880802, 2.200437)  2.424573040 ## 323   (6.453924, 1.359498)  1.462818269 ## 335   (7.433871, 3.547134)  0.495113838 ## 337   (3.685227, 3.038229)  0.066484661 ## 343 (0.3957034, 0.3799773) -0.206305396 ## 348  (6.822793, 0.5278166)  2.961016325 ## 350   (6.660371, 4.770125)  1.005545832 ## 351    (5.24006, 2.014899)  3.331186442 ## 353  (0.2618564, 2.241399)  0.165811289 ## 354   (1.300415, 2.168761) -0.177577339 ## 355   (5.019276, 4.813659)  0.102908479 ## 356   (5.109239, 3.706667)  0.057728937 ## 361  (1.525337, 0.3967622)  0.301161570 ## 362   (4.28908, 0.2965067)  0.208379234 ## 364  (0.7799563, 4.120957)  0.217243183 ## 366   (2.141775, 1.069482)  0.541259115 ## 367   (2.028375, 1.743929)  0.514175826 ## 368  (3.165539, 0.7068487)  0.458503197 ## 375  (2.524803, 0.2331395)  0.441404677 ## 378   (8.292433, 2.243757)  2.195012981 ## 380   (7.666086, 3.537253)  0.358940192 ## 394   (7.667077, 2.524956)  2.192219094 ## 402  (7.997346, 0.6748052)  1.814283271 ## 404  (6.967856, 0.4228904)  2.923191311 ## 405   (7.611821, 4.278237)  0.901329951 ## 414     (2.8942, 4.507411)  0.617926030 ## 421   (4.938933, 1.214062)  2.193802277 ## 427    (6.776022, 4.09754)  1.590379161 ## 429   (3.072225, 2.134001) -0.390410349 ## 430   (3.973893, 4.679858) -0.539097821 ## 431   (1.532962, 3.645054)  0.053004527 ## 439  (2.175135, 0.2185995)  0.350546293 ## 442   (3.210356, 3.373614)  0.637934840 ## 445    (6.291269, 4.64161) -0.121093030 ## 447   (9.017999, 2.747461)  1.697990106 ## 450   (6.620642, 2.508676)  2.068467958 ## 452   (9.922463, 1.174754) -0.519940816 ## 453   (2.585164, 1.817675)  0.750194263 ## 460   (8.445455, 2.250102)  1.830729308 ## 467  (2.946861, 0.2565029)  0.474843207 ## 470    (5.676537, 1.09235)  2.488976675 ## 471    (2.48399, 2.618035) -0.314792993 ## 472    (1.34266, 1.649327)  0.854082385 ## 474   (5.301142, 4.777785) -0.116292287 ## 475   (9.556354, 1.116005) -0.892045811 ## 480   (2.660705, 1.382302)  0.319249401 ## 483   (7.692362, 3.794863)  1.249458352 ## 487  (9.455901, 0.2766176) -0.130640033 ## 491     (4.183216, 4.2625) -0.008826203 ## 494  (5.940315, 0.5918995)  2.011192079 ## 500   (4.558299, 2.526379)  2.039368467 ## 503  (0.0994651, 3.900551)  0.180755009 ## 504   (6.555589, 2.533826)  2.198411414 ## 507   (4.471439, 1.792583)  1.061093801 ## 511   (9.472872, 2.282848)  0.209238672 ## 519   (8.085036, 2.813951)  1.711836919 ## 524     (4.8957, 3.862456)  0.457824996 ## 527   (1.714286, 3.745808)  0.082717309 ## 529    (9.060211, 4.91211)  0.211362761 ## 532    (9.29565, 2.124611)  0.360440714 ## 539   (1.338962, 2.437735)  0.154064082 ## 552    (4.55767, 3.017612)  0.941493713 ## 555    (3.496973, 1.19302)  0.609553933 ## 563   (3.441233, 3.281966)  0.289906656 ## 567    (8.63191, 1.377026)  1.373366421 ## 571   (5.278135, 3.093516)  1.806665720 ## 579   (8.334271, 2.787907)  1.324032692 ## 584   (6.875753, 1.128986)  1.266757597 ## 588   (5.248418, 4.265039)  0.083250505 ## 593   (5.245938, 2.986664)  1.895984647 ## 595  (7.958217, 0.2922243)  1.348353598 ##  ## $E ## [1] 1 ##  ## $Ntrials ## [1] 1 ##  ## $weights ## [1] 1 ##  ## $scale ## [1] 1 ##  ## $samplers ## NULL ##  ## $linear ## [1] TRUE ##  ## $expr ## NULL ##  ## $response ## [1] \"BRU_response\" ##  ## $inla.family ## [1] \"gaussian\" ##  ## $domain ## NULL ##  ## $used ## Used effects : field ## Used latent  :  ##  ## $allow_combine ## [1] FALSE ##  ## $control.family ## NULL ##  ## $drange ## $drange$y ## [1] -1.469747  3.331186 ##  ##  ## attr(,\"class\") ## [1] \"bru_like\" \"list\"     ##  ## attr(,\"class\") ## [1] \"bru_like_list\" \"list\"          ## [1] \"Time:\" ## Time difference of 9.778755 secs ## [[1]] ## $family ## [1] \"gaussian\" ##  ## $formula ## y ~ . ## <environment: 0x55d6c268c288> ##  ## $response_data ## $response_data$BRU_response ##   [1]  0.56697452  0.11049851 -0.16292082  2.43810372 -0.60222911  0.41070743 ##   [7] -0.08667781  1.22141454  1.31036235  0.20288446  1.56486332  1.22303269 ##  [13] -0.65698980  1.38857798  1.14831985  1.35773358  1.28720905 -0.06575674 ##  [19]  0.26277518  1.04917938  2.22533291  1.98874469 -0.35743525  1.13305590 ##  [25]  0.09742337  2.36895200  0.86517636  1.64716140 -0.47319088  0.92703184 ##  [31]  0.03183488  0.03912215 -0.27549393  0.89750742  0.11776952  1.95429835 ##  [37]  0.86634050 -0.48897555  1.80422367  1.18070135  2.28876833 -0.43908244 ##  [43] -1.21552417 -0.07974551  1.96936981  2.53738831 -0.29085016 -0.64324883 ##  [49]  0.45265241  1.24374312  1.81428245  2.26586225  1.55484617  1.68802539 ##  [55]  2.00225544  0.68115301  2.04747359 -0.24264855  1.12935373 -0.71634679 ##  [61]  2.29033349 -0.01754597  1.00833313  0.53465341  0.25804461  2.42457304 ##  [67]  0.91838910  0.34278400  0.04794750  2.49443746  3.01904751  1.36316431 ##  [73] -0.20630540  1.27605281  1.00554583  0.21724318 -0.11308102 -0.08909496 ##  [79]  2.19501298  0.13167788  1.81428327  2.92319131  0.47626779 -0.93257845 ##  [85]  1.59037916 -0.04743201  0.21257547  2.26758355 -0.01634806  0.64878149 ##  [91]  2.34210110  0.79628833  1.60298423 -0.38466716 -0.90481734  2.48897668 ##  [97] -0.31479299  2.26545109 -0.13064003  1.54977192  1.80854703  0.75217350 ## [103]  2.03936847  2.19841141  0.49896036  0.53297570  0.28413485  0.30493218 ## [109]  0.45782500  0.40388428  0.25966103  0.50179297 -0.05612882  0.21982281 ## [115]  0.35070277 -0.39010383  0.21020317 -0.25150451  2.07611853 -0.34879775 ##  ## $response_data$BRU_E ## [1] 1 ##  ## $response_data$BRU_Ntrials ## [1] 1 ##  ## $response_data$BRU_scale ## [1] 1 ##  ##  ## $data ##                 coordinates           y ## 12     (2.316051, 1.865139)  0.56697452 ## 19    (2.405562, 0.3811053)  0.11049851 ## 20    (0.8679275, 3.450187) -0.16292082 ## 27     (4.902559, 1.948775)  2.43810372 ## 30      (9.79671, 4.340412) -0.60222911 ## 34     (6.415449, 4.470381)  0.41070743 ## 36      (9.72012, 1.982448) -0.08667781 ## 39      (6.634624, 3.63238)  1.22141454 ## 53      (7.553331, 4.20413)  1.31036235 ## 59     (2.589966, 1.384391)  0.20288446 ## 62     (4.392852, 2.386175)  1.56486332 ## 64    (8.66154, 0.07034407)  1.22303269 ## 66     (2.320934, 3.945037) -0.65698980 ## 71     (6.351936, 3.050798)  1.38857798 ## 72     (8.565509, 2.001331)  1.14831985 ## 85     (6.825709, 1.163768)  1.35773358 ## 92      (7.785768, 2.95715)  1.28720905 ## 95  (0.08806119, 0.5143986) -0.06575674 ## 100   (4.102906, 0.9819229)  0.26277518 ## 106    (4.899329, 3.021572)  1.04917938 ## 109    (7.035068, 2.232295)  2.22533291 ## 116    (7.900359, 2.688549)  1.98874469 ## 127      (9.5896, 1.551667) -0.35743525 ## 137    (8.737418, 3.046678)  1.13305590 ## 138    (3.386237, 2.467673)  0.09742337 ## 140    (4.939354, 2.560598)  2.36895200 ## 141    (7.934378, 4.429856)  0.86517636 ## 149    (8.676238, 2.652245)  1.64716140 ## 152    (9.970303, 2.874974) -0.47319088 ## 155     (6.47497, 4.965168)  0.92703184 ## 156    (3.439523, 2.038872)  0.03183488 ## 159      (2.672858, 2.8466)  0.03912215 ## 160  (0.6978112, 0.1516993) -0.27549393 ## 169    (9.583845, 3.296534)  0.89750742 ## 172    (1.315296, 2.019908)  0.11776952 ## 177    (4.662933, 2.045562)  1.95429835 ## 179    (7.133719, 3.664549)  0.86634050 ## 180   (0.5118592, 2.174813) -0.48897555 ## 182    (6.634763, 1.831506)  1.80422367 ## 184    (4.999037, 3.367738)  1.18070135 ## 193    (7.526312, 1.168505)  2.28876833 ## 197    (1.144203, 2.656874) -0.43908244 ## 199   (9.844768, 0.4520245) -1.21552417 ## 207    (2.704743, 4.364378) -0.07974551 ## 208    (6.07255, 0.9942085)  1.96936981 ## 210    (7.569693, 2.048543)  2.53738831 ## 215    (9.477757, 0.276064) -0.29085016 ## 216    (3.240051, 4.906171) -0.64324883 ## 219    (1.146435, 4.326072)  0.45265241 ## 224    (7.319565, 4.712902)  1.24374312 ## 228   (5.952019, 0.4625379)  1.81428245 ## 231   (6.386748, 0.7887602)  2.26586225 ## 236    (4.468248, 2.066052)  1.55484617 ## 240    (5.905503, 3.692743)  1.68802539 ## 242    (8.072817, 1.522355)  2.00225544 ## 248    (1.786093, 1.459911)  0.68115301 ## 260    (6.118998, 2.926033)  2.04747359 ## 264    (4.849054, 4.709686) -0.24264855 ## 283     (8.665013, 1.90649)  1.12935373 ## 290    (1.614027, 2.762526) -0.71634679 ## 291    (6.249395, 2.186026)  2.29033349 ## 292    (1.834092, 3.643435) -0.01754597 ## 303     (7.65929, 3.225072)  1.00833313 ## 306    (7.964013, 4.751293)  0.53465341 ## 307     (4.42731, 3.412852)  0.25804461 ## 314    (7.880802, 2.200437)  2.42457304 ## 317    (1.411296, 4.877799)  0.91838910 ## 318    (2.652453, 2.329161)  0.34278400 ## 322    (3.271248, 3.070252)  0.04794750 ## 326    (4.988129, 2.546501)  2.49443746 ## 332   (6.660556, 0.1104589)  3.01904751 ## 339    (8.706238, 2.977778)  1.36316431 ## 343  (0.3957034, 0.3799773) -0.20630540 ## 345   (4.602832, 0.8099203)  1.27605281 ## 350    (6.660371, 4.770125)  1.00554583 ## 364   (0.7799563, 4.120957)  0.21724318 ## 371    (5.730613, 4.548553) -0.11308102 ## 374    (9.219679, 1.882409) -0.08909496 ## 378    (8.292433, 2.243757)  2.19501298 ## 401    (2.429153, 2.787073)  0.13167788 ## 402   (7.997346, 0.6748052)  1.81428327 ## 404   (6.967856, 0.4228904)  2.92319131 ## 406   (2.737303, 0.2934272)  0.47626779 ## 422  (0.04706253, 4.222499) -0.93257845 ## 427     (6.776022, 4.09754)  1.59037916 ## 428     (5.13768, 3.827838) -0.04743201 ## 438     (3.70809, 1.733426)  0.21257547 ## 448    (6.101503, 2.605235)  2.26758355 ## 449    (6.306861, 4.634955) -0.01634806 ## 454     (2.908432, 4.46751)  0.64878149 ## 458   (8.399722, 0.4625542)  2.34210110 ## 459    (1.166877, 4.769912)  0.79628833 ## 465    (8.282394, 1.592013)  1.60298423 ## 466    (3.352673, 2.912942) -0.38466716 ## 468    (9.067707, 1.249281) -0.90481734 ## 470     (5.676537, 1.09235)  2.48897668 ## 471     (2.48399, 2.618035) -0.31479299 ## 479    (7.502298, 1.367884)  2.26545109 ## 487   (9.455901, 0.2766176) -0.13064003 ## 490    (6.712682, 1.651357)  1.54977192 ## 492  (7.535079, 0.02792054)  1.80854703 ## 496     (6.464812, 4.87927)  0.75217350 ## 500    (4.558299, 2.526379)  2.03936847 ## 504    (6.555589, 2.533826)  2.19841141 ## 510    (2.067254, 1.235869)  0.49896036 ## 515    (1.320147, 1.120956)  0.53297570 ## 517         (1.863, 4.2242)  0.28413485 ## 522    (1.384427, 3.852615)  0.30493218 ## 524      (4.8957, 3.862456)  0.45782500 ## 526    (4.563333, 3.158189)  0.40388428 ## 535    (2.593883, 2.224094)  0.25966103 ## 536     (4.621371, 3.24756)  0.50179297 ## 547    (6.314306, 4.658269) -0.05612882 ## 548     (9.64617, 2.363611)  0.21982281 ## 558    (4.512907, 3.821817)  0.35070277 ## 568    (4.128713, 4.176781) -0.39010383 ## 573    (2.906453, 3.100389)  0.21020317 ## 581    (3.835713, 4.001397) -0.25150451 ## 591   (8.240678, 0.2196268)  2.07611853 ## 592    (9.682872, 1.397534) -0.34879775 ##  ## $E ## [1] 1 ##  ## $Ntrials ## [1] 1 ##  ## $weights ## [1] 1 ##  ## $scale ## [1] 1 ##  ## $samplers ## NULL ##  ## $linear ## [1] TRUE ##  ## $expr ## NULL ##  ## $response ## [1] \"BRU_response\" ##  ## $inla.family ## [1] \"gaussian\" ##  ## $domain ## NULL ##  ## $used ## Used effects : field ## Used latent  :  ##  ## $allow_combine ## [1] FALSE ##  ## $control.family ## NULL ##  ## $drange ## $drange$y ## [1] -1.215524  3.019048 ##  ##  ## attr(,\"class\") ## [1] \"bru_like\" \"list\"     ##  ## attr(,\"class\") ## [1] \"bru_like_list\" \"list\"          ## [1] \"Time:\" ## Time difference of 5.8355 secs ## [[1]] ## $family ## [1] \"gaussian\" ##  ## $formula ## y ~ . ## <environment: 0x55d6afd64a98> ##  ## $response_data ## $response_data$BRU_response ##   [1]  0.56697452  0.11049851 -0.16292082  2.43810372 -0.60222911  0.41070743 ##   [7] -0.08667781  1.22141454  1.31036235  0.20288446  1.56486332  1.22303269 ##  [13] -0.65698980  1.38857798  1.14831985  1.35773358  1.28720905 -0.06575674 ##  [19]  0.26277518  1.04917938  2.22533291  1.98874469 -0.35743525  1.13305590 ##  [25]  0.09742337  2.36895200  0.86517636  1.64716140 -0.47319088  0.92703184 ##  [31]  0.03183488  0.03912215 -0.27549393  0.89750742  0.11776952  1.95429835 ##  [37]  0.86634050 -0.48897555  1.80422367  1.18070135  2.28876833 -0.43908244 ##  [43] -1.21552417 -0.07974551  1.96936981  2.53738831 -0.29085016 -0.64324883 ##  [49]  0.45265241  1.24374312  1.81428245  2.26586225  1.55484617  1.68802539 ##  [55]  2.00225544  0.68115301  2.04747359 -0.24264855  1.12935373 -0.71634679 ##  [61]  2.29033349 -0.01754597  1.00833313  0.53465341  0.25804461  2.42457304 ##  [67]  0.91838910  0.34278400  0.04794750  2.49443746  3.01904751  1.36316431 ##  [73] -0.20630540  1.27605281  1.00554583  0.21724318 -0.11308102 -0.08909496 ##  [79]  2.19501298  0.13167788  1.81428327  2.92319131  0.47626779 -0.93257845 ##  [85]  1.59037916 -0.04743201  0.21257547  2.26758355 -0.01634806  0.64878149 ##  [91]  2.34210110  0.79628833  1.60298423 -0.38466716 -0.90481734  2.48897668 ##  [97] -0.31479299  2.26545109 -0.13064003  1.54977192  1.80854703  0.75217350 ## [103]  2.03936847  2.19841141  0.49896036  0.53297570  0.28413485  0.30493218 ## [109]  0.45782500  0.40388428  0.25966103  0.50179297 -0.05612882  0.21982281 ## [115]  0.35070277 -0.39010383  0.21020317 -0.25150451  2.07611853 -0.34879775 ##  ## $response_data$BRU_E ## [1] 1 ##  ## $response_data$BRU_Ntrials ## [1] 1 ##  ## $response_data$BRU_scale ## [1] 1 ##  ##  ## $data ##                 coordinates           y ## 12     (2.316051, 1.865139)  0.56697452 ## 19    (2.405562, 0.3811053)  0.11049851 ## 20    (0.8679275, 3.450187) -0.16292082 ## 27     (4.902559, 1.948775)  2.43810372 ## 30      (9.79671, 4.340412) -0.60222911 ## 34     (6.415449, 4.470381)  0.41070743 ## 36      (9.72012, 1.982448) -0.08667781 ## 39      (6.634624, 3.63238)  1.22141454 ## 53      (7.553331, 4.20413)  1.31036235 ## 59     (2.589966, 1.384391)  0.20288446 ## 62     (4.392852, 2.386175)  1.56486332 ## 64    (8.66154, 0.07034407)  1.22303269 ## 66     (2.320934, 3.945037) -0.65698980 ## 71     (6.351936, 3.050798)  1.38857798 ## 72     (8.565509, 2.001331)  1.14831985 ## 85     (6.825709, 1.163768)  1.35773358 ## 92      (7.785768, 2.95715)  1.28720905 ## 95  (0.08806119, 0.5143986) -0.06575674 ## 100   (4.102906, 0.9819229)  0.26277518 ## 106    (4.899329, 3.021572)  1.04917938 ## 109    (7.035068, 2.232295)  2.22533291 ## 116    (7.900359, 2.688549)  1.98874469 ## 127      (9.5896, 1.551667) -0.35743525 ## 137    (8.737418, 3.046678)  1.13305590 ## 138    (3.386237, 2.467673)  0.09742337 ## 140    (4.939354, 2.560598)  2.36895200 ## 141    (7.934378, 4.429856)  0.86517636 ## 149    (8.676238, 2.652245)  1.64716140 ## 152    (9.970303, 2.874974) -0.47319088 ## 155     (6.47497, 4.965168)  0.92703184 ## 156    (3.439523, 2.038872)  0.03183488 ## 159      (2.672858, 2.8466)  0.03912215 ## 160  (0.6978112, 0.1516993) -0.27549393 ## 169    (9.583845, 3.296534)  0.89750742 ## 172    (1.315296, 2.019908)  0.11776952 ## 177    (4.662933, 2.045562)  1.95429835 ## 179    (7.133719, 3.664549)  0.86634050 ## 180   (0.5118592, 2.174813) -0.48897555 ## 182    (6.634763, 1.831506)  1.80422367 ## 184    (4.999037, 3.367738)  1.18070135 ## 193    (7.526312, 1.168505)  2.28876833 ## 197    (1.144203, 2.656874) -0.43908244 ## 199   (9.844768, 0.4520245) -1.21552417 ## 207    (2.704743, 4.364378) -0.07974551 ## 208    (6.07255, 0.9942085)  1.96936981 ## 210    (7.569693, 2.048543)  2.53738831 ## 215    (9.477757, 0.276064) -0.29085016 ## 216    (3.240051, 4.906171) -0.64324883 ## 219    (1.146435, 4.326072)  0.45265241 ## 224    (7.319565, 4.712902)  1.24374312 ## 228   (5.952019, 0.4625379)  1.81428245 ## 231   (6.386748, 0.7887602)  2.26586225 ## 236    (4.468248, 2.066052)  1.55484617 ## 240    (5.905503, 3.692743)  1.68802539 ## 242    (8.072817, 1.522355)  2.00225544 ## 248    (1.786093, 1.459911)  0.68115301 ## 260    (6.118998, 2.926033)  2.04747359 ## 264    (4.849054, 4.709686) -0.24264855 ## 283     (8.665013, 1.90649)  1.12935373 ## 290    (1.614027, 2.762526) -0.71634679 ## 291    (6.249395, 2.186026)  2.29033349 ## 292    (1.834092, 3.643435) -0.01754597 ## 303     (7.65929, 3.225072)  1.00833313 ## 306    (7.964013, 4.751293)  0.53465341 ## 307     (4.42731, 3.412852)  0.25804461 ## 314    (7.880802, 2.200437)  2.42457304 ## 317    (1.411296, 4.877799)  0.91838910 ## 318    (2.652453, 2.329161)  0.34278400 ## 322    (3.271248, 3.070252)  0.04794750 ## 326    (4.988129, 2.546501)  2.49443746 ## 332   (6.660556, 0.1104589)  3.01904751 ## 339    (8.706238, 2.977778)  1.36316431 ## 343  (0.3957034, 0.3799773) -0.20630540 ## 345   (4.602832, 0.8099203)  1.27605281 ## 350    (6.660371, 4.770125)  1.00554583 ## 364   (0.7799563, 4.120957)  0.21724318 ## 371    (5.730613, 4.548553) -0.11308102 ## 374    (9.219679, 1.882409) -0.08909496 ## 378    (8.292433, 2.243757)  2.19501298 ## 401    (2.429153, 2.787073)  0.13167788 ## 402   (7.997346, 0.6748052)  1.81428327 ## 404   (6.967856, 0.4228904)  2.92319131 ## 406   (2.737303, 0.2934272)  0.47626779 ## 422  (0.04706253, 4.222499) -0.93257845 ## 427     (6.776022, 4.09754)  1.59037916 ## 428     (5.13768, 3.827838) -0.04743201 ## 438     (3.70809, 1.733426)  0.21257547 ## 448    (6.101503, 2.605235)  2.26758355 ## 449    (6.306861, 4.634955) -0.01634806 ## 454     (2.908432, 4.46751)  0.64878149 ## 458   (8.399722, 0.4625542)  2.34210110 ## 459    (1.166877, 4.769912)  0.79628833 ## 465    (8.282394, 1.592013)  1.60298423 ## 466    (3.352673, 2.912942) -0.38466716 ## 468    (9.067707, 1.249281) -0.90481734 ## 470     (5.676537, 1.09235)  2.48897668 ## 471     (2.48399, 2.618035) -0.31479299 ## 479    (7.502298, 1.367884)  2.26545109 ## 487   (9.455901, 0.2766176) -0.13064003 ## 490    (6.712682, 1.651357)  1.54977192 ## 492  (7.535079, 0.02792054)  1.80854703 ## 496     (6.464812, 4.87927)  0.75217350 ## 500    (4.558299, 2.526379)  2.03936847 ## 504    (6.555589, 2.533826)  2.19841141 ## 510    (2.067254, 1.235869)  0.49896036 ## 515    (1.320147, 1.120956)  0.53297570 ## 517         (1.863, 4.2242)  0.28413485 ## 522    (1.384427, 3.852615)  0.30493218 ## 524      (4.8957, 3.862456)  0.45782500 ## 526    (4.563333, 3.158189)  0.40388428 ## 535    (2.593883, 2.224094)  0.25966103 ## 536     (4.621371, 3.24756)  0.50179297 ## 547    (6.314306, 4.658269) -0.05612882 ## 548     (9.64617, 2.363611)  0.21982281 ## 558    (4.512907, 3.821817)  0.35070277 ## 568    (4.128713, 4.176781) -0.39010383 ## 573    (2.906453, 3.100389)  0.21020317 ## 581    (3.835713, 4.001397) -0.25150451 ## 591   (8.240678, 0.2196268)  2.07611853 ## 592    (9.682872, 1.397534) -0.34879775 ##  ## $E ## [1] 1 ##  ## $Ntrials ## [1] 1 ##  ## $weights ## [1] 1 ##  ## $scale ## [1] 1 ##  ## $samplers ## NULL ##  ## $linear ## [1] TRUE ##  ## $expr ## NULL ##  ## $response ## [1] \"BRU_response\" ##  ## $inla.family ## [1] \"gaussian\" ##  ## $domain ## NULL ##  ## $used ## Used effects : field ## Used latent  :  ##  ## $allow_combine ## [1] FALSE ##  ## $control.family ## NULL ##  ## $drange ## $drange$y ## [1] -1.215524  3.019048 ##  ##  ## attr(,\"class\") ## [1] \"bru_like\" \"list\"     ##  ## attr(,\"class\") ## [1] \"bru_like_list\" \"list\"          ## [1] \"Time:\" ## Time difference of 9.258278 secs ## [[1]] ## $family ## [1] \"gaussian\" ##  ## $formula ## y ~ . ## <environment: 0x55d6c268c288> ##  ## $response_data ## $response_data$BRU_response ##   [1]  1.8675323488  0.0891323305  0.3013976292 -1.5832415394 -0.0866778123 ##   [6]  1.9313976028  2.4687040427  1.1944778888 -0.2277309905  0.8233452096 ##  [11]  0.3471423739  0.4613251346  0.0475099638  1.3577335832  0.2793059776 ##  [16]  1.8379095424 -0.2520830251  0.2627751753  0.3405696631 -0.7426957927 ##  [21]  1.0491793810  0.2252735154  1.3802979458 -0.2742532091 -0.2378188838 ##  [26]  1.6427366595  1.3296347014  2.3689520022  2.6446802435  1.6471613977 ##  [31] -0.6633833414  2.0629942178  0.0391221544  0.0108077530  0.8663405042 ##  [36] -0.4889755469  0.2233608260 -0.4204277985  0.0006467918  2.2887683256 ##  [41] -0.4390824388 -1.2155241705  1.9693698127  2.5373883140  1.4763521700 ##  [46] -0.2908501629 -0.6432488280  0.8462307601  2.2658622527  1.5548461690 ##  [51]  0.6989451667  0.4434008881  1.5272048813  1.8604373454  0.6811530069 ##  [56]  0.2451406958  1.7110149073  2.4287850057  2.1130617434  0.4682940590 ##  [61]  1.3971560796  1.5005172456  2.4602632257 -0.0175459677  0.8494503300 ##  [66] -0.2178012483  0.5346534131  0.0583994966  2.4245730401  1.6323612971 ##  [71]  1.2655135138  0.9183891033  0.3427840022  0.0664846609  1.3631643111 ##  [76] -0.0501714761  0.3440159375  2.8071114846  1.2082638906  0.8607880176 ##  [81] -0.4851794548  2.2190652653 -0.2165920883  0.5925318415  3.3369479040 ##  [86]  0.3538908544 -0.3050926664  1.0769407456 -0.7309600414  0.3611232589 ##  [91]  0.6379348398  0.2214363677  1.6979901060  2.0684679577  1.8307293082 ##  [96]  1.5927851651  1.6029842345  0.4748432070  0.7912981228 -0.1162922867 ## [101]  0.3192494010  0.5681240714 -0.1306400329  1.8323873507  0.4005508901 ## [106]  2.0111920789  0.3276436426  0.9058215384  0.5329757035  0.2841348484 ## [111]  0.3604407137  0.1540640819  1.1326059417  2.4287539521  0.2508547167 ## [116]  0.5041011468  2.1621779159 -0.1062984569  1.8959846470  2.5852560917 ##  ## $response_data$BRU_E ## [1] 1 ##  ## $response_data$BRU_Ntrials ## [1] 1 ##  ## $response_data$BRU_scale ## [1] 1 ##  ##  ## $data ##                 coordinates             y ## 8      (6.829195, 2.175178)  1.8675323488 ## 22     (5.420688, 3.962653)  0.0891323305 ## 24     (2.718415, 3.450685)  0.3013976292 ## 28    (9.729591, 0.6214601) -1.5832415394 ## 36      (9.72012, 1.982448) -0.0866778123 ## 42    (8.404564, 0.6579005)  1.9313976028 ## 47     (6.133916, 2.230922)  2.4687040427 ## 50      (8.77758, 1.570793)  1.1944778888 ## 54    (8.977159, 0.9648501) -0.2277309905 ## 56     (1.194358, 1.263909)  0.8233452096 ## 69      (2.30139, 2.316288)  0.3471423739 ## 81    (0.2583625, 2.049845)  0.4613251346 ## 82     (4.059255, 1.356691)  0.0475099638 ## 85     (6.825709, 1.163768)  1.3577335832 ## 86    (5.078129, 0.2371126)  0.2793059776 ## 88     (8.412401, 0.798832)  1.8379095424 ## 89     (3.125102, 3.007179) -0.2520830251 ## 100   (4.102906, 0.9819229)  0.2627751753 ## 102   (4.765848, 0.4044027)  0.3405696631 ## 103    (1.336778, 3.192196) -0.7426957927 ## 106    (4.899329, 3.021572)  1.0491793810 ## 108    (5.009973, 3.734563)  0.2252735154 ## 111    (6.893109, 1.299686)  1.3802979458 ## 126   (0.7075837, 2.254586) -0.2742532091 ## 129    (2.122513, 3.538558) -0.2378188838 ## 132     (8.51408, 2.621992)  1.6427366595 ## 133    (6.247239, 3.774221)  1.3296347014 ## 140    (4.939354, 2.560598)  2.3689520022 ## 147    (5.086486, 2.347312)  2.6446802435 ## 149    (8.676238, 2.652245)  1.6471613977 ## 151    (3.623513, 4.745853) -0.6633833414 ## 157    (8.006261, 1.098344)  2.0629942178 ## 159      (2.672858, 2.8466)  0.0391221544 ## 175   (8.861291, 0.7083745)  0.0108077530 ## 179    (7.133719, 3.664549)  0.8663405042 ## 180   (0.5118592, 2.174813) -0.4889755469 ## 185     (2.753324, 2.19885)  0.2233608260 ## 187    (1.054956, 2.176588) -0.4204277985 ## 190     (4.69608, 4.517929)  0.0006467918 ## 193    (7.526312, 1.168505)  2.2887683256 ## 197    (1.144203, 2.656874) -0.4390824388 ## 199   (9.844768, 0.4520245) -1.2155241705 ## 208    (6.07255, 0.9942085)  1.9693698127 ## 210    (7.569693, 2.048543)  2.5373883140 ## 214    (8.826984, 3.600317)  1.4763521700 ## 215    (9.477757, 0.276064) -0.2908501629 ## 216    (3.240051, 4.906171) -0.6432488280 ## 230    (4.491369, 1.491822)  0.8462307601 ## 231   (6.386748, 0.7887602)  2.2658622527 ## 236    (4.468248, 2.066052)  1.5548461690 ## 237    (4.833059, 3.562344)  0.6989451667 ## 239    (2.785143, 1.523411)  0.4434008881 ## 243   (5.943374, 0.1076233)  1.5272048813 ## 245      (8.025849, 1.2649)  1.8604373454 ## 248    (1.786093, 1.459911)  0.6811530069 ## 249  (0.04237858, 2.354691)  0.2451406958 ## 251   (7.714442, 0.4997052)  1.7110149073 ## 252   (5.731279, 0.8910044)  2.4287850057 ## 257   (6.352767, 0.8679928)  2.1130617434 ## 259     (9.25765, 2.132158)  0.4682940590 ## 263    (6.895698, 4.030652)  1.3971560796 ## 267    (8.52649, 0.9491271)  1.5005172456 ## 286     (4.824225, 2.24806)  2.4602632257 ## 292    (1.834092, 3.643435) -0.0175459677 ## 301    (1.444304, 4.755057)  0.8494503300 ## 304    (4.816272, 4.716079) -0.2178012483 ## 306    (7.964013, 4.751293)  0.5346534131 ## 312    (5.225333, 4.671745)  0.0583994966 ## 314    (7.880802, 2.200437)  2.4245730401 ## 315     (6.92358, 2.979684)  1.6323612971 ## 316    (8.794302, 3.532642)  1.2655135138 ## 317    (1.411296, 4.877799)  0.9183891033 ## 318    (2.652453, 2.329161)  0.3427840022 ## 337    (3.685227, 3.038229)  0.0664846609 ## 339    (8.706238, 2.977778)  1.3631643111 ## 340    (4.088476, 3.384361) -0.0501714761 ## 344    (3.952841, 2.641039)  0.3440159375 ## 346    (5.569291, 2.158475)  2.8071114846 ## 370    (7.692295, 3.866935)  1.2082638906 ## 373     (8.13369, 4.778957)  0.8607880176 ## 379    (3.020144, 4.975152) -0.4851794548 ## 383    (8.212223, 2.371665)  2.2190652653 ## 387    (2.988565, 2.314757) -0.2165920883 ## 399    (2.867936, 1.557783)  0.5925318415 ## 416    (5.283665, 1.986961)  3.3369479040 ## 418     (9.74798, 2.644043)  0.3538908544 ## 419    (0.49568, 0.3689271) -0.3050926664 ## 426    (8.916793, 3.418483)  1.0769407456 ## 435     (2.522604, 4.56852) -0.7309600414 ## 437    (0.676825, 1.536298)  0.3611232589 ## 442    (3.210356, 3.373614)  0.6379348398 ## 443    (4.126111, 2.030218)  0.2214363677 ## 447    (9.017999, 2.747461)  1.6979901060 ## 450    (6.620642, 2.508676)  2.0684679577 ## 460    (8.445455, 2.250102)  1.8307293082 ## 461    (6.562209, 2.791349)  1.5927851651 ## 465    (8.282394, 1.592013)  1.6029842345 ## 467   (2.946861, 0.2565029)  0.4748432070 ## 469    (4.066736, 0.073449)  0.7912981228 ## 474    (5.301142, 4.777785) -0.1162922867 ## 480    (2.660705, 1.382302)  0.3192494010 ## 481   (5.293436, 0.3025387)  0.5681240714 ## 487   (9.455901, 0.2766176) -0.1306400329 ## 489    (8.023485, 1.331456)  1.8323873507 ## 493    (4.149254, 2.166342)  0.4005508901 ## 494   (5.940315, 0.5918995)  2.0111920789 ## 505   (2.413877, 0.4208425)  0.3276436426 ## 513  (4.075126, 0.07329848)  0.9058215384 ## 515    (1.320147, 1.120956)  0.5329757035 ## 517         (1.863, 4.2242)  0.2841348484 ## 532     (9.29565, 2.124611)  0.3604407137 ## 539    (1.338962, 2.437735)  0.1540640819 ## 544    (8.816744, 2.320273)  1.1326059417 ## 545 (6.403176, 0.008807789)  2.4287539521 ## 556    (3.467108, 3.081334)  0.2508547167 ## 565    (9.193745, 4.295448)  0.5041011468 ## 587   (6.979652, 0.7663116)  2.1621779159 ## 590    (9.821418, 2.777265) -0.1062984569 ## 593    (5.245938, 2.986664)  1.8959846470 ## 596     (5.01427, 2.287343)  2.5852560917 ##  ## $E ## [1] 1 ##  ## $Ntrials ## [1] 1 ##  ## $weights ## [1] 1 ##  ## $scale ## [1] 1 ##  ## $samplers ## NULL ##  ## $linear ## [1] TRUE ##  ## $expr ## NULL ##  ## $response ## [1] \"BRU_response\" ##  ## $inla.family ## [1] \"gaussian\" ##  ## $domain ## NULL ##  ## $used ## Used effects : field ## Used latent  :  ##  ## $allow_combine ## [1] FALSE ##  ## $control.family ## NULL ##  ## $drange ## $drange$y ## [1] -1.583242  3.336948 ##  ##  ## attr(,\"class\") ## [1] \"bru_like\" \"list\"     ##  ## attr(,\"class\") ## [1] \"bru_like_list\" \"list\"          ## [1] \"Time:\" ## Time difference of 5.758271 secs ## [[1]] ## $family ## [1] \"gaussian\" ##  ## $formula ## y ~ . ## <environment: 0x55d6afd64a98> ##  ## $response_data ## $response_data$BRU_response ##   [1]  1.8675323488  0.0891323305  0.3013976292 -1.5832415394 -0.0866778123 ##   [6]  1.9313976028  2.4687040427  1.1944778888 -0.2277309905  0.8233452096 ##  [11]  0.3471423739  0.4613251346  0.0475099638  1.3577335832  0.2793059776 ##  [16]  1.8379095424 -0.2520830251  0.2627751753  0.3405696631 -0.7426957927 ##  [21]  1.0491793810  0.2252735154  1.3802979458 -0.2742532091 -0.2378188838 ##  [26]  1.6427366595  1.3296347014  2.3689520022  2.6446802435  1.6471613977 ##  [31] -0.6633833414  2.0629942178  0.0391221544  0.0108077530  0.8663405042 ##  [36] -0.4889755469  0.2233608260 -0.4204277985  0.0006467918  2.2887683256 ##  [41] -0.4390824388 -1.2155241705  1.9693698127  2.5373883140  1.4763521700 ##  [46] -0.2908501629 -0.6432488280  0.8462307601  2.2658622527  1.5548461690 ##  [51]  0.6989451667  0.4434008881  1.5272048813  1.8604373454  0.6811530069 ##  [56]  0.2451406958  1.7110149073  2.4287850057  2.1130617434  0.4682940590 ##  [61]  1.3971560796  1.5005172456  2.4602632257 -0.0175459677  0.8494503300 ##  [66] -0.2178012483  0.5346534131  0.0583994966  2.4245730401  1.6323612971 ##  [71]  1.2655135138  0.9183891033  0.3427840022  0.0664846609  1.3631643111 ##  [76] -0.0501714761  0.3440159375  2.8071114846  1.2082638906  0.8607880176 ##  [81] -0.4851794548  2.2190652653 -0.2165920883  0.5925318415  3.3369479040 ##  [86]  0.3538908544 -0.3050926664  1.0769407456 -0.7309600414  0.3611232589 ##  [91]  0.6379348398  0.2214363677  1.6979901060  2.0684679577  1.8307293082 ##  [96]  1.5927851651  1.6029842345  0.4748432070  0.7912981228 -0.1162922867 ## [101]  0.3192494010  0.5681240714 -0.1306400329  1.8323873507  0.4005508901 ## [106]  2.0111920789  0.3276436426  0.9058215384  0.5329757035  0.2841348484 ## [111]  0.3604407137  0.1540640819  1.1326059417  2.4287539521  0.2508547167 ## [116]  0.5041011468  2.1621779159 -0.1062984569  1.8959846470  2.5852560917 ##  ## $response_data$BRU_E ## [1] 1 ##  ## $response_data$BRU_Ntrials ## [1] 1 ##  ## $response_data$BRU_scale ## [1] 1 ##  ##  ## $data ##                 coordinates             y ## 8      (6.829195, 2.175178)  1.8675323488 ## 22     (5.420688, 3.962653)  0.0891323305 ## 24     (2.718415, 3.450685)  0.3013976292 ## 28    (9.729591, 0.6214601) -1.5832415394 ## 36      (9.72012, 1.982448) -0.0866778123 ## 42    (8.404564, 0.6579005)  1.9313976028 ## 47     (6.133916, 2.230922)  2.4687040427 ## 50      (8.77758, 1.570793)  1.1944778888 ## 54    (8.977159, 0.9648501) -0.2277309905 ## 56     (1.194358, 1.263909)  0.8233452096 ## 69      (2.30139, 2.316288)  0.3471423739 ## 81    (0.2583625, 2.049845)  0.4613251346 ## 82     (4.059255, 1.356691)  0.0475099638 ## 85     (6.825709, 1.163768)  1.3577335832 ## 86    (5.078129, 0.2371126)  0.2793059776 ## 88     (8.412401, 0.798832)  1.8379095424 ## 89     (3.125102, 3.007179) -0.2520830251 ## 100   (4.102906, 0.9819229)  0.2627751753 ## 102   (4.765848, 0.4044027)  0.3405696631 ## 103    (1.336778, 3.192196) -0.7426957927 ## 106    (4.899329, 3.021572)  1.0491793810 ## 108    (5.009973, 3.734563)  0.2252735154 ## 111    (6.893109, 1.299686)  1.3802979458 ## 126   (0.7075837, 2.254586) -0.2742532091 ## 129    (2.122513, 3.538558) -0.2378188838 ## 132     (8.51408, 2.621992)  1.6427366595 ## 133    (6.247239, 3.774221)  1.3296347014 ## 140    (4.939354, 2.560598)  2.3689520022 ## 147    (5.086486, 2.347312)  2.6446802435 ## 149    (8.676238, 2.652245)  1.6471613977 ## 151    (3.623513, 4.745853) -0.6633833414 ## 157    (8.006261, 1.098344)  2.0629942178 ## 159      (2.672858, 2.8466)  0.0391221544 ## 175   (8.861291, 0.7083745)  0.0108077530 ## 179    (7.133719, 3.664549)  0.8663405042 ## 180   (0.5118592, 2.174813) -0.4889755469 ## 185     (2.753324, 2.19885)  0.2233608260 ## 187    (1.054956, 2.176588) -0.4204277985 ## 190     (4.69608, 4.517929)  0.0006467918 ## 193    (7.526312, 1.168505)  2.2887683256 ## 197    (1.144203, 2.656874) -0.4390824388 ## 199   (9.844768, 0.4520245) -1.2155241705 ## 208    (6.07255, 0.9942085)  1.9693698127 ## 210    (7.569693, 2.048543)  2.5373883140 ## 214    (8.826984, 3.600317)  1.4763521700 ## 215    (9.477757, 0.276064) -0.2908501629 ## 216    (3.240051, 4.906171) -0.6432488280 ## 230    (4.491369, 1.491822)  0.8462307601 ## 231   (6.386748, 0.7887602)  2.2658622527 ## 236    (4.468248, 2.066052)  1.5548461690 ## 237    (4.833059, 3.562344)  0.6989451667 ## 239    (2.785143, 1.523411)  0.4434008881 ## 243   (5.943374, 0.1076233)  1.5272048813 ## 245      (8.025849, 1.2649)  1.8604373454 ## 248    (1.786093, 1.459911)  0.6811530069 ## 249  (0.04237858, 2.354691)  0.2451406958 ## 251   (7.714442, 0.4997052)  1.7110149073 ## 252   (5.731279, 0.8910044)  2.4287850057 ## 257   (6.352767, 0.8679928)  2.1130617434 ## 259     (9.25765, 2.132158)  0.4682940590 ## 263    (6.895698, 4.030652)  1.3971560796 ## 267    (8.52649, 0.9491271)  1.5005172456 ## 286     (4.824225, 2.24806)  2.4602632257 ## 292    (1.834092, 3.643435) -0.0175459677 ## 301    (1.444304, 4.755057)  0.8494503300 ## 304    (4.816272, 4.716079) -0.2178012483 ## 306    (7.964013, 4.751293)  0.5346534131 ## 312    (5.225333, 4.671745)  0.0583994966 ## 314    (7.880802, 2.200437)  2.4245730401 ## 315     (6.92358, 2.979684)  1.6323612971 ## 316    (8.794302, 3.532642)  1.2655135138 ## 317    (1.411296, 4.877799)  0.9183891033 ## 318    (2.652453, 2.329161)  0.3427840022 ## 337    (3.685227, 3.038229)  0.0664846609 ## 339    (8.706238, 2.977778)  1.3631643111 ## 340    (4.088476, 3.384361) -0.0501714761 ## 344    (3.952841, 2.641039)  0.3440159375 ## 346    (5.569291, 2.158475)  2.8071114846 ## 370    (7.692295, 3.866935)  1.2082638906 ## 373     (8.13369, 4.778957)  0.8607880176 ## 379    (3.020144, 4.975152) -0.4851794548 ## 383    (8.212223, 2.371665)  2.2190652653 ## 387    (2.988565, 2.314757) -0.2165920883 ## 399    (2.867936, 1.557783)  0.5925318415 ## 416    (5.283665, 1.986961)  3.3369479040 ## 418     (9.74798, 2.644043)  0.3538908544 ## 419    (0.49568, 0.3689271) -0.3050926664 ## 426    (8.916793, 3.418483)  1.0769407456 ## 435     (2.522604, 4.56852) -0.7309600414 ## 437    (0.676825, 1.536298)  0.3611232589 ## 442    (3.210356, 3.373614)  0.6379348398 ## 443    (4.126111, 2.030218)  0.2214363677 ## 447    (9.017999, 2.747461)  1.6979901060 ## 450    (6.620642, 2.508676)  2.0684679577 ## 460    (8.445455, 2.250102)  1.8307293082 ## 461    (6.562209, 2.791349)  1.5927851651 ## 465    (8.282394, 1.592013)  1.6029842345 ## 467   (2.946861, 0.2565029)  0.4748432070 ## 469    (4.066736, 0.073449)  0.7912981228 ## 474    (5.301142, 4.777785) -0.1162922867 ## 480    (2.660705, 1.382302)  0.3192494010 ## 481   (5.293436, 0.3025387)  0.5681240714 ## 487   (9.455901, 0.2766176) -0.1306400329 ## 489    (8.023485, 1.331456)  1.8323873507 ## 493    (4.149254, 2.166342)  0.4005508901 ## 494   (5.940315, 0.5918995)  2.0111920789 ## 505   (2.413877, 0.4208425)  0.3276436426 ## 513  (4.075126, 0.07329848)  0.9058215384 ## 515    (1.320147, 1.120956)  0.5329757035 ## 517         (1.863, 4.2242)  0.2841348484 ## 532     (9.29565, 2.124611)  0.3604407137 ## 539    (1.338962, 2.437735)  0.1540640819 ## 544    (8.816744, 2.320273)  1.1326059417 ## 545 (6.403176, 0.008807789)  2.4287539521 ## 556    (3.467108, 3.081334)  0.2508547167 ## 565    (9.193745, 4.295448)  0.5041011468 ## 587   (6.979652, 0.7663116)  2.1621779159 ## 590    (9.821418, 2.777265) -0.1062984569 ## 593    (5.245938, 2.986664)  1.8959846470 ## 596     (5.01427, 2.287343)  2.5852560917 ##  ## $E ## [1] 1 ##  ## $Ntrials ## [1] 1 ##  ## $weights ## [1] 1 ##  ## $scale ## [1] 1 ##  ## $samplers ## NULL ##  ## $linear ## [1] TRUE ##  ## $expr ## NULL ##  ## $response ## [1] \"BRU_response\" ##  ## $inla.family ## [1] \"gaussian\" ##  ## $domain ## NULL ##  ## $used ## Used effects : field ## Used latent  :  ##  ## $allow_combine ## [1] FALSE ##  ## $control.family ## NULL ##  ## $drange ## $drange$y ## [1] -1.583242  3.336948 ##  ##  ## attr(,\"class\") ## [1] \"bru_like\" \"list\"     ##  ## attr(,\"class\") ## [1] \"bru_like_list\" \"list\"          ## [1] \"Time:\" ## Time difference of 14.14389 secs ## [[1]] ## $family ## [1] \"gaussian\" ##  ## $formula ## y ~ . ## <environment: 0x55d6c268c288> ##  ## $response_data ## $response_data$BRU_response ##   [1] -0.652275472  2.478437162 -1.469746927  0.553053025  2.218975206 ##   [6]  0.110498509  0.684818082  0.410707432 -0.086677812 -0.392003251 ##  [11]  2.452246098  0.832124028 -0.658968984  0.461325135  0.279305978 ##  [16]  0.737126064  0.510031294 -0.014293946  0.474111759  2.375565401 ##  [21] -0.038763689  0.473563534 -0.274253209  1.329634701 -0.002488684 ##  [26]  2.510227879  2.368952002  2.445572560  1.401827629  1.835641762 ##  [31]  0.305507562 -0.663383341  0.031834879  0.611167509  0.010807753 ##  [36] -0.488975547  1.317333225  1.804223666  0.223360826 -0.420427799 ##  [41]  0.372141297  0.440093576  0.526374886  0.513760745  1.815915993 ##  [46] -0.644983215  1.259152126  2.002255441 -0.279128393  0.206119145 ##  [51]  0.412268586  0.468294059  2.047473585  0.208614499  2.492019866 ##  [56]  0.018897000  1.491159048  0.540593171  1.053560186  2.469441802 ##  [61] -0.217801248  0.001106788  0.058399497  1.632361297  1.265513514 ##  [66]  0.181506560  0.718935159  1.276052814  1.073195669  0.109367650 ##  [71]  1.364254929  0.208379234 -0.256415146  1.152737677  0.541259115 ##  [76] -0.062895957  0.723151514  2.019522187 -0.767077106  2.752833097 ##  [81]  2.923191311  2.987038521  0.183840924  0.353890854 -0.305092666 ##  [86]  2.193802277  2.865536179  0.361123259  0.707258604  0.125530149 ##  [91]  0.474843207  2.488976675  2.265451088  1.832387351  0.221584028 ##  [96]  2.198411414  0.327643643  0.566520304  2.011402951  0.498960359 ## [101]  0.209238672  1.867539626  0.532975703  0.848988073  0.968075164 ## [106]  3.212663882  0.211362761  1.656445175  0.219822810  0.843587771 ## [111]  0.248425088 -0.390103828 -0.322572908 -0.469358525  1.266757597 ## [116]  1.404152522 -0.106298457 -0.348797750  2.585256092  1.929075321 ##  ## $response_data$BRU_E ## [1] 1 ##  ## $response_data$BRU_Ntrials ## [1] 1 ##  ## $response_data$BRU_scale ## [1] 1 ##  ##  ## $data ##                coordinates            y ## 4     (3.171651, 4.781028) -0.652275472 ## 5     (7.662535, 1.354513)  2.478437162 ## 7     (9.251893, 1.280585) -1.469746927 ## 14  (0.08103577, 1.532909)  0.553053025 ## 17   (7.171219, 0.6764418)  2.218975206 ## 19   (2.405562, 0.3811053)  0.110498509 ## 26    (9.476547, 3.220274)  0.684818082 ## 34    (6.415449, 4.470381)  0.410707432 ## 36     (9.72012, 1.982448) -0.086677812 ## 38   (3.918428, 0.4856529) -0.392003251 ## 44    (7.749321, 1.982572)  2.452246098 ## 49    (2.461592, 2.086142)  0.832124028 ## 52   (0.2566116, 3.952345) -0.658968984 ## 81   (0.2583625, 2.049845)  0.461325135 ## 86   (5.078129, 0.2371126)  0.279305978 ## 98    (4.462919, 1.676029)  0.737126064 ## 104   (4.794563, 4.287101)  0.510031294 ## 114 (0.3681457, 0.1656634) -0.014293946 ## 118   (2.685377, 3.307539)  0.474111759 ## 119    (8.053664, 2.34125)  2.375565401 ## 120    (4.249329, 4.29261) -0.038763689 ## 121   (1.652152, 3.872303)  0.473563534 ## 126  (0.7075837, 2.254586) -0.274253209 ## 133   (6.247239, 3.774221)  1.329634701 ## 135   (1.437549, 2.383648) -0.002488684 ## 139   (5.13313, 0.9758311)  2.510227879 ## 140   (4.939354, 2.560598)  2.368952002 ## 143   (5.863603, 2.332283)  2.445572560 ## 144   (8.234804, 4.329484)  1.401827629 ## 145   (8.074389, 1.639138)  1.835641762 ## 148   (2.952294, 3.798363)  0.305507562 ## 151   (3.623513, 4.745853) -0.663383341 ## 156   (3.439523, 2.038872)  0.031834879 ## 162 (0.04170842, 1.677276)  0.611167509 ## 175  (8.861291, 0.7083745)  0.010807753 ## 180  (0.5118592, 2.174813) -0.488975547 ## 181   (7.013178, 3.994144)  1.317333225 ## 182   (6.634763, 1.831506)  1.804223666 ## 185    (2.753324, 2.19885)  0.223360826 ## 187   (1.054956, 2.176588) -0.420427799 ## 192     (2.099873, 4.8055)  0.372141297 ## 195   (4.055383, 2.094394)  0.440093576 ## 198    (1.34756, 4.667505)  0.526374886 ## 200   (9.767728, 3.282002)  0.513760745 ## 201  (7.586634, 0.8925879)  1.815915993 ## 229  (0.4318224, 4.425763) -0.644983215 ## 233  (5.418842, 0.4105507)  1.259152126 ## 242   (8.072817, 1.522355)  2.002255441 ## 254  (0.8939543, 2.363234) -0.279128393 ## 256   (1.455975, 4.208936)  0.206119145 ## 258   (4.462377, 3.622975)  0.412268586 ## 259    (9.25765, 2.132158)  0.468294059 ## 260   (6.118998, 2.926033)  2.047473585 ## 261  (0.6906892, 3.837462)  0.208614499 ## 265   (6.160639, 1.492451)  2.492019866 ## 274   (5.782891, 4.970651)  0.018897000 ## 287    (8.67415, 3.473783)  1.491159048 ## 289  (3.354675, 0.7675957)  0.540593171 ## 296    (3.302644, 1.23206)  1.053560186 ## 297   (6.015682, 2.368481)  2.469441802 ## 304   (4.816272, 4.716079) -0.217801248 ## 309   (1.650989, 3.581076)  0.001106788 ## 312   (5.225333, 4.671745)  0.058399497 ## 315    (6.92358, 2.979684)  1.632361297 ## 316   (8.794302, 3.532642)  1.265513514 ## 320   (3.539105, 4.132259)  0.181506560 ## 338   (4.412435, 3.086132)  0.718935159 ## 345  (4.602832, 0.8099203)  1.276052814 ## 349   (8.906574, 4.158312)  1.073195669 ## 358   (2.561338, 2.454977)  0.109367650 ## 359    (1.64506, 4.892264)  1.364254929 ## 362   (4.28908, 0.2965067)  0.208379234 ## 363   (2.120794, 4.531103) -0.256415146 ## 365   (8.722578, 3.133491)  1.152737677 ## 366   (2.141775, 1.069482)  0.541259115 ## 369    (3.30308, 2.156949) -0.062895957 ## 385   (0.1455631, 1.26745)  0.723151514 ## 393   (5.114314, 2.880658)  2.019522187 ## 395   (9.380045, 4.652021) -0.767077106 ## 396    (5.41961, 1.133036)  2.752833097 ## 404  (6.967856, 0.4228904)  2.923191311 ## 409    (5.978169, 1.66948)  2.987038521 ## 415  (0.2242172, 2.201305)  0.183840924 ## 418    (9.74798, 2.644043)  0.353890854 ## 419   (0.49568, 0.3689271) -0.305092666 ## 421   (4.938933, 1.214062)  2.193802277 ## 425   (5.184723, 2.425385)  2.865536179 ## 437   (0.676825, 1.536298)  0.361123259 ## 444    (1.56396, 1.330727)  0.707258604 ## 463   (1.07915, 0.1059277)  0.125530149 ## 467  (2.946861, 0.2565029)  0.474843207 ## 470    (5.676537, 1.09235)  2.488976675 ## 479   (7.502298, 1.367884)  2.265451088 ## 489   (8.023485, 1.331456)  1.832387351 ## 499     (4.06451, 3.67308)  0.221584028 ## 504   (6.555589, 2.533826)  2.198411414 ## 505  (2.413877, 0.4208425)  0.327643643 ## 506   (9.655488, 2.738529)  0.566520304 ## 508   (6.686311, 2.691109)  2.011402951 ## 510   (2.067254, 1.235869)  0.498960359 ## 511   (9.472872, 2.282848)  0.209238672 ## 514  (5.797955, 0.4818001)  1.867539626 ## 515   (1.320147, 1.120956)  0.532975703 ## 518   (2.404973, 2.076959)  0.848988073 ## 523   (4.505513, 2.927387)  0.968075164 ## 525   (5.426169, 2.184748)  3.212663882 ## 529    (9.060211, 4.91211)  0.211362761 ## 538   (8.353119, 1.165073)  1.656445175 ## 548    (9.64617, 2.363611)  0.219822810 ## 561   (7.421051, 3.781989)  0.843587771 ## 562   (1.531332, 0.438622)  0.248425088 ## 568   (4.128713, 4.176781) -0.390103828 ## 572   (8.997944, 1.248105) -0.322572908 ## 580   (2.420051, 3.916131) -0.469358525 ## 584   (6.875753, 1.128986)  1.266757597 ## 586   (8.321681, 3.618737)  1.404152522 ## 590   (9.821418, 2.777265) -0.106298457 ## 592   (9.682872, 1.397534) -0.348797750 ## 596    (5.01427, 2.287343)  2.585256092 ## 598   (7.047124, 2.546437)  1.929075321 ##  ## $E ## [1] 1 ##  ## $Ntrials ## [1] 1 ##  ## $weights ## [1] 1 ##  ## $scale ## [1] 1 ##  ## $samplers ## NULL ##  ## $linear ## [1] TRUE ##  ## $expr ## NULL ##  ## $response ## [1] \"BRU_response\" ##  ## $inla.family ## [1] \"gaussian\" ##  ## $domain ## NULL ##  ## $used ## Used effects : field ## Used latent  :  ##  ## $allow_combine ## [1] FALSE ##  ## $control.family ## NULL ##  ## $drange ## $drange$y ## [1] -1.469747  3.212664 ##  ##  ## attr(,\"class\") ## [1] \"bru_like\" \"list\"     ##  ## attr(,\"class\") ## [1] \"bru_like_list\" \"list\"          ## [1] \"Time:\" ## Time difference of 4.455234 secs ## [[1]] ## $family ## [1] \"gaussian\" ##  ## $formula ## y ~ . ## <environment: 0x55d6afd64a98> ##  ## $response_data ## $response_data$BRU_response ##   [1] -0.652275472  2.478437162 -1.469746927  0.553053025  2.218975206 ##   [6]  0.110498509  0.684818082  0.410707432 -0.086677812 -0.392003251 ##  [11]  2.452246098  0.832124028 -0.658968984  0.461325135  0.279305978 ##  [16]  0.737126064  0.510031294 -0.014293946  0.474111759  2.375565401 ##  [21] -0.038763689  0.473563534 -0.274253209  1.329634701 -0.002488684 ##  [26]  2.510227879  2.368952002  2.445572560  1.401827629  1.835641762 ##  [31]  0.305507562 -0.663383341  0.031834879  0.611167509  0.010807753 ##  [36] -0.488975547  1.317333225  1.804223666  0.223360826 -0.420427799 ##  [41]  0.372141297  0.440093576  0.526374886  0.513760745  1.815915993 ##  [46] -0.644983215  1.259152126  2.002255441 -0.279128393  0.206119145 ##  [51]  0.412268586  0.468294059  2.047473585  0.208614499  2.492019866 ##  [56]  0.018897000  1.491159048  0.540593171  1.053560186  2.469441802 ##  [61] -0.217801248  0.001106788  0.058399497  1.632361297  1.265513514 ##  [66]  0.181506560  0.718935159  1.276052814  1.073195669  0.109367650 ##  [71]  1.364254929  0.208379234 -0.256415146  1.152737677  0.541259115 ##  [76] -0.062895957  0.723151514  2.019522187 -0.767077106  2.752833097 ##  [81]  2.923191311  2.987038521  0.183840924  0.353890854 -0.305092666 ##  [86]  2.193802277  2.865536179  0.361123259  0.707258604  0.125530149 ##  [91]  0.474843207  2.488976675  2.265451088  1.832387351  0.221584028 ##  [96]  2.198411414  0.327643643  0.566520304  2.011402951  0.498960359 ## [101]  0.209238672  1.867539626  0.532975703  0.848988073  0.968075164 ## [106]  3.212663882  0.211362761  1.656445175  0.219822810  0.843587771 ## [111]  0.248425088 -0.390103828 -0.322572908 -0.469358525  1.266757597 ## [116]  1.404152522 -0.106298457 -0.348797750  2.585256092  1.929075321 ##  ## $response_data$BRU_E ## [1] 1 ##  ## $response_data$BRU_Ntrials ## [1] 1 ##  ## $response_data$BRU_scale ## [1] 1 ##  ##  ## $data ##                coordinates            y ## 4     (3.171651, 4.781028) -0.652275472 ## 5     (7.662535, 1.354513)  2.478437162 ## 7     (9.251893, 1.280585) -1.469746927 ## 14  (0.08103577, 1.532909)  0.553053025 ## 17   (7.171219, 0.6764418)  2.218975206 ## 19   (2.405562, 0.3811053)  0.110498509 ## 26    (9.476547, 3.220274)  0.684818082 ## 34    (6.415449, 4.470381)  0.410707432 ## 36     (9.72012, 1.982448) -0.086677812 ## 38   (3.918428, 0.4856529) -0.392003251 ## 44    (7.749321, 1.982572)  2.452246098 ## 49    (2.461592, 2.086142)  0.832124028 ## 52   (0.2566116, 3.952345) -0.658968984 ## 81   (0.2583625, 2.049845)  0.461325135 ## 86   (5.078129, 0.2371126)  0.279305978 ## 98    (4.462919, 1.676029)  0.737126064 ## 104   (4.794563, 4.287101)  0.510031294 ## 114 (0.3681457, 0.1656634) -0.014293946 ## 118   (2.685377, 3.307539)  0.474111759 ## 119    (8.053664, 2.34125)  2.375565401 ## 120    (4.249329, 4.29261) -0.038763689 ## 121   (1.652152, 3.872303)  0.473563534 ## 126  (0.7075837, 2.254586) -0.274253209 ## 133   (6.247239, 3.774221)  1.329634701 ## 135   (1.437549, 2.383648) -0.002488684 ## 139   (5.13313, 0.9758311)  2.510227879 ## 140   (4.939354, 2.560598)  2.368952002 ## 143   (5.863603, 2.332283)  2.445572560 ## 144   (8.234804, 4.329484)  1.401827629 ## 145   (8.074389, 1.639138)  1.835641762 ## 148   (2.952294, 3.798363)  0.305507562 ## 151   (3.623513, 4.745853) -0.663383341 ## 156   (3.439523, 2.038872)  0.031834879 ## 162 (0.04170842, 1.677276)  0.611167509 ## 175  (8.861291, 0.7083745)  0.010807753 ## 180  (0.5118592, 2.174813) -0.488975547 ## 181   (7.013178, 3.994144)  1.317333225 ## 182   (6.634763, 1.831506)  1.804223666 ## 185    (2.753324, 2.19885)  0.223360826 ## 187   (1.054956, 2.176588) -0.420427799 ## 192     (2.099873, 4.8055)  0.372141297 ## 195   (4.055383, 2.094394)  0.440093576 ## 198    (1.34756, 4.667505)  0.526374886 ## 200   (9.767728, 3.282002)  0.513760745 ## 201  (7.586634, 0.8925879)  1.815915993 ## 229  (0.4318224, 4.425763) -0.644983215 ## 233  (5.418842, 0.4105507)  1.259152126 ## 242   (8.072817, 1.522355)  2.002255441 ## 254  (0.8939543, 2.363234) -0.279128393 ## 256   (1.455975, 4.208936)  0.206119145 ## 258   (4.462377, 3.622975)  0.412268586 ## 259    (9.25765, 2.132158)  0.468294059 ## 260   (6.118998, 2.926033)  2.047473585 ## 261  (0.6906892, 3.837462)  0.208614499 ## 265   (6.160639, 1.492451)  2.492019866 ## 274   (5.782891, 4.970651)  0.018897000 ## 287    (8.67415, 3.473783)  1.491159048 ## 289  (3.354675, 0.7675957)  0.540593171 ## 296    (3.302644, 1.23206)  1.053560186 ## 297   (6.015682, 2.368481)  2.469441802 ## 304   (4.816272, 4.716079) -0.217801248 ## 309   (1.650989, 3.581076)  0.001106788 ## 312   (5.225333, 4.671745)  0.058399497 ## 315    (6.92358, 2.979684)  1.632361297 ## 316   (8.794302, 3.532642)  1.265513514 ## 320   (3.539105, 4.132259)  0.181506560 ## 338   (4.412435, 3.086132)  0.718935159 ## 345  (4.602832, 0.8099203)  1.276052814 ## 349   (8.906574, 4.158312)  1.073195669 ## 358   (2.561338, 2.454977)  0.109367650 ## 359    (1.64506, 4.892264)  1.364254929 ## 362   (4.28908, 0.2965067)  0.208379234 ## 363   (2.120794, 4.531103) -0.256415146 ## 365   (8.722578, 3.133491)  1.152737677 ## 366   (2.141775, 1.069482)  0.541259115 ## 369    (3.30308, 2.156949) -0.062895957 ## 385   (0.1455631, 1.26745)  0.723151514 ## 393   (5.114314, 2.880658)  2.019522187 ## 395   (9.380045, 4.652021) -0.767077106 ## 396    (5.41961, 1.133036)  2.752833097 ## 404  (6.967856, 0.4228904)  2.923191311 ## 409    (5.978169, 1.66948)  2.987038521 ## 415  (0.2242172, 2.201305)  0.183840924 ## 418    (9.74798, 2.644043)  0.353890854 ## 419   (0.49568, 0.3689271) -0.305092666 ## 421   (4.938933, 1.214062)  2.193802277 ## 425   (5.184723, 2.425385)  2.865536179 ## 437   (0.676825, 1.536298)  0.361123259 ## 444    (1.56396, 1.330727)  0.707258604 ## 463   (1.07915, 0.1059277)  0.125530149 ## 467  (2.946861, 0.2565029)  0.474843207 ## 470    (5.676537, 1.09235)  2.488976675 ## 479   (7.502298, 1.367884)  2.265451088 ## 489   (8.023485, 1.331456)  1.832387351 ## 499     (4.06451, 3.67308)  0.221584028 ## 504   (6.555589, 2.533826)  2.198411414 ## 505  (2.413877, 0.4208425)  0.327643643 ## 506   (9.655488, 2.738529)  0.566520304 ## 508   (6.686311, 2.691109)  2.011402951 ## 510   (2.067254, 1.235869)  0.498960359 ## 511   (9.472872, 2.282848)  0.209238672 ## 514  (5.797955, 0.4818001)  1.867539626 ## 515   (1.320147, 1.120956)  0.532975703 ## 518   (2.404973, 2.076959)  0.848988073 ## 523   (4.505513, 2.927387)  0.968075164 ## 525   (5.426169, 2.184748)  3.212663882 ## 529    (9.060211, 4.91211)  0.211362761 ## 538   (8.353119, 1.165073)  1.656445175 ## 548    (9.64617, 2.363611)  0.219822810 ## 561   (7.421051, 3.781989)  0.843587771 ## 562   (1.531332, 0.438622)  0.248425088 ## 568   (4.128713, 4.176781) -0.390103828 ## 572   (8.997944, 1.248105) -0.322572908 ## 580   (2.420051, 3.916131) -0.469358525 ## 584   (6.875753, 1.128986)  1.266757597 ## 586   (8.321681, 3.618737)  1.404152522 ## 590   (9.821418, 2.777265) -0.106298457 ## 592   (9.682872, 1.397534) -0.348797750 ## 596    (5.01427, 2.287343)  2.585256092 ## 598   (7.047124, 2.546437)  1.929075321 ##  ## $E ## [1] 1 ##  ## $Ntrials ## [1] 1 ##  ## $weights ## [1] 1 ##  ## $scale ## [1] 1 ##  ## $samplers ## NULL ##  ## $linear ## [1] TRUE ##  ## $expr ## NULL ##  ## $response ## [1] \"BRU_response\" ##  ## $inla.family ## [1] \"gaussian\" ##  ## $domain ## NULL ##  ## $used ## Used effects : field ## Used latent  :  ##  ## $allow_combine ## [1] FALSE ##  ## $control.family ## NULL ##  ## $drange ## $drange$y ## [1] -1.469747  3.212664 ##  ##  ## attr(,\"class\") ## [1] \"bru_like\" \"list\"     ##  ## attr(,\"class\") ## [1] \"bru_like_list\" \"list\"          ## [1] \"Time:\" ## Time difference of 8.872308 secs ## [[1]] ## $family ## [1] \"gaussian\" ##  ## $formula ## y ~ . ## <environment: 0x55d6c268c288> ##  ## $response_data ## $response_data$BRU_response ##   [1]  1.5374384496 -0.6522754718  0.0470753883  0.1104985086 -1.5832415394 ##   [6] -0.2634873379 -0.0866778123  2.0013010075 -0.5037474402  0.2444013318 ##  [11]  0.2922220959  0.8321240280  1.1944778888 -0.3651186419  2.8700224903 ##  [16]  2.3315128612  0.2793059776  2.3277015307  0.7371260642  0.4735635338 ##  [21]  2.1540144594  1.6427366595  1.6008503069  0.0974233661  0.8651763589 ##  [26] -0.0006209654  1.6471613977  1.1027827656  0.0318348795  0.6111675095 ##  [31]  0.4533827775  0.1420695600  0.1177695202  1.9542983536  0.1100284745 ##  [36] -0.3360885113  2.2887683256  2.1150627262 -0.3576887945  1.8142824467 ##  [41]  0.2061191452 -0.2426485486  0.1995759605  0.0187787194  0.2103748612 ##  [46]  0.2023161279  0.5405931712  3.3664459826  2.4694418017  0.0661414591 ##  [51]  0.8494503300  0.1081625177  0.3124707101  2.4944374640  2.9951633826 ##  [56]  1.9003019459  1.4642367431  0.9039847236  1.4132308158  3.0424718703 ##  [61]  0.0577289373  0.8178587487  2.5005368172  1.0168942543 -0.8193275613 ##  [66]  0.2369156907  2.7528330966  0.1316778837  1.8142832711  0.6824930563 ##  [71]  0.9013299513  2.9870385212  0.1986827384  3.3369479040 -0.3050926664 ##  [76] -0.0474320080  0.0530045269 -0.7309600414  1.8191666152  1.0851325547 ##  [81]  1.6979901060  2.2675835467  0.6487814949  0.8317982435  2.3421010951 ##  [86]  0.5549477086 -0.3846671574  2.4889766752  2.3836265799  0.6848114147 ##  [91]  0.0226624203 -0.1306400329  1.8323873507  0.0513605297  2.0393684671 ##  [96]  0.1807550094  0.5665203039 -0.2578215857  0.2092386721  0.4578249965 ## [101]  3.2126638823  1.6289490205  0.7098642974  0.8987835232  1.1326059417 ## [106] -0.4835595043  0.9414937126  1.1992920540  2.1270479473  0.6095539329 ## [111]  0.2508547167  0.8435877705  0.2899066562  1.3733664210  1.8066657198 ## [116] -0.1424952027 -0.4693585253 -0.2515045084  1.2667575972  1.4041525222 ##  ## $response_data$BRU_E ## [1] 1 ##  ## $response_data$BRU_Ntrials ## [1] 1 ##  ## $response_data$BRU_scale ## [1] 1 ##  ##  ## $data ##                 coordinates             y ## 1      (8.594981, 2.680497)  1.5374384496 ## 4      (3.171651, 4.781028) -0.6522754718 ## 6     (0.4517742, 1.323716)  0.0470753883 ## 19    (2.405562, 0.3811053)  0.1104985086 ## 28    (9.729591, 0.6214601) -1.5832415394 ## 31     (1.139897, 2.083543) -0.2634873379 ## 36      (9.72012, 1.982448) -0.0866778123 ## 37      (7.305513, 1.54024)  2.0013010075 ## 40     (2.572323, 4.448756) -0.5037474402 ## 45      (3.0784, 0.6510523)  0.2444013318 ## 48     (2.265546, 2.167373)  0.2922220959 ## 49     (2.461592, 2.086142)  0.8321240280 ## 50      (8.77758, 1.570793)  1.1944778888 ## 75   (3.555606, 0.04964721) -0.3651186419 ## 83     (5.960346, 1.956564)  2.8700224903 ## 84     (5.287397, 2.781697)  2.3315128612 ## 86    (5.078129, 0.2371126)  0.2793059776 ## 96    (5.916809, 0.6519829)  2.3277015307 ## 98     (4.462919, 1.676029)  0.7371260642 ## 121    (1.652152, 3.872303)  0.4735635338 ## 131     (7.778715, 1.20637)  2.1540144594 ## 132     (8.51408, 2.621992)  1.6427366595 ## 136    (8.816728, 2.517827)  1.6008503069 ## 138    (3.386237, 2.467673)  0.0974233661 ## 141    (7.934378, 4.429856)  0.8651763589 ## 142   (9.184151, 0.3800263) -0.0006209654 ## 149    (8.676238, 2.652245)  1.6471613977 ## 150    (7.133674, 4.843496)  1.1027827656 ## 156    (3.439523, 2.038872)  0.0318348795 ## 162  (0.04170842, 1.677276)  0.6111675095 ## 166      (1.173343, 3.9047)  0.4533827775 ## 170    (3.176252, 3.813355)  0.1420695600 ## 172    (1.315296, 2.019908)  0.1177695202 ## 177    (4.662933, 2.045562)  1.9542983536 ## 188    (2.549621, 3.326859)  0.1100284745 ## 191    (3.240884, 4.689355) -0.3360885113 ## 193    (7.526312, 1.168505)  2.2887683256 ## 196   (7.033975, 0.7979224)  2.1150627262 ## 223   (0.6469913, 2.240582) -0.3576887945 ## 228   (5.952019, 0.4625379)  1.8142824467 ## 256    (1.455975, 4.208936)  0.2061191452 ## 264    (4.849054, 4.709686) -0.2426485486 ## 269    (4.085919, 3.174906)  0.1995759605 ## 281    (3.239895, 2.024304)  0.0187787194 ## 282     (3.535728, 4.42935)  0.2103748612 ## 284    (3.564393, 2.138836)  0.2023161279 ## 289   (3.354675, 0.7675957)  0.5405931712 ## 293    (5.392283, 2.110406)  3.3664459826 ## 297    (6.015682, 2.368481)  2.4694418017 ## 299    (2.048865, 2.232819)  0.0661414591 ## 301    (1.444304, 4.755057)  0.8494503300 ## 311     (5.22307, 4.545911)  0.1081625177 ## 319    (8.958118, 1.490213)  0.3124707101 ## 326    (4.988129, 2.546501)  2.4944374640 ## 327    (5.308246, 1.263132)  2.9951633826 ## 329    (6.016213, 1.038579)  1.9003019459 ## 331     (6.46699, 4.249964)  1.4642367431 ## 334     (3.082116, 1.27632)  0.9039847236 ## 336    (8.470498, 3.316764)  1.4132308158 ## 347   (6.725699, 0.5021193)  3.0424718703 ## 356    (5.109239, 3.706667)  0.0577289373 ## 357    (1.152228, 1.406428)  0.8178587487 ## 376    (7.514328, 1.447844)  2.5005368172 ## 377    (2.043386, 4.998441)  1.0168942543 ## 386   (0.3792608, 4.790484) -0.8193275613 ## 389   (0.7477256, 3.851537)  0.2369156907 ## 396     (5.41961, 1.133036)  2.7528330966 ## 401    (2.429153, 2.787073)  0.1316778837 ## 402   (7.997346, 0.6748052)  1.8142832711 ## 403     (2.952104, 1.08392)  0.6824930563 ## 405    (7.611821, 4.278237)  0.9013299513 ## 409     (5.978169, 1.66948)  2.9870385212 ## 411    (3.425402, 4.413912)  0.1986827384 ## 416    (5.283665, 1.986961)  3.3369479040 ## 419    (0.49568, 0.3689271) -0.3050926664 ## 428     (5.13768, 3.827838) -0.0474320080 ## 431    (1.532962, 3.645054)  0.0530045269 ## 435     (2.522604, 4.56852) -0.7309600414 ## 436    (7.357314, 1.140396)  1.8191666152 ## 440    (8.789817, 4.818154)  1.0851325547 ## 447    (9.017999, 2.747461)  1.6979901060 ## 448    (6.101503, 2.605235)  2.2675835467 ## 454     (2.908432, 4.46751)  0.6487814949 ## 455    (9.115992, 3.829788)  0.8317982435 ## 458   (8.399722, 0.4625542)  2.3421010951 ## 462 (0.09280679, 0.8547849)  0.5549477086 ## 466    (3.352673, 2.912942) -0.3846671574 ## 470     (5.676537, 1.09235)  2.4889766752 ## 477     (8.393536, 0.45975)  2.3836265799 ## 482   (0.4507153, 1.140223)  0.6848114147 ## 484    (9.105274, 1.722987)  0.0226624203 ## 487   (9.455901, 0.2766176) -0.1306400329 ## 489    (8.023485, 1.331456)  1.8323873507 ## 497    (3.580266, 3.308743)  0.0513605297 ## 500    (4.558299, 2.526379)  2.0393684671 ## 503   (0.0994651, 3.900551)  0.1807550094 ## 506    (9.655488, 2.738529)  0.5665203039 ## 509   (0.9970078, 3.093939) -0.2578215857 ## 511    (9.472872, 2.282848)  0.2092386721 ## 524      (4.8957, 3.862456)  0.4578249965 ## 525    (5.426169, 2.184748)  3.2126638823 ## 531   (7.650547, 0.3238615)  1.6289490205 ## 537  (4.074469, 0.08165678)  0.7098642974 ## 540    (8.695314, 4.444222)  0.8987835232 ## 544    (8.816744, 2.320273)  1.1326059417 ## 550    (9.489988, 4.159122) -0.4835595043 ## 552     (4.55767, 3.017612)  0.9414937126 ## 553    (9.445448, 2.791799)  1.1992920540 ## 554    (6.694261, 2.627189)  2.1270479473 ## 555     (3.496973, 1.19302)  0.6095539329 ## 556    (3.467108, 3.081334)  0.2508547167 ## 561    (7.421051, 3.781989)  0.8435877705 ## 563    (3.441233, 3.281966)  0.2899066562 ## 567     (8.63191, 1.377026)  1.3733664210 ## 571    (5.278135, 3.093516)  1.8066657198 ## 575    (4.297764, 4.576395) -0.1424952027 ## 580    (2.420051, 3.916131) -0.4693585253 ## 581    (3.835713, 4.001397) -0.2515045084 ## 584    (6.875753, 1.128986)  1.2667575972 ## 586    (8.321681, 3.618737)  1.4041525222 ##  ## $E ## [1] 1 ##  ## $Ntrials ## [1] 1 ##  ## $weights ## [1] 1 ##  ## $scale ## [1] 1 ##  ## $samplers ## NULL ##  ## $linear ## [1] TRUE ##  ## $expr ## NULL ##  ## $response ## [1] \"BRU_response\" ##  ## $inla.family ## [1] \"gaussian\" ##  ## $domain ## NULL ##  ## $used ## Used effects : field ## Used latent  :  ##  ## $allow_combine ## [1] FALSE ##  ## $control.family ## NULL ##  ## $drange ## $drange$y ## [1] -1.583242  3.366446 ##  ##  ## attr(,\"class\") ## [1] \"bru_like\" \"list\"     ##  ## attr(,\"class\") ## [1] \"bru_like_list\" \"list\"          ## [1] \"Time:\" ## Time difference of 15.29828 secs ## [[1]] ## $family ## [1] \"gaussian\" ##  ## $formula ## y ~ . ## <environment: 0x55d6afd64a98> ##  ## $response_data ## $response_data$BRU_response ##   [1]  1.5374384496 -0.6522754718  0.0470753883  0.1104985086 -1.5832415394 ##   [6] -0.2634873379 -0.0866778123  2.0013010075 -0.5037474402  0.2444013318 ##  [11]  0.2922220959  0.8321240280  1.1944778888 -0.3651186419  2.8700224903 ##  [16]  2.3315128612  0.2793059776  2.3277015307  0.7371260642  0.4735635338 ##  [21]  2.1540144594  1.6427366595  1.6008503069  0.0974233661  0.8651763589 ##  [26] -0.0006209654  1.6471613977  1.1027827656  0.0318348795  0.6111675095 ##  [31]  0.4533827775  0.1420695600  0.1177695202  1.9542983536  0.1100284745 ##  [36] -0.3360885113  2.2887683256  2.1150627262 -0.3576887945  1.8142824467 ##  [41]  0.2061191452 -0.2426485486  0.1995759605  0.0187787194  0.2103748612 ##  [46]  0.2023161279  0.5405931712  3.3664459826  2.4694418017  0.0661414591 ##  [51]  0.8494503300  0.1081625177  0.3124707101  2.4944374640  2.9951633826 ##  [56]  1.9003019459  1.4642367431  0.9039847236  1.4132308158  3.0424718703 ##  [61]  0.0577289373  0.8178587487  2.5005368172  1.0168942543 -0.8193275613 ##  [66]  0.2369156907  2.7528330966  0.1316778837  1.8142832711  0.6824930563 ##  [71]  0.9013299513  2.9870385212  0.1986827384  3.3369479040 -0.3050926664 ##  [76] -0.0474320080  0.0530045269 -0.7309600414  1.8191666152  1.0851325547 ##  [81]  1.6979901060  2.2675835467  0.6487814949  0.8317982435  2.3421010951 ##  [86]  0.5549477086 -0.3846671574  2.4889766752  2.3836265799  0.6848114147 ##  [91]  0.0226624203 -0.1306400329  1.8323873507  0.0513605297  2.0393684671 ##  [96]  0.1807550094  0.5665203039 -0.2578215857  0.2092386721  0.4578249965 ## [101]  3.2126638823  1.6289490205  0.7098642974  0.8987835232  1.1326059417 ## [106] -0.4835595043  0.9414937126  1.1992920540  2.1270479473  0.6095539329 ## [111]  0.2508547167  0.8435877705  0.2899066562  1.3733664210  1.8066657198 ## [116] -0.1424952027 -0.4693585253 -0.2515045084  1.2667575972  1.4041525222 ##  ## $response_data$BRU_E ## [1] 1 ##  ## $response_data$BRU_Ntrials ## [1] 1 ##  ## $response_data$BRU_scale ## [1] 1 ##  ##  ## $data ##                 coordinates             y ## 1      (8.594981, 2.680497)  1.5374384496 ## 4      (3.171651, 4.781028) -0.6522754718 ## 6     (0.4517742, 1.323716)  0.0470753883 ## 19    (2.405562, 0.3811053)  0.1104985086 ## 28    (9.729591, 0.6214601) -1.5832415394 ## 31     (1.139897, 2.083543) -0.2634873379 ## 36      (9.72012, 1.982448) -0.0866778123 ## 37      (7.305513, 1.54024)  2.0013010075 ## 40     (2.572323, 4.448756) -0.5037474402 ## 45      (3.0784, 0.6510523)  0.2444013318 ## 48     (2.265546, 2.167373)  0.2922220959 ## 49     (2.461592, 2.086142)  0.8321240280 ## 50      (8.77758, 1.570793)  1.1944778888 ## 75   (3.555606, 0.04964721) -0.3651186419 ## 83     (5.960346, 1.956564)  2.8700224903 ## 84     (5.287397, 2.781697)  2.3315128612 ## 86    (5.078129, 0.2371126)  0.2793059776 ## 96    (5.916809, 0.6519829)  2.3277015307 ## 98     (4.462919, 1.676029)  0.7371260642 ## 121    (1.652152, 3.872303)  0.4735635338 ## 131     (7.778715, 1.20637)  2.1540144594 ## 132     (8.51408, 2.621992)  1.6427366595 ## 136    (8.816728, 2.517827)  1.6008503069 ## 138    (3.386237, 2.467673)  0.0974233661 ## 141    (7.934378, 4.429856)  0.8651763589 ## 142   (9.184151, 0.3800263) -0.0006209654 ## 149    (8.676238, 2.652245)  1.6471613977 ## 150    (7.133674, 4.843496)  1.1027827656 ## 156    (3.439523, 2.038872)  0.0318348795 ## 162  (0.04170842, 1.677276)  0.6111675095 ## 166      (1.173343, 3.9047)  0.4533827775 ## 170    (3.176252, 3.813355)  0.1420695600 ## 172    (1.315296, 2.019908)  0.1177695202 ## 177    (4.662933, 2.045562)  1.9542983536 ## 188    (2.549621, 3.326859)  0.1100284745 ## 191    (3.240884, 4.689355) -0.3360885113 ## 193    (7.526312, 1.168505)  2.2887683256 ## 196   (7.033975, 0.7979224)  2.1150627262 ## 223   (0.6469913, 2.240582) -0.3576887945 ## 228   (5.952019, 0.4625379)  1.8142824467 ## 256    (1.455975, 4.208936)  0.2061191452 ## 264    (4.849054, 4.709686) -0.2426485486 ## 269    (4.085919, 3.174906)  0.1995759605 ## 281    (3.239895, 2.024304)  0.0187787194 ## 282     (3.535728, 4.42935)  0.2103748612 ## 284    (3.564393, 2.138836)  0.2023161279 ## 289   (3.354675, 0.7675957)  0.5405931712 ## 293    (5.392283, 2.110406)  3.3664459826 ## 297    (6.015682, 2.368481)  2.4694418017 ## 299    (2.048865, 2.232819)  0.0661414591 ## 301    (1.444304, 4.755057)  0.8494503300 ## 311     (5.22307, 4.545911)  0.1081625177 ## 319    (8.958118, 1.490213)  0.3124707101 ## 326    (4.988129, 2.546501)  2.4944374640 ## 327    (5.308246, 1.263132)  2.9951633826 ## 329    (6.016213, 1.038579)  1.9003019459 ## 331     (6.46699, 4.249964)  1.4642367431 ## 334     (3.082116, 1.27632)  0.9039847236 ## 336    (8.470498, 3.316764)  1.4132308158 ## 347   (6.725699, 0.5021193)  3.0424718703 ## 356    (5.109239, 3.706667)  0.0577289373 ## 357    (1.152228, 1.406428)  0.8178587487 ## 376    (7.514328, 1.447844)  2.5005368172 ## 377    (2.043386, 4.998441)  1.0168942543 ## 386   (0.3792608, 4.790484) -0.8193275613 ## 389   (0.7477256, 3.851537)  0.2369156907 ## 396     (5.41961, 1.133036)  2.7528330966 ## 401    (2.429153, 2.787073)  0.1316778837 ## 402   (7.997346, 0.6748052)  1.8142832711 ## 403     (2.952104, 1.08392)  0.6824930563 ## 405    (7.611821, 4.278237)  0.9013299513 ## 409     (5.978169, 1.66948)  2.9870385212 ## 411    (3.425402, 4.413912)  0.1986827384 ## 416    (5.283665, 1.986961)  3.3369479040 ## 419    (0.49568, 0.3689271) -0.3050926664 ## 428     (5.13768, 3.827838) -0.0474320080 ## 431    (1.532962, 3.645054)  0.0530045269 ## 435     (2.522604, 4.56852) -0.7309600414 ## 436    (7.357314, 1.140396)  1.8191666152 ## 440    (8.789817, 4.818154)  1.0851325547 ## 447    (9.017999, 2.747461)  1.6979901060 ## 448    (6.101503, 2.605235)  2.2675835467 ## 454     (2.908432, 4.46751)  0.6487814949 ## 455    (9.115992, 3.829788)  0.8317982435 ## 458   (8.399722, 0.4625542)  2.3421010951 ## 462 (0.09280679, 0.8547849)  0.5549477086 ## 466    (3.352673, 2.912942) -0.3846671574 ## 470     (5.676537, 1.09235)  2.4889766752 ## 477     (8.393536, 0.45975)  2.3836265799 ## 482   (0.4507153, 1.140223)  0.6848114147 ## 484    (9.105274, 1.722987)  0.0226624203 ## 487   (9.455901, 0.2766176) -0.1306400329 ## 489    (8.023485, 1.331456)  1.8323873507 ## 497    (3.580266, 3.308743)  0.0513605297 ## 500    (4.558299, 2.526379)  2.0393684671 ## 503   (0.0994651, 3.900551)  0.1807550094 ## 506    (9.655488, 2.738529)  0.5665203039 ## 509   (0.9970078, 3.093939) -0.2578215857 ## 511    (9.472872, 2.282848)  0.2092386721 ## 524      (4.8957, 3.862456)  0.4578249965 ## 525    (5.426169, 2.184748)  3.2126638823 ## 531   (7.650547, 0.3238615)  1.6289490205 ## 537  (4.074469, 0.08165678)  0.7098642974 ## 540    (8.695314, 4.444222)  0.8987835232 ## 544    (8.816744, 2.320273)  1.1326059417 ## 550    (9.489988, 4.159122) -0.4835595043 ## 552     (4.55767, 3.017612)  0.9414937126 ## 553    (9.445448, 2.791799)  1.1992920540 ## 554    (6.694261, 2.627189)  2.1270479473 ## 555     (3.496973, 1.19302)  0.6095539329 ## 556    (3.467108, 3.081334)  0.2508547167 ## 561    (7.421051, 3.781989)  0.8435877705 ## 563    (3.441233, 3.281966)  0.2899066562 ## 567     (8.63191, 1.377026)  1.3733664210 ## 571    (5.278135, 3.093516)  1.8066657198 ## 575    (4.297764, 4.576395) -0.1424952027 ## 580    (2.420051, 3.916131) -0.4693585253 ## 581    (3.835713, 4.001397) -0.2515045084 ## 584    (6.875753, 1.128986)  1.2667575972 ## 586    (8.321681, 3.618737)  1.4041525222 ##  ## $E ## [1] 1 ##  ## $Ntrials ## [1] 1 ##  ## $weights ## [1] 1 ##  ## $scale ## [1] 1 ##  ## $samplers ## NULL ##  ## $linear ## [1] TRUE ##  ## $expr ## NULL ##  ## $response ## [1] \"BRU_response\" ##  ## $inla.family ## [1] \"gaussian\" ##  ## $domain ## NULL ##  ## $used ## Used effects : field ## Used latent  :  ##  ## $allow_combine ## [1] FALSE ##  ## $control.family ## NULL ##  ## $drange ## $drange$y ## [1] -1.583242  3.366446 ##  ##  ## attr(,\"class\") ## [1] \"bru_like\" \"list\"     ##  ## attr(,\"class\") ## [1] \"bru_like_list\" \"list\"          ## [1] \"Time:\" ## Time difference of 32.93181 secs ## [[1]] ## $family ## [1] \"gaussian\" ##  ## $formula ## y ~ . ## <environment: 0x55d6c268c288> ##  ## $response_data ## $response_data$BRU_response ##   [1] -0.6564884845 -0.6522754718  2.4784371624  3.1266807308  0.1104985086 ##   [6] -0.1629208222  1.2827079849  0.4623710817  1.6007342197  0.2004712612 ##  [11]  1.5997815657  2.0013010075  1.9313976028  0.6986495286  0.2028844589 ##  [16] -0.6569898031  1.8439041359  0.4613251346  0.0475099638  0.2793059776 ##  [21]  0.2626245367  0.7865389013 -0.4125290087  0.6300846260  0.1517012518 ##  [26]  0.3405696631  0.5100312939  0.8336630877  0.1699811139  2.3655289002 ##  [31] -0.3574352472  0.3652285678  2.1540144594  1.3296347014  0.5472714194 ##  [36]  0.0318348795  0.5290994216  0.3641179331 -0.0642870761 -0.4889755469 ##  [41]  0.0006467918  2.2887683256  0.8957615190 -0.4390824388  0.5137607453 ##  [46]  0.3377304972  2.5373883140  0.2839770349 -0.2908501629  0.3337631420 ##  [51]  1.4965863978  1.2437431162  0.8462307601  1.2591521260  0.6852309527 ##  [56]  2.4920198664  0.0671124114  2.2190423926 -0.0551943750  0.2023161279 ##  [61]  2.4602632257 -0.2181506320  0.5405931712 -0.7163467883 -0.0245921255 ##  [66]  0.0427846486  0.0095348450 -0.2823511613  0.2580446118  2.4245730401 ##  [71]  1.6323612971  2.9951633826  3.0190475101  0.0976956348  0.4951138384 ##  [76]  1.4132308158  0.0664846609  0.7189351589  0.2069838081  2.9610163246 ##  [81]  0.1029084787  0.1241111967  0.5141758262  0.4585031968  2.5005368172 ##  [86]  1.1207939658  0.2385539569  1.3630772694 -0.7670771055 -0.2412796293 ##  [91]  0.5925318415  0.4762677875  1.5903791612 -0.4241543124  1.8191666152 ##  [96]  0.3611232589  0.2125754650 -0.5199408157 -0.1243239659  1.6029842345 ## [101] -0.9048173408 -0.3147929930  2.2654510877  1.2494583521  0.4005508901 ## [106]  2.0111920789  0.7521734976  1.0610938011  0.5329757035  0.3049321823 ## [111]  0.4578249965  0.8987835232  2.3201752744  1.1992920540  0.2508547167 ## [116]  0.0013205355  0.9608086364 -0.2515045084  3.0760798038  1.9290753213 ##  ## $response_data$BRU_E ## [1] 1 ##  ## $response_data$BRU_Ntrials ## [1] 1 ##  ## $response_data$BRU_scale ## [1] 1 ##  ##  ## $data ##                 coordinates             y ## 3      (1.357563, 3.300582) -0.6564884845 ## 4      (3.171651, 4.781028) -0.6522754718 ## 5      (7.662535, 1.354513)  2.4784371624 ## 18     (6.517283, 0.410103)  3.1266807308 ## 19    (2.405562, 0.3811053)  0.1104985086 ## 20    (0.8679275, 3.450187) -0.1629208222 ## 23     (7.806483, 3.273198)  1.2827079849 ## 25     (3.171721, 1.728367)  0.4623710817 ## 29      (8.459004, 3.91904)  1.6007342197 ## 32     (3.139815, 3.245004)  0.2004712612 ## 33      (9.446767, 2.88087)  1.5997815657 ## 37      (7.305513, 1.54024)  2.0013010075 ## 42    (8.404564, 0.6579005)  1.9313976028 ## 58     (9.100522, 3.845274)  0.6986495286 ## 59     (2.589966, 1.384391)  0.2028844589 ## 66     (2.320934, 3.945037) -0.6569898031 ## 77     (4.837289, 1.518207)  1.8439041359 ## 81    (0.2583625, 2.049845)  0.4613251346 ## 82     (4.059255, 1.356691)  0.0475099638 ## 86    (5.078129, 0.2371126)  0.2793059776 ## 87     (5.543718, 4.833423)  0.2626245367 ## 91     (8.159941, 4.958288)  0.7865389013 ## 94   (0.6571936, 0.4387302) -0.4125290087 ## 97     (8.696154, 1.127887)  0.6300846260 ## 101    (3.652162, 1.408331)  0.1517012518 ## 102   (4.765848, 0.4044027)  0.3405696631 ## 104    (4.794563, 4.287101)  0.5100312939 ## 107    (9.060612, 3.315835)  0.8336630877 ## 110   (0.5791003, 1.036138)  0.1699811139 ## 115    (5.778222, 3.167043)  2.3655289002 ## 127      (9.5896, 1.551667) -0.3574352472 ## 128   (0.9029276, 4.296079)  0.3652285678 ## 131     (7.778715, 1.20637)  2.1540144594 ## 133    (6.247239, 3.774221)  1.3296347014 ## 154    (2.374789, 1.266402)  0.5472714194 ## 156    (3.439523, 2.038872)  0.0318348795 ## 163    (2.809017, 1.282038)  0.5290994216 ## 167    (2.621646, 3.466512)  0.3641179331 ## 176    (3.616839, 3.995792) -0.0642870761 ## 180   (0.5118592, 2.174813) -0.4889755469 ## 190     (4.69608, 4.517929)  0.0006467918 ## 193    (7.526312, 1.168505)  2.2887683256 ## 194    (2.438755, 2.157226)  0.8957615190 ## 197    (1.144203, 2.656874) -0.4390824388 ## 200    (9.767728, 3.282002)  0.5137607453 ## 206    (2.219531, 3.101374)  0.3377304972 ## 210    (7.569693, 2.048543)  2.5373883140 ## 212   (8.906289, 0.2174044)  0.2839770349 ## 215    (9.477757, 0.276064) -0.2908501629 ## 217   (1.786597, 0.1291328)  0.3337631420 ## 222     (8.667424, 2.82618)  1.4965863978 ## 224    (7.319565, 4.712902)  1.2437431162 ## 230    (4.491369, 1.491822)  0.8462307601 ## 233   (5.418842, 0.4105507)  1.2591521260 ## 247     (9.57917, 3.341107)  0.6852309527 ## 265    (6.160639, 1.492451)  2.4920198664 ## 266 (4.791258, 0.008181592)  0.0671124114 ## 270    (7.996169, 2.528184)  2.2190423926 ## 275    (3.338752, 3.902063) -0.0551943750 ## 284    (3.564393, 2.138836)  0.2023161279 ## 286     (4.824225, 2.24806)  2.4602632257 ## 288    (3.176236, 4.042111) -0.2181506320 ## 289   (3.354675, 0.7675957)  0.5405931712 ## 290    (1.614027, 2.762526) -0.7163467883 ## 294    (1.961709, 2.247632) -0.0245921255 ## 300    (4.150255, 4.517357)  0.0427846486 ## 302    (2.075576, 2.930268)  0.0095348450 ## 305    (2.394938, 3.667676) -0.2823511613 ## 307     (4.42731, 3.412852)  0.2580446118 ## 314    (7.880802, 2.200437)  2.4245730401 ## 315     (6.92358, 2.979684)  1.6323612971 ## 327    (5.308246, 1.263132)  2.9951633826 ## 332   (6.660556, 0.1104589)  3.0190475101 ## 333    (5.544149, 4.163552)  0.0976956348 ## 335    (7.433871, 3.547134)  0.4951138384 ## 336    (8.470498, 3.316764)  1.4132308158 ## 337    (3.685227, 3.038229)  0.0664846609 ## 338    (4.412435, 3.086132)  0.7189351589 ## 342    (5.037119, 4.187911)  0.2069838081 ## 348   (6.822793, 0.5278166)  2.9610163246 ## 355    (5.019276, 4.813659)  0.1029084787 ## 360    (2.793963, 2.837331)  0.1241111967 ## 367    (2.028375, 1.743929)  0.5141758262 ## 368   (3.165539, 0.7068487)  0.4585031968 ## 376    (7.514328, 1.447844)  2.5005368172 ## 381     (1.20655, 1.498399)  1.1207939658 ## 391   (0.2518638, 2.705812)  0.2385539569 ## 392    (8.240605, 3.287507)  1.3630772694 ## 395    (9.380045, 4.652021) -0.7670771055 ## 397  (9.489378, 0.06883399) -0.2412796293 ## 399    (2.867936, 1.557783)  0.5925318415 ## 406   (2.737303, 0.2934272)  0.4762677875 ## 427     (6.776022, 4.09754)  1.5903791612 ## 434    (9.452898, 4.827512) -0.4241543124 ## 436    (7.357314, 1.140396)  1.8191666152 ## 437    (0.676825, 1.536298)  0.3611232589 ## 438     (3.70809, 1.733426)  0.2125754650 ## 452    (9.922463, 1.174754) -0.5199408157 ## 456    (3.733072, 3.977215) -0.1243239659 ## 465    (8.282394, 1.592013)  1.6029842345 ## 468    (9.067707, 1.249281) -0.9048173408 ## 471     (2.48399, 2.618035) -0.3147929930 ## 479    (7.502298, 1.367884)  2.2654510877 ## 483    (7.692362, 3.794863)  1.2494583521 ## 493    (4.149254, 2.166342)  0.4005508901 ## 494   (5.940315, 0.5918995)  2.0111920789 ## 496     (6.464812, 4.87927)  0.7521734976 ## 507    (4.471439, 1.792583)  1.0610938011 ## 515    (1.320147, 1.120956)  0.5329757035 ## 522    (1.384427, 3.852615)  0.3049321823 ## 524      (4.8957, 3.862456)  0.4578249965 ## 540    (8.695314, 4.444222)  0.8987835232 ## 542    (6.200097, 1.499073)  2.3201752744 ## 553    (9.445448, 2.791799)  1.1992920540 ## 556    (3.467108, 3.081334)  0.2508547167 ## 564    (3.807035, 3.577962)  0.0013205355 ## 576     (8.866981, 4.42837)  0.9608086364 ## 581    (3.835713, 4.001397) -0.2515045084 ## 597    (5.206548, 2.042345)  3.0760798038 ## 598    (7.047124, 2.546437)  1.9290753213 ##  ## $E ## [1] 1 ##  ## $Ntrials ## [1] 1 ##  ## $weights ## [1] 1 ##  ## $scale ## [1] 1 ##  ## $samplers ## NULL ##  ## $linear ## [1] TRUE ##  ## $expr ## NULL ##  ## $response ## [1] \"BRU_response\" ##  ## $inla.family ## [1] \"gaussian\" ##  ## $domain ## NULL ##  ## $used ## Used effects : field ## Used latent  :  ##  ## $allow_combine ## [1] FALSE ##  ## $control.family ## NULL ##  ## $drange ## $drange$y ## [1] -0.9048173  3.1266807 ##  ##  ## attr(,\"class\") ## [1] \"bru_like\" \"list\"     ##  ## attr(,\"class\") ## [1] \"bru_like_list\" \"list\"          ## [1] \"Time:\" ## Time difference of 6.088377 secs ## [[1]] ## $family ## [1] \"gaussian\" ##  ## $formula ## y ~ . ## <environment: 0x55d6afd64a98> ##  ## $response_data ## $response_data$BRU_response ##   [1] -0.6564884845 -0.6522754718  2.4784371624  3.1266807308  0.1104985086 ##   [6] -0.1629208222  1.2827079849  0.4623710817  1.6007342197  0.2004712612 ##  [11]  1.5997815657  2.0013010075  1.9313976028  0.6986495286  0.2028844589 ##  [16] -0.6569898031  1.8439041359  0.4613251346  0.0475099638  0.2793059776 ##  [21]  0.2626245367  0.7865389013 -0.4125290087  0.6300846260  0.1517012518 ##  [26]  0.3405696631  0.5100312939  0.8336630877  0.1699811139  2.3655289002 ##  [31] -0.3574352472  0.3652285678  2.1540144594  1.3296347014  0.5472714194 ##  [36]  0.0318348795  0.5290994216  0.3641179331 -0.0642870761 -0.4889755469 ##  [41]  0.0006467918  2.2887683256  0.8957615190 -0.4390824388  0.5137607453 ##  [46]  0.3377304972  2.5373883140  0.2839770349 -0.2908501629  0.3337631420 ##  [51]  1.4965863978  1.2437431162  0.8462307601  1.2591521260  0.6852309527 ##  [56]  2.4920198664  0.0671124114  2.2190423926 -0.0551943750  0.2023161279 ##  [61]  2.4602632257 -0.2181506320  0.5405931712 -0.7163467883 -0.0245921255 ##  [66]  0.0427846486  0.0095348450 -0.2823511613  0.2580446118  2.4245730401 ##  [71]  1.6323612971  2.9951633826  3.0190475101  0.0976956348  0.4951138384 ##  [76]  1.4132308158  0.0664846609  0.7189351589  0.2069838081  2.9610163246 ##  [81]  0.1029084787  0.1241111967  0.5141758262  0.4585031968  2.5005368172 ##  [86]  1.1207939658  0.2385539569  1.3630772694 -0.7670771055 -0.2412796293 ##  [91]  0.5925318415  0.4762677875  1.5903791612 -0.4241543124  1.8191666152 ##  [96]  0.3611232589  0.2125754650 -0.5199408157 -0.1243239659  1.6029842345 ## [101] -0.9048173408 -0.3147929930  2.2654510877  1.2494583521  0.4005508901 ## [106]  2.0111920789  0.7521734976  1.0610938011  0.5329757035  0.3049321823 ## [111]  0.4578249965  0.8987835232  2.3201752744  1.1992920540  0.2508547167 ## [116]  0.0013205355  0.9608086364 -0.2515045084  3.0760798038  1.9290753213 ##  ## $response_data$BRU_E ## [1] 1 ##  ## $response_data$BRU_Ntrials ## [1] 1 ##  ## $response_data$BRU_scale ## [1] 1 ##  ##  ## $data ##                 coordinates             y ## 3      (1.357563, 3.300582) -0.6564884845 ## 4      (3.171651, 4.781028) -0.6522754718 ## 5      (7.662535, 1.354513)  2.4784371624 ## 18     (6.517283, 0.410103)  3.1266807308 ## 19    (2.405562, 0.3811053)  0.1104985086 ## 20    (0.8679275, 3.450187) -0.1629208222 ## 23     (7.806483, 3.273198)  1.2827079849 ## 25     (3.171721, 1.728367)  0.4623710817 ## 29      (8.459004, 3.91904)  1.6007342197 ## 32     (3.139815, 3.245004)  0.2004712612 ## 33      (9.446767, 2.88087)  1.5997815657 ## 37      (7.305513, 1.54024)  2.0013010075 ## 42    (8.404564, 0.6579005)  1.9313976028 ## 58     (9.100522, 3.845274)  0.6986495286 ## 59     (2.589966, 1.384391)  0.2028844589 ## 66     (2.320934, 3.945037) -0.6569898031 ## 77     (4.837289, 1.518207)  1.8439041359 ## 81    (0.2583625, 2.049845)  0.4613251346 ## 82     (4.059255, 1.356691)  0.0475099638 ## 86    (5.078129, 0.2371126)  0.2793059776 ## 87     (5.543718, 4.833423)  0.2626245367 ## 91     (8.159941, 4.958288)  0.7865389013 ## 94   (0.6571936, 0.4387302) -0.4125290087 ## 97     (8.696154, 1.127887)  0.6300846260 ## 101    (3.652162, 1.408331)  0.1517012518 ## 102   (4.765848, 0.4044027)  0.3405696631 ## 104    (4.794563, 4.287101)  0.5100312939 ## 107    (9.060612, 3.315835)  0.8336630877 ## 110   (0.5791003, 1.036138)  0.1699811139 ## 115    (5.778222, 3.167043)  2.3655289002 ## 127      (9.5896, 1.551667) -0.3574352472 ## 128   (0.9029276, 4.296079)  0.3652285678 ## 131     (7.778715, 1.20637)  2.1540144594 ## 133    (6.247239, 3.774221)  1.3296347014 ## 154    (2.374789, 1.266402)  0.5472714194 ## 156    (3.439523, 2.038872)  0.0318348795 ## 163    (2.809017, 1.282038)  0.5290994216 ## 167    (2.621646, 3.466512)  0.3641179331 ## 176    (3.616839, 3.995792) -0.0642870761 ## 180   (0.5118592, 2.174813) -0.4889755469 ## 190     (4.69608, 4.517929)  0.0006467918 ## 193    (7.526312, 1.168505)  2.2887683256 ## 194    (2.438755, 2.157226)  0.8957615190 ## 197    (1.144203, 2.656874) -0.4390824388 ## 200    (9.767728, 3.282002)  0.5137607453 ## 206    (2.219531, 3.101374)  0.3377304972 ## 210    (7.569693, 2.048543)  2.5373883140 ## 212   (8.906289, 0.2174044)  0.2839770349 ## 215    (9.477757, 0.276064) -0.2908501629 ## 217   (1.786597, 0.1291328)  0.3337631420 ## 222     (8.667424, 2.82618)  1.4965863978 ## 224    (7.319565, 4.712902)  1.2437431162 ## 230    (4.491369, 1.491822)  0.8462307601 ## 233   (5.418842, 0.4105507)  1.2591521260 ## 247     (9.57917, 3.341107)  0.6852309527 ## 265    (6.160639, 1.492451)  2.4920198664 ## 266 (4.791258, 0.008181592)  0.0671124114 ## 270    (7.996169, 2.528184)  2.2190423926 ## 275    (3.338752, 3.902063) -0.0551943750 ## 284    (3.564393, 2.138836)  0.2023161279 ## 286     (4.824225, 2.24806)  2.4602632257 ## 288    (3.176236, 4.042111) -0.2181506320 ## 289   (3.354675, 0.7675957)  0.5405931712 ## 290    (1.614027, 2.762526) -0.7163467883 ## 294    (1.961709, 2.247632) -0.0245921255 ## 300    (4.150255, 4.517357)  0.0427846486 ## 302    (2.075576, 2.930268)  0.0095348450 ## 305    (2.394938, 3.667676) -0.2823511613 ## 307     (4.42731, 3.412852)  0.2580446118 ## 314    (7.880802, 2.200437)  2.4245730401 ## 315     (6.92358, 2.979684)  1.6323612971 ## 327    (5.308246, 1.263132)  2.9951633826 ## 332   (6.660556, 0.1104589)  3.0190475101 ## 333    (5.544149, 4.163552)  0.0976956348 ## 335    (7.433871, 3.547134)  0.4951138384 ## 336    (8.470498, 3.316764)  1.4132308158 ## 337    (3.685227, 3.038229)  0.0664846609 ## 338    (4.412435, 3.086132)  0.7189351589 ## 342    (5.037119, 4.187911)  0.2069838081 ## 348   (6.822793, 0.5278166)  2.9610163246 ## 355    (5.019276, 4.813659)  0.1029084787 ## 360    (2.793963, 2.837331)  0.1241111967 ## 367    (2.028375, 1.743929)  0.5141758262 ## 368   (3.165539, 0.7068487)  0.4585031968 ## 376    (7.514328, 1.447844)  2.5005368172 ## 381     (1.20655, 1.498399)  1.1207939658 ## 391   (0.2518638, 2.705812)  0.2385539569 ## 392    (8.240605, 3.287507)  1.3630772694 ## 395    (9.380045, 4.652021) -0.7670771055 ## 397  (9.489378, 0.06883399) -0.2412796293 ## 399    (2.867936, 1.557783)  0.5925318415 ## 406   (2.737303, 0.2934272)  0.4762677875 ## 427     (6.776022, 4.09754)  1.5903791612 ## 434    (9.452898, 4.827512) -0.4241543124 ## 436    (7.357314, 1.140396)  1.8191666152 ## 437    (0.676825, 1.536298)  0.3611232589 ## 438     (3.70809, 1.733426)  0.2125754650 ## 452    (9.922463, 1.174754) -0.5199408157 ## 456    (3.733072, 3.977215) -0.1243239659 ## 465    (8.282394, 1.592013)  1.6029842345 ## 468    (9.067707, 1.249281) -0.9048173408 ## 471     (2.48399, 2.618035) -0.3147929930 ## 479    (7.502298, 1.367884)  2.2654510877 ## 483    (7.692362, 3.794863)  1.2494583521 ## 493    (4.149254, 2.166342)  0.4005508901 ## 494   (5.940315, 0.5918995)  2.0111920789 ## 496     (6.464812, 4.87927)  0.7521734976 ## 507    (4.471439, 1.792583)  1.0610938011 ## 515    (1.320147, 1.120956)  0.5329757035 ## 522    (1.384427, 3.852615)  0.3049321823 ## 524      (4.8957, 3.862456)  0.4578249965 ## 540    (8.695314, 4.444222)  0.8987835232 ## 542    (6.200097, 1.499073)  2.3201752744 ## 553    (9.445448, 2.791799)  1.1992920540 ## 556    (3.467108, 3.081334)  0.2508547167 ## 564    (3.807035, 3.577962)  0.0013205355 ## 576     (8.866981, 4.42837)  0.9608086364 ## 581    (3.835713, 4.001397) -0.2515045084 ## 597    (5.206548, 2.042345)  3.0760798038 ## 598    (7.047124, 2.546437)  1.9290753213 ##  ## $E ## [1] 1 ##  ## $Ntrials ## [1] 1 ##  ## $weights ## [1] 1 ##  ## $scale ## [1] 1 ##  ## $samplers ## NULL ##  ## $linear ## [1] TRUE ##  ## $expr ## NULL ##  ## $response ## [1] \"BRU_response\" ##  ## $inla.family ## [1] \"gaussian\" ##  ## $domain ## NULL ##  ## $used ## Used effects : field ## Used latent  :  ##  ## $allow_combine ## [1] FALSE ##  ## $control.family ## NULL ##  ## $drange ## $drange$y ## [1] -0.9048173  3.1266807 ##  ##  ## attr(,\"class\") ## [1] \"bru_like\" \"list\"     ##  ## attr(,\"class\") ## [1] \"bru_like_list\" \"list\"          ## [1] \"Time:\" ## Time difference of 10.45923 secs ## [[1]] ## $family ## [1] \"gaussian\" ##  ## $formula ## y ~ . ## <environment: 0x55d6c268c288> ##  ## $response_data ## $response_data$BRU_response ##   [1]  1.53743845  0.55305302 -0.16292082 -0.51583288 -0.39200325  2.45224610 ##   [7]  2.46870404 -0.83850625  0.20288446  1.56486332  0.34714237  1.29634764 ##  [13]  0.04750996 -0.41252901 -0.06575674  0.34056966 -0.33815598  1.04917938 ##  [19]  0.22527352  0.16998111  0.04573421  1.48250737  0.47356353  1.32963470 ##  [25]  0.56993188  1.13305590  0.03912215 -0.27549393  1.58968708  0.45338278 ##  [31]  0.89750742  0.14206956  1.95429835 -0.48897555  1.80422367 -0.07267040 ##  [37]  0.37214130  0.52637489  0.51376075 -0.35768879  1.81428245 -0.64498322 ##  [43]  1.70741538  1.25915213 -0.74155852  1.55484617  2.00225544  1.52720488 ##  [49]  0.24514070  0.20611915  2.04747359  0.06711241  0.19957596 -0.05519438 ##  [55]  0.07565800  1.12935373  0.54059317 -0.01754597  1.05356019  2.46944180 ##  [61]  0.84945033  1.00833313 -0.21780125  2.02682069 -0.57149675  1.46281827 ##  [67]  1.90030195  1.46423674  1.36316431 -0.05017148  0.06469782  0.10936765 ##  [73] -0.08909496  0.44140468  1.12079397 -0.81932756  0.25639885  0.23855396 ##  [79]  1.36307727  2.01952219  2.19221909 -0.76707711  2.75283310 -0.24127963 ##  [85]  0.59253184  0.19868274  0.35389085  1.12819715  2.19380228  1.45718251 ##  [91]  1.59037916 -0.39041035  0.05300453  0.35054629  2.34210110  0.12553015 ##  [97] -0.31479299  2.26545109 -0.10928745  2.01119208  0.05136053  1.07374017 ## [103]  0.94844780  0.18075501  0.56652030  0.20923867  1.86753963  0.53297570 ## [109]  1.14141042  0.21136276  0.33100929  0.12398347  0.35070277  0.84358777 ## [115]  1.70790511  1.00153860  1.32403269 -0.28694090 -0.34879775  1.89598465 ##  ## $response_data$BRU_E ## [1] 1 ##  ## $response_data$BRU_Ntrials ## [1] 1 ##  ## $response_data$BRU_scale ## [1] 1 ##  ##  ## $data ##                 coordinates           y ## 1      (8.594981, 2.680497)  1.53743845 ## 14   (0.08103577, 1.532909)  0.55305302 ## 20    (0.8679275, 3.450187) -0.16292082 ## 21     (2.966763, 4.853776) -0.51583288 ## 38    (3.918428, 0.4856529) -0.39200325 ## 44     (7.749321, 1.982572)  2.45224610 ## 47     (6.133916, 2.230922)  2.46870404 ## 57    (9.762721, 0.4147048) -0.83850625 ## 59     (2.589966, 1.384391)  0.20288446 ## 62     (4.392852, 2.386175)  1.56486332 ## 69      (2.30139, 2.316288)  0.34714237 ## 73     (1.839418, 4.983126)  1.29634764 ## 82     (4.059255, 1.356691)  0.04750996 ## 94   (0.6571936, 0.4387302) -0.41252901 ## 95  (0.08806119, 0.5143986) -0.06575674 ## 102   (4.765848, 0.4044027)  0.34056966 ## 105    (2.643127, 3.840452) -0.33815598 ## 106    (4.899329, 3.021572)  1.04917938 ## 108    (5.009973, 3.734563)  0.22527352 ## 110   (0.5791003, 1.036138)  0.16998111 ## 113  (0.1885503, 0.4932166)  0.04573421 ## 117     (7.35261, 4.109116)  1.48250737 ## 121    (1.652152, 3.872303)  0.47356353 ## 133    (6.247239, 3.774221)  1.32963470 ## 134    (3.880409, 2.499269)  0.56993188 ## 137    (8.737418, 3.046678)  1.13305590 ## 159      (2.672858, 2.8466)  0.03912215 ## 160  (0.6978112, 0.1516993) -0.27549393 ## 165    (8.182293, 3.839233)  1.58968708 ## 166      (1.173343, 3.9047)  0.45338278 ## 169    (9.583845, 3.296534)  0.89750742 ## 170    (3.176252, 3.813355)  0.14206956 ## 177    (4.662933, 2.045562)  1.95429835 ## 180   (0.5118592, 2.174813) -0.48897555 ## 182    (6.634763, 1.831506)  1.80422367 ## 186    (3.731879, 3.563026) -0.07267040 ## 192      (2.099873, 4.8055)  0.37214130 ## 198     (1.34756, 4.667505)  0.52637489 ## 200    (9.767728, 3.282002)  0.51376075 ## 223   (0.6469913, 2.240582) -0.35768879 ## 228   (5.952019, 0.4625379)  1.81428245 ## 229   (0.4318224, 4.425763) -0.64498322 ## 232   (8.006751, 0.5595053)  1.70741538 ## 233   (5.418842, 0.4105507)  1.25915213 ## 235  (0.06785675, 4.305523) -0.74155852 ## 236    (4.468248, 2.066052)  1.55484617 ## 242    (8.072817, 1.522355)  2.00225544 ## 243   (5.943374, 0.1076233)  1.52720488 ## 249  (0.04237858, 2.354691)  0.24514070 ## 256    (1.455975, 4.208936)  0.20611915 ## 260    (6.118998, 2.926033)  2.04747359 ## 266 (4.791258, 0.008181592)  0.06711241 ## 269    (4.085919, 3.174906)  0.19957596 ## 275    (3.338752, 3.902063) -0.05519438 ## 278   (0.3647306, 1.350921)  0.07565800 ## 283     (8.665013, 1.90649)  1.12935373 ## 289   (3.354675, 0.7675957)  0.54059317 ## 292    (1.834092, 3.643435) -0.01754597 ## 296     (3.302644, 1.23206)  1.05356019 ## 297    (6.015682, 2.368481)  2.46944180 ## 301    (1.444304, 4.755057)  0.84945033 ## 303     (7.65929, 3.225072)  1.00833313 ## 304    (4.816272, 4.716079) -0.21780125 ## 313    (6.887628, 2.386156)  2.02682069 ## 321    (9.322777, 4.508249) -0.57149675 ## 323    (6.453924, 1.359498)  1.46281827 ## 329    (6.016213, 1.038579)  1.90030195 ## 331     (6.46699, 4.249964)  1.46423674 ## 339    (8.706238, 2.977778)  1.36316431 ## 340    (4.088476, 3.384361) -0.05017148 ## 341    (4.849703, 4.900245)  0.06469782 ## 358    (2.561338, 2.454977)  0.10936765 ## 374    (9.219679, 1.882409) -0.08909496 ## 375   (2.524803, 0.2331395)  0.44140468 ## 381     (1.20655, 1.498399)  1.12079397 ## 386   (0.3792608, 4.790484) -0.81932756 ## 388   (3.266905, 0.6505034)  0.25639885 ## 391   (0.2518638, 2.705812)  0.23855396 ## 392    (8.240605, 3.287507)  1.36307727 ## 393    (5.114314, 2.880658)  2.01952219 ## 394    (7.667077, 2.524956)  2.19221909 ## 395    (9.380045, 4.652021) -0.76707711 ## 396     (5.41961, 1.133036)  2.75283310 ## 397  (9.489378, 0.06883399) -0.24127963 ## 399    (2.867936, 1.557783)  0.59253184 ## 411    (3.425402, 4.413912)  0.19868274 ## 418     (9.74798, 2.644043)  0.35389085 ## 420    (6.385012, 3.584249)  1.12819715 ## 421    (4.938933, 1.214062)  2.19380228 ## 423    (1.854198, 4.976591)  1.45718251 ## 427     (6.776022, 4.09754)  1.59037916 ## 429    (3.072225, 2.134001) -0.39041035 ## 431    (1.532962, 3.645054)  0.05300453 ## 439   (2.175135, 0.2185995)  0.35054629 ## 458   (8.399722, 0.4625542)  2.34210110 ## 463    (1.07915, 0.1059277)  0.12553015 ## 471     (2.48399, 2.618035) -0.31479299 ## 479    (7.502298, 1.367884)  2.26545109 ## 488    (1.785281, 3.634364) -0.10928745 ## 494   (5.940315, 0.5918995)  2.01119208 ## 497    (3.580266, 3.308743)  0.05136053 ## 498     (8.718459, 4.42073)  1.07374017 ## 501    (8.893126, 4.430691)  0.94844780 ## 503   (0.0994651, 3.900551)  0.18075501 ## 506    (9.655488, 2.738529)  0.56652030 ## 511    (9.472872, 2.282848)  0.20923867 ## 514   (5.797955, 0.4818001)  1.86753963 ## 515    (1.320147, 1.120956)  0.53297570 ## 520     (6.785558, 2.92853)  1.14141042 ## 529     (9.060211, 4.91211)  0.21136276 ## 530    (2.902894, 1.402524)  0.33100929 ## 541     (3.923405, 1.38267)  0.12398347 ## 558    (4.512907, 3.821817)  0.35070277 ## 561    (7.421051, 3.781989)  0.84358777 ## 566    (6.371434, 1.049121)  1.70790511 ## 569    (7.045365, 1.403122)  1.00153860 ## 579    (8.334271, 2.787907)  1.32403269 ## 585    (9.933495, 4.313985) -0.28694090 ## 592    (9.682872, 1.397534) -0.34879775 ## 593    (5.245938, 2.986664)  1.89598465 ##  ## $E ## [1] 1 ##  ## $Ntrials ## [1] 1 ##  ## $weights ## [1] 1 ##  ## $scale ## [1] 1 ##  ## $samplers ## NULL ##  ## $linear ## [1] TRUE ##  ## $expr ## NULL ##  ## $response ## [1] \"BRU_response\" ##  ## $inla.family ## [1] \"gaussian\" ##  ## $domain ## NULL ##  ## $used ## Used effects : field ## Used latent  :  ##  ## $allow_combine ## [1] FALSE ##  ## $control.family ## NULL ##  ## $drange ## $drange$y ## [1] -0.8385063  2.7528331 ##  ##  ## attr(,\"class\") ## [1] \"bru_like\" \"list\"     ##  ## attr(,\"class\") ## [1] \"bru_like_list\" \"list\"          ## [1] \"Time:\" ## Time difference of 5.32389 secs ## [[1]] ## $family ## [1] \"gaussian\" ##  ## $formula ## y ~ . ## <environment: 0x55d6afd64a98> ##  ## $response_data ## $response_data$BRU_response ##   [1]  1.53743845  0.55305302 -0.16292082 -0.51583288 -0.39200325  2.45224610 ##   [7]  2.46870404 -0.83850625  0.20288446  1.56486332  0.34714237  1.29634764 ##  [13]  0.04750996 -0.41252901 -0.06575674  0.34056966 -0.33815598  1.04917938 ##  [19]  0.22527352  0.16998111  0.04573421  1.48250737  0.47356353  1.32963470 ##  [25]  0.56993188  1.13305590  0.03912215 -0.27549393  1.58968708  0.45338278 ##  [31]  0.89750742  0.14206956  1.95429835 -0.48897555  1.80422367 -0.07267040 ##  [37]  0.37214130  0.52637489  0.51376075 -0.35768879  1.81428245 -0.64498322 ##  [43]  1.70741538  1.25915213 -0.74155852  1.55484617  2.00225544  1.52720488 ##  [49]  0.24514070  0.20611915  2.04747359  0.06711241  0.19957596 -0.05519438 ##  [55]  0.07565800  1.12935373  0.54059317 -0.01754597  1.05356019  2.46944180 ##  [61]  0.84945033  1.00833313 -0.21780125  2.02682069 -0.57149675  1.46281827 ##  [67]  1.90030195  1.46423674  1.36316431 -0.05017148  0.06469782  0.10936765 ##  [73] -0.08909496  0.44140468  1.12079397 -0.81932756  0.25639885  0.23855396 ##  [79]  1.36307727  2.01952219  2.19221909 -0.76707711  2.75283310 -0.24127963 ##  [85]  0.59253184  0.19868274  0.35389085  1.12819715  2.19380228  1.45718251 ##  [91]  1.59037916 -0.39041035  0.05300453  0.35054629  2.34210110  0.12553015 ##  [97] -0.31479299  2.26545109 -0.10928745  2.01119208  0.05136053  1.07374017 ## [103]  0.94844780  0.18075501  0.56652030  0.20923867  1.86753963  0.53297570 ## [109]  1.14141042  0.21136276  0.33100929  0.12398347  0.35070277  0.84358777 ## [115]  1.70790511  1.00153860  1.32403269 -0.28694090 -0.34879775  1.89598465 ##  ## $response_data$BRU_E ## [1] 1 ##  ## $response_data$BRU_Ntrials ## [1] 1 ##  ## $response_data$BRU_scale ## [1] 1 ##  ##  ## $data ##                 coordinates           y ## 1      (8.594981, 2.680497)  1.53743845 ## 14   (0.08103577, 1.532909)  0.55305302 ## 20    (0.8679275, 3.450187) -0.16292082 ## 21     (2.966763, 4.853776) -0.51583288 ## 38    (3.918428, 0.4856529) -0.39200325 ## 44     (7.749321, 1.982572)  2.45224610 ## 47     (6.133916, 2.230922)  2.46870404 ## 57    (9.762721, 0.4147048) -0.83850625 ## 59     (2.589966, 1.384391)  0.20288446 ## 62     (4.392852, 2.386175)  1.56486332 ## 69      (2.30139, 2.316288)  0.34714237 ## 73     (1.839418, 4.983126)  1.29634764 ## 82     (4.059255, 1.356691)  0.04750996 ## 94   (0.6571936, 0.4387302) -0.41252901 ## 95  (0.08806119, 0.5143986) -0.06575674 ## 102   (4.765848, 0.4044027)  0.34056966 ## 105    (2.643127, 3.840452) -0.33815598 ## 106    (4.899329, 3.021572)  1.04917938 ## 108    (5.009973, 3.734563)  0.22527352 ## 110   (0.5791003, 1.036138)  0.16998111 ## 113  (0.1885503, 0.4932166)  0.04573421 ## 117     (7.35261, 4.109116)  1.48250737 ## 121    (1.652152, 3.872303)  0.47356353 ## 133    (6.247239, 3.774221)  1.32963470 ## 134    (3.880409, 2.499269)  0.56993188 ## 137    (8.737418, 3.046678)  1.13305590 ## 159      (2.672858, 2.8466)  0.03912215 ## 160  (0.6978112, 0.1516993) -0.27549393 ## 165    (8.182293, 3.839233)  1.58968708 ## 166      (1.173343, 3.9047)  0.45338278 ## 169    (9.583845, 3.296534)  0.89750742 ## 170    (3.176252, 3.813355)  0.14206956 ## 177    (4.662933, 2.045562)  1.95429835 ## 180   (0.5118592, 2.174813) -0.48897555 ## 182    (6.634763, 1.831506)  1.80422367 ## 186    (3.731879, 3.563026) -0.07267040 ## 192      (2.099873, 4.8055)  0.37214130 ## 198     (1.34756, 4.667505)  0.52637489 ## 200    (9.767728, 3.282002)  0.51376075 ## 223   (0.6469913, 2.240582) -0.35768879 ## 228   (5.952019, 0.4625379)  1.81428245 ## 229   (0.4318224, 4.425763) -0.64498322 ## 232   (8.006751, 0.5595053)  1.70741538 ## 233   (5.418842, 0.4105507)  1.25915213 ## 235  (0.06785675, 4.305523) -0.74155852 ## 236    (4.468248, 2.066052)  1.55484617 ## 242    (8.072817, 1.522355)  2.00225544 ## 243   (5.943374, 0.1076233)  1.52720488 ## 249  (0.04237858, 2.354691)  0.24514070 ## 256    (1.455975, 4.208936)  0.20611915 ## 260    (6.118998, 2.926033)  2.04747359 ## 266 (4.791258, 0.008181592)  0.06711241 ## 269    (4.085919, 3.174906)  0.19957596 ## 275    (3.338752, 3.902063) -0.05519438 ## 278   (0.3647306, 1.350921)  0.07565800 ## 283     (8.665013, 1.90649)  1.12935373 ## 289   (3.354675, 0.7675957)  0.54059317 ## 292    (1.834092, 3.643435) -0.01754597 ## 296     (3.302644, 1.23206)  1.05356019 ## 297    (6.015682, 2.368481)  2.46944180 ## 301    (1.444304, 4.755057)  0.84945033 ## 303     (7.65929, 3.225072)  1.00833313 ## 304    (4.816272, 4.716079) -0.21780125 ## 313    (6.887628, 2.386156)  2.02682069 ## 321    (9.322777, 4.508249) -0.57149675 ## 323    (6.453924, 1.359498)  1.46281827 ## 329    (6.016213, 1.038579)  1.90030195 ## 331     (6.46699, 4.249964)  1.46423674 ## 339    (8.706238, 2.977778)  1.36316431 ## 340    (4.088476, 3.384361) -0.05017148 ## 341    (4.849703, 4.900245)  0.06469782 ## 358    (2.561338, 2.454977)  0.10936765 ## 374    (9.219679, 1.882409) -0.08909496 ## 375   (2.524803, 0.2331395)  0.44140468 ## 381     (1.20655, 1.498399)  1.12079397 ## 386   (0.3792608, 4.790484) -0.81932756 ## 388   (3.266905, 0.6505034)  0.25639885 ## 391   (0.2518638, 2.705812)  0.23855396 ## 392    (8.240605, 3.287507)  1.36307727 ## 393    (5.114314, 2.880658)  2.01952219 ## 394    (7.667077, 2.524956)  2.19221909 ## 395    (9.380045, 4.652021) -0.76707711 ## 396     (5.41961, 1.133036)  2.75283310 ## 397  (9.489378, 0.06883399) -0.24127963 ## 399    (2.867936, 1.557783)  0.59253184 ## 411    (3.425402, 4.413912)  0.19868274 ## 418     (9.74798, 2.644043)  0.35389085 ## 420    (6.385012, 3.584249)  1.12819715 ## 421    (4.938933, 1.214062)  2.19380228 ## 423    (1.854198, 4.976591)  1.45718251 ## 427     (6.776022, 4.09754)  1.59037916 ## 429    (3.072225, 2.134001) -0.39041035 ## 431    (1.532962, 3.645054)  0.05300453 ## 439   (2.175135, 0.2185995)  0.35054629 ## 458   (8.399722, 0.4625542)  2.34210110 ## 463    (1.07915, 0.1059277)  0.12553015 ## 471     (2.48399, 2.618035) -0.31479299 ## 479    (7.502298, 1.367884)  2.26545109 ## 488    (1.785281, 3.634364) -0.10928745 ## 494   (5.940315, 0.5918995)  2.01119208 ## 497    (3.580266, 3.308743)  0.05136053 ## 498     (8.718459, 4.42073)  1.07374017 ## 501    (8.893126, 4.430691)  0.94844780 ## 503   (0.0994651, 3.900551)  0.18075501 ## 506    (9.655488, 2.738529)  0.56652030 ## 511    (9.472872, 2.282848)  0.20923867 ## 514   (5.797955, 0.4818001)  1.86753963 ## 515    (1.320147, 1.120956)  0.53297570 ## 520     (6.785558, 2.92853)  1.14141042 ## 529     (9.060211, 4.91211)  0.21136276 ## 530    (2.902894, 1.402524)  0.33100929 ## 541     (3.923405, 1.38267)  0.12398347 ## 558    (4.512907, 3.821817)  0.35070277 ## 561    (7.421051, 3.781989)  0.84358777 ## 566    (6.371434, 1.049121)  1.70790511 ## 569    (7.045365, 1.403122)  1.00153860 ## 579    (8.334271, 2.787907)  1.32403269 ## 585    (9.933495, 4.313985) -0.28694090 ## 592    (9.682872, 1.397534) -0.34879775 ## 593    (5.245938, 2.986664)  1.89598465 ##  ## $E ## [1] 1 ##  ## $Ntrials ## [1] 1 ##  ## $weights ## [1] 1 ##  ## $scale ## [1] 1 ##  ## $samplers ## NULL ##  ## $linear ## [1] TRUE ##  ## $expr ## NULL ##  ## $response ## [1] \"BRU_response\" ##  ## $inla.family ## [1] \"gaussian\" ##  ## $domain ## NULL ##  ## $used ## Used effects : field ## Used latent  :  ##  ## $allow_combine ## [1] FALSE ##  ## $control.family ## NULL ##  ## $drange ## $drange$y ## [1] -0.8385063  2.7528331 ##  ##  ## attr(,\"class\") ## [1] \"bru_like\" \"list\"     ##  ## attr(,\"class\") ## [1] \"bru_like_list\" \"list\"          ## [1] \"Time:\" ## Time difference of 13.8439 secs ## [[1]] ## $family ## [1] \"gaussian\" ##  ## $formula ## y ~ . ## <environment: 0x55d6c268c288> ##  ## $response_data ## $response_data$BRU_response ##   [1] -1.46974693  0.49761528  0.56697452  3.12668073 -0.16292082  2.43810372 ##   [7] -0.26348734 -0.39200325 -0.50374744  0.24440133  0.25930291  0.29222210 ##  [13]  0.83212403 -0.65896898  1.31036235  0.77849308  1.52956805 -0.12011722 ##  [19]  1.38857798  1.14831985  1.83790954  0.78653890  0.63008463 -0.09459863 ##  [25]  0.15170125  1.04917938  0.22527352 -0.03876369  3.08037268  0.87821890 ##  [31]  2.15401446  1.64273666  1.60085031  0.54727142  0.56250442  1.80422367 ##  [37]  1.74638563 -0.07267040 -0.42042780 -0.33608851  2.28876833 -1.21552417 ##  [43]  0.45265241  1.63272202 -0.35768879  1.81428245  0.45383565  2.42878501 ##  [49]  1.16926061  0.20611915  1.39715608  0.19957596 -0.05519438  0.21037486 ##  [55]  2.46026323  0.30015425  2.46944180  1.14275878  0.04278465  1.00833313 ##  [61]  0.53465341  2.02682069  2.99516338 -0.13488276  1.46423674  0.49511384 ##  [67]  1.41323082  0.06648466  2.80711148  1.07319567 -0.17757734  0.10290848 ##  [73]  0.12411120  0.44140468  1.01689425 -0.48517945  1.56985695  2.75283310 ##  [79] -0.24127963  2.92319131  0.90132995  0.47626779  0.79723095  2.98703852 ##  [85]  0.18384092  0.35389085  1.45718251  1.07694075 -0.04743201 -0.17965470 ##  [91] -0.73096004  0.22143637 -0.12109303  0.66526987  0.48390227  0.85408238 ##  [97] -0.89204581 -0.90493241  0.23475914  1.24945835  1.54977192  2.01119208 ## [103]  0.94844780  2.19841141  0.84898807 -0.65949871  0.70986430  0.89878352 ## [109]  0.12398347 -0.39010383  1.00153860  0.21089302 -0.14249520  0.53981300 ## [115] -0.28694090  1.40415252  2.16217792 -0.45737361 -0.10629846  0.16048350 ##  ## $response_data$BRU_E ## [1] 1 ##  ## $response_data$BRU_Ntrials ## [1] 1 ##  ## $response_data$BRU_scale ## [1] 1 ##  ##  ## $data ##                coordinates           y ## 7     (9.251893, 1.280585) -1.46974693 ## 10    (1.353344, 1.956849)  0.49761528 ## 12    (2.316051, 1.865139)  0.56697452 ## 18    (6.517283, 0.410103)  3.12668073 ## 20   (0.8679275, 3.450187) -0.16292082 ## 27    (4.902559, 1.948775)  2.43810372 ## 31    (1.139897, 2.083543) -0.26348734 ## 38   (3.918428, 0.4856529) -0.39200325 ## 40    (2.572323, 4.448756) -0.50374744 ## 45     (3.0784, 0.6510523)  0.24440133 ## 46    (6.415629, 4.498005)  0.25930291 ## 48    (2.265546, 2.167373)  0.29222210 ## 49    (2.461592, 2.086142)  0.83212403 ## 52   (0.2566116, 3.952345) -0.65896898 ## 53     (7.553331, 4.20413)  1.31036235 ## 55     (8.930659, 2.28618)  0.77849308 ## 67     (8.277897, 1.25123)  1.52956805 ## 70  (0.8881443, 0.1772808) -0.12011722 ## 71    (6.351936, 3.050798)  1.38857798 ## 72    (8.565509, 2.001331)  1.14831985 ## 88    (8.412401, 0.798832)  1.83790954 ## 91    (8.159941, 4.958288)  0.78653890 ## 97    (8.696154, 1.127887)  0.63008463 ## 99     (0.37575, 3.037941) -0.09459863 ## 101   (3.652162, 1.408331)  0.15170125 ## 106   (4.899329, 3.021572)  1.04917938 ## 108   (5.009973, 3.734563)  0.22527352 ## 120    (4.249329, 4.29261) -0.03876369 ## 122   (6.040476, 1.911682)  3.08037268 ## 123    (8.257604, 4.93522)  0.87821890 ## 131    (7.778715, 1.20637)  2.15401446 ## 132    (8.51408, 2.621992)  1.64273666 ## 136   (8.816728, 2.517827)  1.60085031 ## 154   (2.374789, 1.266402)  0.54727142 ## 158   (3.250279, 1.741229)  0.56250442 ## 182   (6.634763, 1.831506)  1.80422367 ## 183   (6.638664, 1.904938)  1.74638563 ## 186   (3.731879, 3.563026) -0.07267040 ## 187   (1.054956, 2.176588) -0.42042780 ## 191   (3.240884, 4.689355) -0.33608851 ## 193   (7.526312, 1.168505)  2.28876833 ## 199  (9.844768, 0.4520245) -1.21552417 ## 219   (1.146435, 4.326072)  0.45265241 ## 220   (4.712784, 1.508073)  1.63272202 ## 223  (0.6469913, 2.240582) -0.35768879 ## 228  (5.952019, 0.4625379)  1.81428245 ## 238   (7.932701, 4.649456)  0.45383565 ## 252  (5.731279, 0.8910044)  2.42878501 ## 255   (8.762269, 4.387986)  1.16926061 ## 256   (1.455975, 4.208936)  0.20611915 ## 263   (6.895698, 4.030652)  1.39715608 ## 269   (4.085919, 3.174906)  0.19957596 ## 275   (3.338752, 3.902063) -0.05519438 ## 282    (3.535728, 4.42935)  0.21037486 ## 286    (4.824225, 2.24806)  2.46026323 ## 295   (1.040102, 3.784912)  0.30015425 ## 297   (6.015682, 2.368481)  2.46944180 ## 298   (6.904089, 1.139497)  1.14275878 ## 300   (4.150255, 4.517357)  0.04278465 ## 303    (7.65929, 3.225072)  1.00833313 ## 306   (7.964013, 4.751293)  0.53465341 ## 313   (6.887628, 2.386156)  2.02682069 ## 327   (5.308246, 1.263132)  2.99516338 ## 330    (2.631807, 2.51796) -0.13488276 ## 331    (6.46699, 4.249964)  1.46423674 ## 335   (7.433871, 3.547134)  0.49511384 ## 336   (8.470498, 3.316764)  1.41323082 ## 337   (3.685227, 3.038229)  0.06648466 ## 346   (5.569291, 2.158475)  2.80711148 ## 349   (8.906574, 4.158312)  1.07319567 ## 354   (1.300415, 2.168761) -0.17757734 ## 355   (5.019276, 4.813659)  0.10290848 ## 360   (2.793963, 2.837331)  0.12411120 ## 375  (2.524803, 0.2331395)  0.44140468 ## 377   (2.043386, 4.998441)  1.01689425 ## 379   (3.020144, 4.975152) -0.48517945 ## 384   (8.538898, 4.076565)  1.56985695 ## 396    (5.41961, 1.133036)  2.75283310 ## 397 (9.489378, 0.06883399) -0.24127963 ## 404  (6.967856, 0.4228904)  2.92319131 ## 405   (7.611821, 4.278237)  0.90132995 ## 406  (2.737303, 0.2934272)  0.47626779 ## 407  (0.0520811, 1.639886)  0.79723095 ## 409    (5.978169, 1.66948)  2.98703852 ## 415  (0.2242172, 2.201305)  0.18384092 ## 418    (9.74798, 2.644043)  0.35389085 ## 423   (1.854198, 4.976591)  1.45718251 ## 426   (8.916793, 3.418483)  1.07694075 ## 428    (5.13768, 3.827838) -0.04743201 ## 433   (2.703542, 2.394874) -0.17965470 ## 435    (2.522604, 4.56852) -0.73096004 ## 443   (4.126111, 2.030218)  0.22143637 ## 445    (6.291269, 4.64161) -0.12109303 ## 451   (9.299994, 3.184579)  0.66526987 ## 464   (4.271672, 1.059567)  0.48390227 ## 472    (1.34266, 1.649327)  0.85408238 ## 475   (9.556354, 1.116005) -0.89204581 ## 476   (4.199683, 4.884416) -0.90493241 ## 478     (0.79699, 3.68323)  0.23475914 ## 483   (7.692362, 3.794863)  1.24945835 ## 490   (6.712682, 1.651357)  1.54977192 ## 494  (5.940315, 0.5918995)  2.01119208 ## 501   (8.893126, 4.430691)  0.94844780 ## 504   (6.555589, 2.533826)  2.19841141 ## 518   (2.404973, 2.076959)  0.84898807 ## 521   (9.691892, 0.352174) -0.65949871 ## 537 (4.074469, 0.08165678)  0.70986430 ## 540   (8.695314, 4.444222)  0.89878352 ## 541    (3.923405, 1.38267)  0.12398347 ## 568   (4.128713, 4.176781) -0.39010383 ## 569   (7.045365, 1.403122)  1.00153860 ## 570   (1.972781, 4.239834)  0.21089302 ## 575   (4.297764, 4.576395) -0.14249520 ## 577   (6.805287, 3.431517)  0.53981300 ## 585   (9.933495, 4.313985) -0.28694090 ## 586   (8.321681, 3.618737)  1.40415252 ## 587  (6.979652, 0.7663116)  2.16217792 ## 589    (1.831029, 3.16187) -0.45737361 ## 590   (9.821418, 2.777265) -0.10629846 ## 600    (2.94094, 4.315027)  0.16048350 ##  ## $E ## [1] 1 ##  ## $Ntrials ## [1] 1 ##  ## $weights ## [1] 1 ##  ## $scale ## [1] 1 ##  ## $samplers ## NULL ##  ## $linear ## [1] TRUE ##  ## $expr ## NULL ##  ## $response ## [1] \"BRU_response\" ##  ## $inla.family ## [1] \"gaussian\" ##  ## $domain ## NULL ##  ## $used ## Used effects : field ## Used latent  :  ##  ## $allow_combine ## [1] FALSE ##  ## $control.family ## NULL ##  ## $drange ## $drange$y ## [1] -1.469747  3.126681 ##  ##  ## attr(,\"class\") ## [1] \"bru_like\" \"list\"     ##  ## attr(,\"class\") ## [1] \"bru_like_list\" \"list\"          ## [1] \"Time:\" ## Time difference of 8.302103 secs ## [[1]] ## $family ## [1] \"gaussian\" ##  ## $formula ## y ~ . ## <environment: 0x55d6afd64a98> ##  ## $response_data ## $response_data$BRU_response ##   [1] -1.46974693  0.49761528  0.56697452  3.12668073 -0.16292082  2.43810372 ##   [7] -0.26348734 -0.39200325 -0.50374744  0.24440133  0.25930291  0.29222210 ##  [13]  0.83212403 -0.65896898  1.31036235  0.77849308  1.52956805 -0.12011722 ##  [19]  1.38857798  1.14831985  1.83790954  0.78653890  0.63008463 -0.09459863 ##  [25]  0.15170125  1.04917938  0.22527352 -0.03876369  3.08037268  0.87821890 ##  [31]  2.15401446  1.64273666  1.60085031  0.54727142  0.56250442  1.80422367 ##  [37]  1.74638563 -0.07267040 -0.42042780 -0.33608851  2.28876833 -1.21552417 ##  [43]  0.45265241  1.63272202 -0.35768879  1.81428245  0.45383565  2.42878501 ##  [49]  1.16926061  0.20611915  1.39715608  0.19957596 -0.05519438  0.21037486 ##  [55]  2.46026323  0.30015425  2.46944180  1.14275878  0.04278465  1.00833313 ##  [61]  0.53465341  2.02682069  2.99516338 -0.13488276  1.46423674  0.49511384 ##  [67]  1.41323082  0.06648466  2.80711148  1.07319567 -0.17757734  0.10290848 ##  [73]  0.12411120  0.44140468  1.01689425 -0.48517945  1.56985695  2.75283310 ##  [79] -0.24127963  2.92319131  0.90132995  0.47626779  0.79723095  2.98703852 ##  [85]  0.18384092  0.35389085  1.45718251  1.07694075 -0.04743201 -0.17965470 ##  [91] -0.73096004  0.22143637 -0.12109303  0.66526987  0.48390227  0.85408238 ##  [97] -0.89204581 -0.90493241  0.23475914  1.24945835  1.54977192  2.01119208 ## [103]  0.94844780  2.19841141  0.84898807 -0.65949871  0.70986430  0.89878352 ## [109]  0.12398347 -0.39010383  1.00153860  0.21089302 -0.14249520  0.53981300 ## [115] -0.28694090  1.40415252  2.16217792 -0.45737361 -0.10629846  0.16048350 ##  ## $response_data$BRU_E ## [1] 1 ##  ## $response_data$BRU_Ntrials ## [1] 1 ##  ## $response_data$BRU_scale ## [1] 1 ##  ##  ## $data ##                coordinates           y ## 7     (9.251893, 1.280585) -1.46974693 ## 10    (1.353344, 1.956849)  0.49761528 ## 12    (2.316051, 1.865139)  0.56697452 ## 18    (6.517283, 0.410103)  3.12668073 ## 20   (0.8679275, 3.450187) -0.16292082 ## 27    (4.902559, 1.948775)  2.43810372 ## 31    (1.139897, 2.083543) -0.26348734 ## 38   (3.918428, 0.4856529) -0.39200325 ## 40    (2.572323, 4.448756) -0.50374744 ## 45     (3.0784, 0.6510523)  0.24440133 ## 46    (6.415629, 4.498005)  0.25930291 ## 48    (2.265546, 2.167373)  0.29222210 ## 49    (2.461592, 2.086142)  0.83212403 ## 52   (0.2566116, 3.952345) -0.65896898 ## 53     (7.553331, 4.20413)  1.31036235 ## 55     (8.930659, 2.28618)  0.77849308 ## 67     (8.277897, 1.25123)  1.52956805 ## 70  (0.8881443, 0.1772808) -0.12011722 ## 71    (6.351936, 3.050798)  1.38857798 ## 72    (8.565509, 2.001331)  1.14831985 ## 88    (8.412401, 0.798832)  1.83790954 ## 91    (8.159941, 4.958288)  0.78653890 ## 97    (8.696154, 1.127887)  0.63008463 ## 99     (0.37575, 3.037941) -0.09459863 ## 101   (3.652162, 1.408331)  0.15170125 ## 106   (4.899329, 3.021572)  1.04917938 ## 108   (5.009973, 3.734563)  0.22527352 ## 120    (4.249329, 4.29261) -0.03876369 ## 122   (6.040476, 1.911682)  3.08037268 ## 123    (8.257604, 4.93522)  0.87821890 ## 131    (7.778715, 1.20637)  2.15401446 ## 132    (8.51408, 2.621992)  1.64273666 ## 136   (8.816728, 2.517827)  1.60085031 ## 154   (2.374789, 1.266402)  0.54727142 ## 158   (3.250279, 1.741229)  0.56250442 ## 182   (6.634763, 1.831506)  1.80422367 ## 183   (6.638664, 1.904938)  1.74638563 ## 186   (3.731879, 3.563026) -0.07267040 ## 187   (1.054956, 2.176588) -0.42042780 ## 191   (3.240884, 4.689355) -0.33608851 ## 193   (7.526312, 1.168505)  2.28876833 ## 199  (9.844768, 0.4520245) -1.21552417 ## 219   (1.146435, 4.326072)  0.45265241 ## 220   (4.712784, 1.508073)  1.63272202 ## 223  (0.6469913, 2.240582) -0.35768879 ## 228  (5.952019, 0.4625379)  1.81428245 ## 238   (7.932701, 4.649456)  0.45383565 ## 252  (5.731279, 0.8910044)  2.42878501 ## 255   (8.762269, 4.387986)  1.16926061 ## 256   (1.455975, 4.208936)  0.20611915 ## 263   (6.895698, 4.030652)  1.39715608 ## 269   (4.085919, 3.174906)  0.19957596 ## 275   (3.338752, 3.902063) -0.05519438 ## 282    (3.535728, 4.42935)  0.21037486 ## 286    (4.824225, 2.24806)  2.46026323 ## 295   (1.040102, 3.784912)  0.30015425 ## 297   (6.015682, 2.368481)  2.46944180 ## 298   (6.904089, 1.139497)  1.14275878 ## 300   (4.150255, 4.517357)  0.04278465 ## 303    (7.65929, 3.225072)  1.00833313 ## 306   (7.964013, 4.751293)  0.53465341 ## 313   (6.887628, 2.386156)  2.02682069 ## 327   (5.308246, 1.263132)  2.99516338 ## 330    (2.631807, 2.51796) -0.13488276 ## 331    (6.46699, 4.249964)  1.46423674 ## 335   (7.433871, 3.547134)  0.49511384 ## 336   (8.470498, 3.316764)  1.41323082 ## 337   (3.685227, 3.038229)  0.06648466 ## 346   (5.569291, 2.158475)  2.80711148 ## 349   (8.906574, 4.158312)  1.07319567 ## 354   (1.300415, 2.168761) -0.17757734 ## 355   (5.019276, 4.813659)  0.10290848 ## 360   (2.793963, 2.837331)  0.12411120 ## 375  (2.524803, 0.2331395)  0.44140468 ## 377   (2.043386, 4.998441)  1.01689425 ## 379   (3.020144, 4.975152) -0.48517945 ## 384   (8.538898, 4.076565)  1.56985695 ## 396    (5.41961, 1.133036)  2.75283310 ## 397 (9.489378, 0.06883399) -0.24127963 ## 404  (6.967856, 0.4228904)  2.92319131 ## 405   (7.611821, 4.278237)  0.90132995 ## 406  (2.737303, 0.2934272)  0.47626779 ## 407  (0.0520811, 1.639886)  0.79723095 ## 409    (5.978169, 1.66948)  2.98703852 ## 415  (0.2242172, 2.201305)  0.18384092 ## 418    (9.74798, 2.644043)  0.35389085 ## 423   (1.854198, 4.976591)  1.45718251 ## 426   (8.916793, 3.418483)  1.07694075 ## 428    (5.13768, 3.827838) -0.04743201 ## 433   (2.703542, 2.394874) -0.17965470 ## 435    (2.522604, 4.56852) -0.73096004 ## 443   (4.126111, 2.030218)  0.22143637 ## 445    (6.291269, 4.64161) -0.12109303 ## 451   (9.299994, 3.184579)  0.66526987 ## 464   (4.271672, 1.059567)  0.48390227 ## 472    (1.34266, 1.649327)  0.85408238 ## 475   (9.556354, 1.116005) -0.89204581 ## 476   (4.199683, 4.884416) -0.90493241 ## 478     (0.79699, 3.68323)  0.23475914 ## 483   (7.692362, 3.794863)  1.24945835 ## 490   (6.712682, 1.651357)  1.54977192 ## 494  (5.940315, 0.5918995)  2.01119208 ## 501   (8.893126, 4.430691)  0.94844780 ## 504   (6.555589, 2.533826)  2.19841141 ## 518   (2.404973, 2.076959)  0.84898807 ## 521   (9.691892, 0.352174) -0.65949871 ## 537 (4.074469, 0.08165678)  0.70986430 ## 540   (8.695314, 4.444222)  0.89878352 ## 541    (3.923405, 1.38267)  0.12398347 ## 568   (4.128713, 4.176781) -0.39010383 ## 569   (7.045365, 1.403122)  1.00153860 ## 570   (1.972781, 4.239834)  0.21089302 ## 575   (4.297764, 4.576395) -0.14249520 ## 577   (6.805287, 3.431517)  0.53981300 ## 585   (9.933495, 4.313985) -0.28694090 ## 586   (8.321681, 3.618737)  1.40415252 ## 587  (6.979652, 0.7663116)  2.16217792 ## 589    (1.831029, 3.16187) -0.45737361 ## 590   (9.821418, 2.777265) -0.10629846 ## 600    (2.94094, 4.315027)  0.16048350 ##  ## $E ## [1] 1 ##  ## $Ntrials ## [1] 1 ##  ## $weights ## [1] 1 ##  ## $scale ## [1] 1 ##  ## $samplers ## NULL ##  ## $linear ## [1] TRUE ##  ## $expr ## NULL ##  ## $response ## [1] \"BRU_response\" ##  ## $inla.family ## [1] \"gaussian\" ##  ## $domain ## NULL ##  ## $used ## Used effects : field ## Used latent  :  ##  ## $allow_combine ## [1] FALSE ##  ## $control.family ## NULL ##  ## $drange ## $drange$y ## [1] -1.469747  3.126681 ##  ##  ## attr(,\"class\") ## [1] \"bru_like\" \"list\"     ##  ## attr(,\"class\") ## [1] \"bru_like_list\" \"list\"          ## [1] \"Time:\" ## Time difference of 17.62721 secs ## [[1]] ## $family ## [1] \"gaussian\" ##  ## $formula ## y ~ . ## <environment: 0x55d6c268c288> ##  ## $response_data ## $response_data$BRU_response ##   [1] -0.6522754718  1.8675323488  2.2189752063  0.1104985086  0.0891323305 ##   [6]  0.6848180821 -1.5832415394 -0.2634873379  0.2004712612  0.2593029054 ##  [11]  2.4687040427  0.8233452096  2.1207398852  1.5648633249 -0.5567564020 ##  [16] -0.3651186419  1.8439041359  0.4261117342  0.1517012518  0.5100312939 ##  [21] -0.3381559823 -0.0142939462  1.9887446938 -0.0387636892 -0.2378188838 ##  [26]  1.6427366595  0.5699318773  1.6008503069  1.1330558975  0.0974233661 ##  [31]  0.3055075621  0.5472714194  2.0629942178  0.6111675095  1.5896870826 ##  [36]  0.0133957092 -0.0642870761  0.8663405042  0.1100284745  0.0006467918 ##  [41] -1.2155241705  0.4968030036  1.1623135652 -0.3576887945 -0.2075829082 ##  [46] -0.6449832153  1.2591521260  0.3766195395 -0.0449025706  1.8604373454 ##  [51]  0.2451406958  1.7110149073  1.1692606102  1.5005172456  0.0187787194 ##  [56]  0.2023161279  2.2903334908 -0.2823511613  0.0583994966  1.6323612971 ##  [61]  1.4628182695  0.7189351589  3.0424718703  0.1378557569  1.3642549292 ##  [66]  0.3011615701  0.2083792340  0.2172431826  0.5412591153  0.5141758262 ##  [71]  0.4585031968  1.0168942543  0.7231515139 -0.8193275613  2.2183204358 ##  [76]  1.0318960981  0.1316778837  2.9231913109  0.9013299513  0.4762677875 ##  [81]  1.3534162488  2.9870385212  0.1838409242 -0.3050926664  1.0769407456 ##  [86] -0.0474320080 -0.1796546978  0.3611232589  0.2214363677 -0.5199408157 ##  [91]  0.7501942627  0.1255301487 -0.9048173408  0.0229865083 -0.9049324095 ##  [96]  0.3192494010  0.6848114147  0.3051225152 -0.1092874532  1.5497719217 ## [101]  0.2215840275  0.1807550094  0.2092386721  0.9058215384  0.2841348484 ## [106]  1.1414104195  3.2126638823  0.0827173087  0.2113627611  2.6083920874 ## [111]  2.3201752744 -0.0561288210  1.7026912816  0.0044152824  0.8435877705 ## [116]  1.7079051081  1.3240326918  2.5852560917  3.0760798038  0.1604835019 ##  ## $response_data$BRU_E ## [1] 1 ##  ## $response_data$BRU_Ntrials ## [1] 1 ##  ## $response_data$BRU_scale ## [1] 1 ##  ##  ## $data ##                coordinates             y ## 4     (3.171651, 4.781028) -0.6522754718 ## 8     (6.829195, 2.175178)  1.8675323488 ## 17   (7.171219, 0.6764418)  2.2189752063 ## 19   (2.405562, 0.3811053)  0.1104985086 ## 22    (5.420688, 3.962653)  0.0891323305 ## 26    (9.476547, 3.220274)  0.6848180821 ## 28   (9.729591, 0.6214601) -1.5832415394 ## 31    (1.139897, 2.083543) -0.2634873379 ## 32    (3.139815, 3.245004)  0.2004712612 ## 46    (6.415629, 4.498005)  0.2593029054 ## 47    (6.133916, 2.230922)  2.4687040427 ## 56    (1.194358, 1.263909)  0.8233452096 ## 61   (8.330253, 0.6725377)  2.1207398852 ## 62    (4.392852, 2.386175)  1.5648633249 ## 65    (3.236617, 4.972516) -0.5567564020 ## 75  (3.555606, 0.04964721) -0.3651186419 ## 77    (4.837289, 1.518207)  1.8439041359 ## 79   (2.701634, 0.5726394)  0.4261117342 ## 101   (3.652162, 1.408331)  0.1517012518 ## 104   (4.794563, 4.287101)  0.5100312939 ## 105   (2.643127, 3.840452) -0.3381559823 ## 114 (0.3681457, 0.1656634) -0.0142939462 ## 116   (7.900359, 2.688549)  1.9887446938 ## 120    (4.249329, 4.29261) -0.0387636892 ## 129   (2.122513, 3.538558) -0.2378188838 ## 132    (8.51408, 2.621992)  1.6427366595 ## 134   (3.880409, 2.499269)  0.5699318773 ## 136   (8.816728, 2.517827)  1.6008503069 ## 137   (8.737418, 3.046678)  1.1330558975 ## 138   (3.386237, 2.467673)  0.0974233661 ## 148   (2.952294, 3.798363)  0.3055075621 ## 154   (2.374789, 1.266402)  0.5472714194 ## 157   (8.006261, 1.098344)  2.0629942178 ## 162 (0.04170842, 1.677276)  0.6111675095 ## 165   (8.182293, 3.839233)  1.5896870826 ## 173  (4.945315, 0.1631137)  0.0133957092 ## 176   (3.616839, 3.995792) -0.0642870761 ## 179   (7.133719, 3.664549)  0.8663405042 ## 188   (2.549621, 3.326859)  0.1100284745 ## 190    (4.69608, 4.517929)  0.0006467918 ## 199  (9.844768, 0.4520245) -1.2155241705 ## 202  (0.3005948, 1.242911)  0.4968030036 ## 221   (8.112949, 3.098841)  1.1623135652 ## 223  (0.6469913, 2.240582) -0.3576887945 ## 225   (9.726727, 1.922633) -0.2075829082 ## 229  (0.4318224, 4.425763) -0.6449832153 ## 233  (5.418842, 0.4105507)  1.2591521260 ## 234   (8.818197, 1.159274)  0.3766195395 ## 241   (1.874595, 3.270571) -0.0449025706 ## 245     (8.025849, 1.2649)  1.8604373454 ## 249 (0.04237858, 2.354691)  0.2451406958 ## 251  (7.714442, 0.4997052)  1.7110149073 ## 255   (8.762269, 4.387986)  1.1692606102 ## 267   (8.52649, 0.9491271)  1.5005172456 ## 281   (3.239895, 2.024304)  0.0187787194 ## 284   (3.564393, 2.138836)  0.2023161279 ## 291   (6.249395, 2.186026)  2.2903334908 ## 305   (2.394938, 3.667676) -0.2823511613 ## 312   (5.225333, 4.671745)  0.0583994966 ## 315    (6.92358, 2.979684)  1.6323612971 ## 323   (6.453924, 1.359498)  1.4628182695 ## 338   (4.412435, 3.086132)  0.7189351589 ## 347  (6.725699, 0.5021193)  3.0424718703 ## 352   (3.110281, 1.843244)  0.1378557569 ## 359    (1.64506, 4.892264)  1.3642549292 ## 361  (1.525337, 0.3967622)  0.3011615701 ## 362   (4.28908, 0.2965067)  0.2083792340 ## 364  (0.7799563, 4.120957)  0.2172431826 ## 366   (2.141775, 1.069482)  0.5412591153 ## 367   (2.028375, 1.743929)  0.5141758262 ## 368  (3.165539, 0.7068487)  0.4585031968 ## 377   (2.043386, 4.998441)  1.0168942543 ## 385   (0.1455631, 1.26745)  0.7231515139 ## 386  (0.3792608, 4.790484) -0.8193275613 ## 390  (7.080822, 0.7103087)  2.2183204358 ## 398   (3.169447, 1.389839)  1.0318960981 ## 401   (2.429153, 2.787073)  0.1316778837 ## 404  (6.967856, 0.4228904)  2.9231913109 ## 405   (7.611821, 4.278237)  0.9013299513 ## 406  (2.737303, 0.2934272)  0.4762677875 ## 408   (4.220999, 2.500984)  1.3534162488 ## 409    (5.978169, 1.66948)  2.9870385212 ## 415  (0.2242172, 2.201305)  0.1838409242 ## 419   (0.49568, 0.3689271) -0.3050926664 ## 426   (8.916793, 3.418483)  1.0769407456 ## 428    (5.13768, 3.827838) -0.0474320080 ## 433   (2.703542, 2.394874) -0.1796546978 ## 437   (0.676825, 1.536298)  0.3611232589 ## 443   (4.126111, 2.030218)  0.2214363677 ## 452   (9.922463, 1.174754) -0.5199408157 ## 453   (2.585164, 1.817675)  0.7501942627 ## 463   (1.07915, 0.1059277)  0.1255301487 ## 468   (9.067707, 1.249281) -0.9048173408 ## 473   (1.970576, 3.707312)  0.0229865083 ## 476   (4.199683, 4.884416) -0.9049324095 ## 480   (2.660705, 1.382302)  0.3192494010 ## 482  (0.4507153, 1.140223)  0.6848114147 ## 485   (7.459223, 3.585931)  0.3051225152 ## 488   (1.785281, 3.634364) -0.1092874532 ## 490   (6.712682, 1.651357)  1.5497719217 ## 499     (4.06451, 3.67308)  0.2215840275 ## 503  (0.0994651, 3.900551)  0.1807550094 ## 511   (9.472872, 2.282848)  0.2092386721 ## 513 (4.075126, 0.07329848)  0.9058215384 ## 517        (1.863, 4.2242)  0.2841348484 ## 520    (6.785558, 2.92853)  1.1414104195 ## 525   (5.426169, 2.184748)  3.2126638823 ## 527   (1.714286, 3.745808)  0.0827173087 ## 529    (9.060211, 4.91211)  0.2113627611 ## 534   (5.004813, 2.146085)  2.6083920874 ## 542   (6.200097, 1.499073)  2.3201752744 ## 547   (6.314306, 4.658269) -0.0561288210 ## 549   (7.913127, 4.216393)  1.7026912816 ## 560  (0.6022926, 1.861836)  0.0044152824 ## 561   (7.421051, 3.781989)  0.8435877705 ## 566   (6.371434, 1.049121)  1.7079051081 ## 579   (8.334271, 2.787907)  1.3240326918 ## 596    (5.01427, 2.287343)  2.5852560917 ## 597   (5.206548, 2.042345)  3.0760798038 ## 600    (2.94094, 4.315027)  0.1604835019 ##  ## $E ## [1] 1 ##  ## $Ntrials ## [1] 1 ##  ## $weights ## [1] 1 ##  ## $scale ## [1] 1 ##  ## $samplers ## NULL ##  ## $linear ## [1] TRUE ##  ## $expr ## NULL ##  ## $response ## [1] \"BRU_response\" ##  ## $inla.family ## [1] \"gaussian\" ##  ## $domain ## NULL ##  ## $used ## Used effects : field ## Used latent  :  ##  ## $allow_combine ## [1] FALSE ##  ## $control.family ## NULL ##  ## $drange ## $drange$y ## [1] -1.583242  3.212664 ##  ##  ## attr(,\"class\") ## [1] \"bru_like\" \"list\"     ##  ## attr(,\"class\") ## [1] \"bru_like_list\" \"list\"          ## [1] \"Time:\" ## Time difference of 19.47581 secs ## [[1]] ## $family ## [1] \"gaussian\" ##  ## $formula ## y ~ . ## <environment: 0x55d6afd64a98> ##  ## $response_data ## $response_data$BRU_response ##   [1] -0.6522754718  1.8675323488  2.2189752063  0.1104985086  0.0891323305 ##   [6]  0.6848180821 -1.5832415394 -0.2634873379  0.2004712612  0.2593029054 ##  [11]  2.4687040427  0.8233452096  2.1207398852  1.5648633249 -0.5567564020 ##  [16] -0.3651186419  1.8439041359  0.4261117342  0.1517012518  0.5100312939 ##  [21] -0.3381559823 -0.0142939462  1.9887446938 -0.0387636892 -0.2378188838 ##  [26]  1.6427366595  0.5699318773  1.6008503069  1.1330558975  0.0974233661 ##  [31]  0.3055075621  0.5472714194  2.0629942178  0.6111675095  1.5896870826 ##  [36]  0.0133957092 -0.0642870761  0.8663405042  0.1100284745  0.0006467918 ##  [41] -1.2155241705  0.4968030036  1.1623135652 -0.3576887945 -0.2075829082 ##  [46] -0.6449832153  1.2591521260  0.3766195395 -0.0449025706  1.8604373454 ##  [51]  0.2451406958  1.7110149073  1.1692606102  1.5005172456  0.0187787194 ##  [56]  0.2023161279  2.2903334908 -0.2823511613  0.0583994966  1.6323612971 ##  [61]  1.4628182695  0.7189351589  3.0424718703  0.1378557569  1.3642549292 ##  [66]  0.3011615701  0.2083792340  0.2172431826  0.5412591153  0.5141758262 ##  [71]  0.4585031968  1.0168942543  0.7231515139 -0.8193275613  2.2183204358 ##  [76]  1.0318960981  0.1316778837  2.9231913109  0.9013299513  0.4762677875 ##  [81]  1.3534162488  2.9870385212  0.1838409242 -0.3050926664  1.0769407456 ##  [86] -0.0474320080 -0.1796546978  0.3611232589  0.2214363677 -0.5199408157 ##  [91]  0.7501942627  0.1255301487 -0.9048173408  0.0229865083 -0.9049324095 ##  [96]  0.3192494010  0.6848114147  0.3051225152 -0.1092874532  1.5497719217 ## [101]  0.2215840275  0.1807550094  0.2092386721  0.9058215384  0.2841348484 ## [106]  1.1414104195  3.2126638823  0.0827173087  0.2113627611  2.6083920874 ## [111]  2.3201752744 -0.0561288210  1.7026912816  0.0044152824  0.8435877705 ## [116]  1.7079051081  1.3240326918  2.5852560917  3.0760798038  0.1604835019 ##  ## $response_data$BRU_E ## [1] 1 ##  ## $response_data$BRU_Ntrials ## [1] 1 ##  ## $response_data$BRU_scale ## [1] 1 ##  ##  ## $data ##                coordinates             y ## 4     (3.171651, 4.781028) -0.6522754718 ## 8     (6.829195, 2.175178)  1.8675323488 ## 17   (7.171219, 0.6764418)  2.2189752063 ## 19   (2.405562, 0.3811053)  0.1104985086 ## 22    (5.420688, 3.962653)  0.0891323305 ## 26    (9.476547, 3.220274)  0.6848180821 ## 28   (9.729591, 0.6214601) -1.5832415394 ## 31    (1.139897, 2.083543) -0.2634873379 ## 32    (3.139815, 3.245004)  0.2004712612 ## 46    (6.415629, 4.498005)  0.2593029054 ## 47    (6.133916, 2.230922)  2.4687040427 ## 56    (1.194358, 1.263909)  0.8233452096 ## 61   (8.330253, 0.6725377)  2.1207398852 ## 62    (4.392852, 2.386175)  1.5648633249 ## 65    (3.236617, 4.972516) -0.5567564020 ## 75  (3.555606, 0.04964721) -0.3651186419 ## 77    (4.837289, 1.518207)  1.8439041359 ## 79   (2.701634, 0.5726394)  0.4261117342 ## 101   (3.652162, 1.408331)  0.1517012518 ## 104   (4.794563, 4.287101)  0.5100312939 ## 105   (2.643127, 3.840452) -0.3381559823 ## 114 (0.3681457, 0.1656634) -0.0142939462 ## 116   (7.900359, 2.688549)  1.9887446938 ## 120    (4.249329, 4.29261) -0.0387636892 ## 129   (2.122513, 3.538558) -0.2378188838 ## 132    (8.51408, 2.621992)  1.6427366595 ## 134   (3.880409, 2.499269)  0.5699318773 ## 136   (8.816728, 2.517827)  1.6008503069 ## 137   (8.737418, 3.046678)  1.1330558975 ## 138   (3.386237, 2.467673)  0.0974233661 ## 148   (2.952294, 3.798363)  0.3055075621 ## 154   (2.374789, 1.266402)  0.5472714194 ## 157   (8.006261, 1.098344)  2.0629942178 ## 162 (0.04170842, 1.677276)  0.6111675095 ## 165   (8.182293, 3.839233)  1.5896870826 ## 173  (4.945315, 0.1631137)  0.0133957092 ## 176   (3.616839, 3.995792) -0.0642870761 ## 179   (7.133719, 3.664549)  0.8663405042 ## 188   (2.549621, 3.326859)  0.1100284745 ## 190    (4.69608, 4.517929)  0.0006467918 ## 199  (9.844768, 0.4520245) -1.2155241705 ## 202  (0.3005948, 1.242911)  0.4968030036 ## 221   (8.112949, 3.098841)  1.1623135652 ## 223  (0.6469913, 2.240582) -0.3576887945 ## 225   (9.726727, 1.922633) -0.2075829082 ## 229  (0.4318224, 4.425763) -0.6449832153 ## 233  (5.418842, 0.4105507)  1.2591521260 ## 234   (8.818197, 1.159274)  0.3766195395 ## 241   (1.874595, 3.270571) -0.0449025706 ## 245     (8.025849, 1.2649)  1.8604373454 ## 249 (0.04237858, 2.354691)  0.2451406958 ## 251  (7.714442, 0.4997052)  1.7110149073 ## 255   (8.762269, 4.387986)  1.1692606102 ## 267   (8.52649, 0.9491271)  1.5005172456 ## 281   (3.239895, 2.024304)  0.0187787194 ## 284   (3.564393, 2.138836)  0.2023161279 ## 291   (6.249395, 2.186026)  2.2903334908 ## 305   (2.394938, 3.667676) -0.2823511613 ## 312   (5.225333, 4.671745)  0.0583994966 ## 315    (6.92358, 2.979684)  1.6323612971 ## 323   (6.453924, 1.359498)  1.4628182695 ## 338   (4.412435, 3.086132)  0.7189351589 ## 347  (6.725699, 0.5021193)  3.0424718703 ## 352   (3.110281, 1.843244)  0.1378557569 ## 359    (1.64506, 4.892264)  1.3642549292 ## 361  (1.525337, 0.3967622)  0.3011615701 ## 362   (4.28908, 0.2965067)  0.2083792340 ## 364  (0.7799563, 4.120957)  0.2172431826 ## 366   (2.141775, 1.069482)  0.5412591153 ## 367   (2.028375, 1.743929)  0.5141758262 ## 368  (3.165539, 0.7068487)  0.4585031968 ## 377   (2.043386, 4.998441)  1.0168942543 ## 385   (0.1455631, 1.26745)  0.7231515139 ## 386  (0.3792608, 4.790484) -0.8193275613 ## 390  (7.080822, 0.7103087)  2.2183204358 ## 398   (3.169447, 1.389839)  1.0318960981 ## 401   (2.429153, 2.787073)  0.1316778837 ## 404  (6.967856, 0.4228904)  2.9231913109 ## 405   (7.611821, 4.278237)  0.9013299513 ## 406  (2.737303, 0.2934272)  0.4762677875 ## 408   (4.220999, 2.500984)  1.3534162488 ## 409    (5.978169, 1.66948)  2.9870385212 ## 415  (0.2242172, 2.201305)  0.1838409242 ## 419   (0.49568, 0.3689271) -0.3050926664 ## 426   (8.916793, 3.418483)  1.0769407456 ## 428    (5.13768, 3.827838) -0.0474320080 ## 433   (2.703542, 2.394874) -0.1796546978 ## 437   (0.676825, 1.536298)  0.3611232589 ## 443   (4.126111, 2.030218)  0.2214363677 ## 452   (9.922463, 1.174754) -0.5199408157 ## 453   (2.585164, 1.817675)  0.7501942627 ## 463   (1.07915, 0.1059277)  0.1255301487 ## 468   (9.067707, 1.249281) -0.9048173408 ## 473   (1.970576, 3.707312)  0.0229865083 ## 476   (4.199683, 4.884416) -0.9049324095 ## 480   (2.660705, 1.382302)  0.3192494010 ## 482  (0.4507153, 1.140223)  0.6848114147 ## 485   (7.459223, 3.585931)  0.3051225152 ## 488   (1.785281, 3.634364) -0.1092874532 ## 490   (6.712682, 1.651357)  1.5497719217 ## 499     (4.06451, 3.67308)  0.2215840275 ## 503  (0.0994651, 3.900551)  0.1807550094 ## 511   (9.472872, 2.282848)  0.2092386721 ## 513 (4.075126, 0.07329848)  0.9058215384 ## 517        (1.863, 4.2242)  0.2841348484 ## 520    (6.785558, 2.92853)  1.1414104195 ## 525   (5.426169, 2.184748)  3.2126638823 ## 527   (1.714286, 3.745808)  0.0827173087 ## 529    (9.060211, 4.91211)  0.2113627611 ## 534   (5.004813, 2.146085)  2.6083920874 ## 542   (6.200097, 1.499073)  2.3201752744 ## 547   (6.314306, 4.658269) -0.0561288210 ## 549   (7.913127, 4.216393)  1.7026912816 ## 560  (0.6022926, 1.861836)  0.0044152824 ## 561   (7.421051, 3.781989)  0.8435877705 ## 566   (6.371434, 1.049121)  1.7079051081 ## 579   (8.334271, 2.787907)  1.3240326918 ## 596    (5.01427, 2.287343)  2.5852560917 ## 597   (5.206548, 2.042345)  3.0760798038 ## 600    (2.94094, 4.315027)  0.1604835019 ##  ## $E ## [1] 1 ##  ## $Ntrials ## [1] 1 ##  ## $weights ## [1] 1 ##  ## $scale ## [1] 1 ##  ## $samplers ## NULL ##  ## $linear ## [1] TRUE ##  ## $expr ## NULL ##  ## $response ## [1] \"BRU_response\" ##  ## $inla.family ## [1] \"gaussian\" ##  ## $domain ## NULL ##  ## $used ## Used effects : field ## Used latent  :  ##  ## $allow_combine ## [1] FALSE ##  ## $control.family ## NULL ##  ## $drange ## $drange$y ## [1] -1.583242  3.212664 ##  ##  ## attr(,\"class\") ## [1] \"bru_like\" \"list\"     ##  ## attr(,\"class\") ## [1] \"bru_like_list\" \"list\"          ## [1] \"Time:\" ## Time difference of 1.018533 mins cv_result ##           Model                dss               mse              crps ## 1    stationary  -1.13385425775978  0.13581264425141 0.195052731860835 ## 2 nonstationary -0.922474339546718 0.134881752869688 0.194542878936606 ##            Best         stationary     nonstationary     nonstationary ##               scrps ## 1 0.512119177847242 ## 2 0.520158586863482 ##          stationary"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_inlabru.html","id":"further-options-of-the-inlabru-implementation","dir":"Articles","previous_headings":"","what":"Further options of the inlabru implementation","title":"inlabru implementation of the rational SPDE approach","text":"several additional options available. instance, possible change order rational approximation, upper bound smoothness parameter (may speed fit), change priors, change type rational approximation, among others. options described ‚Äúoptions rSPDE-INLA implementation‚Äù section R-INLA implementation rational SPDE approach vignette. Observe options passed model rspde.matern() function, therefore resulting model object can directly used bru() function, identical manner examples .","code":""},{"path":[]},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_nofem.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Rational approximations without finite element approximations","text":"models one dimension, can perform rational approximations without finite elements. enables us provide computationally efficient approximations Gaussian processes Mat'ern covariance functions, without define finite element meshes, without boundary effects due boundary conditions usually required. vignette introduce methods. begin loading rSPDE package: Assume want define model interval [0,1][0,1], want evaluate locations can now use matern.rational() construct rational SPDE approximation order m=2m=2 Gaussian random field Mat√©rn covariance function interval. object op_cov contains information needed evaluating approximation. Note, however, approximation invariant locations loc, supplied indicate want evaluate . evaluate accuracy approximation, let us compute covariance function process s=0s=0 locations s compare true Mat√©rn covariance function. covariances can calculated using covariance() method. covariance function error compared Mat√©rn covariance shown following figure.  improve approximation can increase order approximation, increasing mm. Let us, example, compute approximation m=1,‚Ä¶,4m=1,\\ldots,4. see error decreases fast increase mm 11 44.","code":"library(rSPDE) s <- seq(from = 0, to = 1, length.out = 101) kappa <- 20 sigma <- 2 nu <- 0.8 r <- sqrt(8*nu)/kappa #range parameter op_cov <- matern.rational(loc = s, nu = nu, range = r, sigma = sigma, m = 2, parameterization = \"matern\") c_cov.approx <- op_cov$covariance(ind = 1) c.true <- matern.covariance(abs(s[1] - s), kappa, nu, sigma) opar <- par(   mfrow = c(1, 2), mgp = c(1.3, 0.5, 0),   mar = c(2, 2, 0.5, 0.5) + 0.1 ) plot(s, c.true,   type = \"l\", ylab = \"C(|s-0.5|)\", xlab = \"s\", ylim = c(0, 5),   cex.main = 0.8, cex.axis = 0.8, cex.lab = 0.8 ) lines(s, c_cov.approx, col = 2) legend(\"topright\",   bty = \"n\",   legend = c(\"Mat√©rn\", \"Rational\"),   col = c(\"black\", \"red\"),   lty = rep(1, 2), ncol = 1,   cex = 0.8 )  plot(s, c.true - c_cov.approx,   type = \"l\", ylab = \"Error\", xlab = \"s\",   cex.main = 0.8, cex.axis = 0.8, cex.lab = 0.8 ) par(opar) errors <- rep(0, 4) for (i in 1:4) {   op_cov_i <- matern.rational(loc = s, range = r, sigma = sigma, nu = nu,                             m = i, parameterization = \"matern\")   errors[i] <- norm(c.true - op_cov_i$covariance(ind = 1)) } print(errors) ## [1] 1.36208052 0.29200800 0.07907210 0.02597968"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_nofem.html","id":"simulation","dir":"Articles","previous_headings":"","what":"Simulation","title":"Rational approximations without finite element approximations","text":"can simulate constructed model using simulate() method. end simply apply simulate() method object returned matern.operators() function:  want replicates, simply set argument nsim desired number replicates. instance, generate two replicates model, simply :","code":"u <- simulate(op_cov) plot(s, u, type = \"l\") u.rep <- simulate(op_cov, nsim = 2)"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_nofem.html","id":"inference","dir":"Articles","previous_headings":"Simulation","what":"Inference","title":"Rational approximations without finite element approximations","text":"built-support computing log-likelihood functions performing kriging prediction rSPDE package. illustrate , use simulation create noisy observations process. , first construct observation matrix linking FEM basis functions locations want simulate. first randomly generate observation locations construct matrix. now generate observations Yi=2‚àíx1+u(si)+ŒµiY_i = 2 - x1 + u(s_i) + \\varepsilon_i, Œµi‚àºN(0,œÉe2)\\varepsilon_i \\sim N(0,\\sigma_e^2) Gaussian measurement noise, x1x1 covariate giving observation location. assume latent process Mat√©rn covariance Œ∫=20,œÉ=1.3\\kappa=20, \\sigma=1.3 ŒΩ=0.8\\nu=0.8: Let us create new object fit model: Let us now fit model. end use rspde_lme() function: summary: Let us compare true values compare time:","code":"set.seed(1) n.obs <- 100 obs.loc <- sort(runif(n.obs)) n.rep <- 10 kappa <- 20 sigma <- 1.3 nu <- 0.8 r <- sqrt(8*nu)/kappa op_cov <- matern.rational(loc = obs.loc, nu = nu, range = r, sigma = sigma, m = 2,                            parameterization = \"matern\")  u <- matrix(simulate(op_cov, n = n.rep), ncol = n.rep)  sigma.e <- 0.3  x1 <- obs.loc  Y <- matrix(rep(2 - x1, n.rep), ncol = n.rep) + u + sigma.e * matrix(rnorm(n.obs*n.rep), ncol = n.rep) repl <- rep(1:n.rep, each = n.obs) df_data <- data.frame(y = as.vector(Y), loc = rep(obs.loc, n.rep),                        x1 = rep(x1, n.rep), repl = repl) op_cov_est <- matern.rational(loc = obs.loc, m = 2) fit <- rspde_lme(y~x1, model = op_cov_est,                  repl = repl, data = df_data, loc = \"loc\",                  parallel = TRUE) summary(fit) ##  ## Latent model - Whittle-Matern ##  ## Call: ## rspde_lme(formula = y ~ x1, loc = \"loc\", data = df_data, model = op_cov_est,  ##     repl = repl, parallel = TRUE) ##  ## Fixed effects: ##             Estimate Std.error z-value Pr(>|z|)     ## (Intercept)   2.0160    0.2958   6.816 9.35e-12 *** ## x1           -1.1963    0.4971  -2.407   0.0161 *   ##  ## Random effects: ##       Estimate Std.error z-value ## alpha  1.41388   0.10875  13.001 ## tau    0.02484   0.01257   1.977 ## kappa 21.51542   3.81397   5.641 ##  ## Random effects (Matern parameterization): ##       Estimate Std.error z-value ## nu     0.91388   0.10875   8.403 ## sigma  1.41365   0.08747  16.162 ## range  0.12567   0.01120  11.218 ##  ## Measurement error: ##          Estimate Std.error z-value ## std. dev  0.29192   0.01447   20.18 ## --- ## Signif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1  ##  ## Log-Likelihood:  -876.9439  ## Number of function calls by 'optim' = 56 ## Optimization method used in 'optim' = L-BFGS-B ##  ## Time used to:     fit the model =  2.61274 mins  ##   set up the parallelization = 2.46622 secs print(data.frame(   sigma = c(sigma, fit$matern_coeff$random_effects[2]),    range = c(r, fit$matern_coeff$random_effects[3]),   nu = c(nu, fit$matern_coeff$random_effects[1]),   row.names = c(\"Truth\", \"Estimates\") )) ##              sigma     range        nu ## Truth     1.300000 0.1264911 0.8000000 ## Estimates 1.413649 0.1256721 0.9138763 # Total time (time to fit plus time to set up the parallelization) total_time <- fit$fitting_time + fit$time_par print(total_time) ## Time difference of 159.2308 secs"},{"path":"https://davidbolin.github.io/rSPDE/articles/rspde_nofem.html","id":"kriging","dir":"Articles","previous_headings":"Simulation","what":"Kriging","title":"Rational approximations without finite element approximations","text":"Finally, compute kriging prediction process uu locations s based observations. Let us create data.frame locations want obtain predictions. Observe also must provide values covariates. can now perform kriging predict() method. example, predict locations first replicate: simulated process, observed data, kriging prediction shown following figure.  can also use augment() function pipe results plot:","code":"s <- seq(from = 0, to = 1, length.out = 100) df_pred <- data.frame(loc = s, x1 = s) u.krig <- predict(fit, newdata = df_pred, loc = \"loc\", which_repl = 1) opar <- par(mgp = c(1.3, 0.5, 0), mar = c(2, 2, 0.5, 0.5) + 0.1) plot(obs.loc, Y[,1],   ylab = \"u(s)\", xlab = \"s\",   ylim = c(min(c(min(u), min(Y))), max(c(max(u), max(Y)))),   cex.main = 0.8, cex.axis = 0.8, cex.lab = 0.8 ) lines(s, u.krig$mean, col = 2) par(opar) library(ggplot2) library(dplyr)  augment(fit, newdata = df_pred, loc = \"loc\", which_repl = 1) %>% ggplot() +                  aes(x = loc, y = .fitted) +                 geom_line(col=\"red\") +                  geom_point(data = df_data[df_data$repl==1,], aes(x = loc, y=y))"},{"path":[]},{"path":"https://davidbolin.github.io/rSPDE/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"David Bolin. Maintainer, author. Alexandre Simas. Author. Finn Lindgren. Contributor.","code":""},{"path":"https://davidbolin.github.io/rSPDE/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Bolin D, Simas (2023). rSPDE: Rational Approximations Fractional Stochastic Partial Differential Equations. R package version 2.3.3, https://CRAN.R-project.org/package=rSPDE. David Bolin, Alexandre B. Simas, Zhen Xiong (2024), Covariance-based rational approximations fractional SPDEs computationally efficient Bayesian inference. Journal Computational Graphical Statistics, 33:1, 64-74. David Bolin, Kristin Kirchner (2020), rational SPDE approach Gaussian random fields general smoothness. Journal Computational Graphical Statistics, 29:2, 274-285.","code":"@Manual{,   title = {rSPDE: Rational Approximations of Fractional Stochastic Partial Differential Equations},   author = {David Bolin and Alexandre B. Simas},   year = {2023},   note = {R package version 2.3.3},   url = {https://CRAN.R-project.org/package=rSPDE}, } @Article{,   title = {Covariance-based rational approximations of fractional SPDEs for computationally efficient Bayesian inference},   author = {David Bolin and Alexandre B. Simas and Zhen Xiong},   journal = {Journal of Computational and Graphical Statistics},   year = {2024},   volume = {33},   number = {1},   pages = {64--74},   doi = {10.1080/10618600.2023.2231051}, } @Article{,   title = {The rational {SPDE} approach for {Gaussian} random fields with general smoothness},   author = {David Bolin and Kristin Kirchner},   journal = {Journal of Computational and Graphical Statistics},   year = {2020},   volume = {29},   number = {2},   pages = {274--285},   doi = {10.1080/10618600.2019.1665537}, }"},{"path":"https://davidbolin.github.io/rSPDE/index.html","id":"the-rspde-package","dir":"","previous_headings":"","what":"Rational Approximations of Fractional Stochastic Partial Differential Equations","title":"Rational Approximations of Fractional Stochastic Partial Differential Equations","text":"rSPDE R package used computing rational approximations fractional SPDEs. rational approximations can used computatially efficient statistical inference. Basic statistical operations likelihood evaluations kriging predictions using fractional approximations also implemented. package also contains interface R-INLA.","code":""},{"path":"https://davidbolin.github.io/rSPDE/index.html","id":"introduction","dir":"","previous_headings":"","what":"Introduction","title":"Rational Approximations of Fractional Stochastic Partial Differential Equations","text":"Several popular Gaussian random field models can represented solutions stochastic partial differential equations (SPDEs) form LŒ≤(œÑu)=ùí≤. L^{\\beta} (\\tau u) = \\mathcal{W}. ùí≤\\mathcal{W} Gaussian white noise, LL second-order differential operator, fractional power Œ≤\\beta determines smoothness uu, œÑ\\tau scales variance uu. simplest example model ‚Ñùd\\mathbb{R}^d L=Œ∫2‚àíŒîL = \\kappa^2 - \\Delta, results Gaussian random field uu Mat√©rn covariance function C(h)=œÉ22ŒΩ‚àí1Œì(ŒΩ)(Œ∫h)ŒΩKŒΩ(Œ∫h). C(h) = \\dfrac{ \\sigma^2 }{ 2 ^ {\\nu-1} \\Gamma (\\nu)} (\\kappa h)^{\\nu} K_{\\nu} (\\kappa h). 2Œ≤2 \\beta integer domain ùíü\\mathcal{D} model defined bounded, uu can approximated Gaussian Markov random field (GMRF) u\\mathbf { \\mathrm{u} } via finite element method (FEM) SPDE. Specifically, approximation can written uh(s)=‚àë=1nuiœÜi(s). u_h(s) = \\sum_{=1}^n u_i \\varphi_i (s). {œÜi}\\{\\varphi_i\\} piecewise linear basis functions defined triangulation ùíü\\mathcal{D} vector weights u=(u1,‚Ä¶,un)‚ä§\\mathbf{\\mathrm{u}} = (u_1,\\ldots,u_n)^\\top normally distributed, N(u,QÃÉ‚àí1)N(\\mathbf{\\mathrm{u}}, \\tilde{\\mathbf{\\mathrm{Q}}}^{-1}), QÃÉ\\tilde{ \\mathbf{ \\mathrm{Q} } } sparse. See explicit link Gaussian fields Gaussian Markov random fields: stochastic partial differential equation approach details. rSPDE package provides corresponding computationally efficient approximations case Œ≤\\beta general fractional power. main idea combine FEM approximation rational approximation fractional operator. result, one can easily inference prediction using fractional SPDE models (Œ∫2‚àíŒî)Œ≤u=ùí≤. (\\kappa^2-\\Delta)^\\beta u = \\mathcal{W}. particular, allows bayesian inference model parameters, including fractional parameter Œ≤\\beta. illustration purposes, package contains simple FEM implementation models R. See introduction rSPDE package vignette introduction package. Rational approximation rSPDE package Operator-based rational approximation vignettes provide introductions create fit rSPDE models. introduction R-INLA implementation rSPDE models see R-INLA implementation rational SPDE approach. rSPDE documentation contains descriptions examples functions rSPDE package.","code":""},{"path":"https://davidbolin.github.io/rSPDE/index.html","id":"installation-instructions","dir":"","previous_headings":"","what":"Installation instructions","title":"Rational Approximations of Fractional Stochastic Partial Differential Equations","text":"latest CRAN release package can installed directly CRAN install.packages(\"rSPDE\"). latest stable version (sometimes slightly recent CRAN version), can installed using command R. development version can installed using command want install package using {r}emotes::install_github-method Windows, first need install Rtools add paths Rtools gcc Windows PATH environment variable. can done current R session using commands variables {r}tools gcc need changed Rtools installed directly C:, gcc‚Äôs version might need changed depending version Rtools.","code":"remotes::install_github(\"davidbolin/rspde\", ref = \"stable\") remotes::install_github(\"davidbolin/rspde\", ref = \"devel\") rtools = \"C:\\Rtools\\bin\" gcc = \"C:\\Rtools\\gcc-4.6.3\\bin\" Sys.setenv(PATH = paste(c(gcc, rtools, Sys.getenv(\"PATH\")), collapse = \";\"))"},{"path":"https://davidbolin.github.io/rSPDE/index.html","id":"example-with-rspde---inla","dir":"","previous_headings":"","what":"Example with rSPDE - INLA","title":"Rational Approximations of Fractional Stochastic Partial Differential Equations","text":"illustrate rSPDE package kriging example using R-INLA interface rSPDE. data consist precipitation measurements Paran√° region Brazil provided Brazilian National Water Agency. data collected 616 gauge stations Paran√° state, south Brazil, day 2011. analyse full spatio-temporal data set, instead look total precipitation January details dataset commands refer reader rSPDE-INLA Vignette.     , std. deviations:","code":"library(rSPDE) library(ggplot2) library(INLA) library(splancs) library(viridis)  #Load the data data(PRprec) data(PRborder)  #Get the precipitation in January Y <- rowMeans(PRprec[, 3 + 1:31])  #Treat the data and plot ind <- !is.na(Y) Y <- Y[ind] coords <- as.matrix(PRprec[ind, 1:2]) alt <- PRprec$Altitude[ind]  ggplot() +   geom_point(aes(     x = coords[, 1], y = coords[, 2],     colour = Y   ), size = 2, alpha = 1) +   geom_path(aes(x = PRborder[, 1], y = PRborder[, 2])) +   geom_path(aes(x = PRborder[1034:1078, 1], y = PRborder[     1034:1078,     2   ]), colour = \"red\") +    scale_color_viridis() #Get distance from the sea seaDist <- apply(spDists(coords, PRborder[1034:1078, ], longlat = TRUE), 1,                   min)                   #Create the mesh library(fmesher) prdomain <- fm_nonconvex_hull(coords, -0.03, -0.05, resolution = c(100, 100)) prmesh <- fm_mesh_2d(boundary = prdomain, max.edge = c(0.45, 1), cutoff = 0.2) plot(prmesh, asp = 1, main = \"\") lines(PRborder, col = 3) points(coords[, 1], coords[, 2], pch = 19, cex = 0.5, col = \"red\") #Create the observation matrix Abar <- rspde.make.A(mesh = prmesh, loc = coords)  #Create the rspde model object rspde_model <- rspde.matern(mesh = prmesh)  #Create the index and inla.stack object mesh.index <- rspde.make.index(name = \"field\", mesh = prmesh) stk.dat <- inla.stack(   data = list(y = Y), A = list(Abar, 1), tag = \"est\",   effects = list(     c(       mesh.index     ),     list(       seaDist = inla.group(seaDist),       Intercept = 1     )   ) )                        #Create the formula object and fit the model f.s <- y ~ -1 + Intercept + f(seaDist, model = \"rw1\") +   f(field, model = rspde_model)    rspde_fit <- inla(f.s, family = \"Gamma\", data = inla.stack.data(stk.dat),              verbose = FALSE,              control.inla=list(int.strategy='eb'),             control.predictor = list(A = inla.stack.A(stk.dat), compute = TRUE))              summary(rspde_fit) ## Time used: ##     Pre = 0.419, Running = 3.42, Post = 0.065, Total = 3.91  ## Fixed effects: ##            mean   sd 0.025quant 0.5quant 0.975quant  mode kld ## Intercept 1.941 0.04      1.863    1.941      2.019 1.941   0 ##  ## Random effects: ##   Name     Model ##     seaDist RW1 model ##    field CGeneric ##  ## Model hyperparameters: ##                                                    mean       sd 0.025quant ## Precision-parameter for the Gamma observations   14.695    1.051     12.736 ## Precision for seaDist                          7693.497 4483.121   2480.186 ## Theta1 for field                                 -2.598    2.017     -7.198 ## Theta2 for field                                  1.791    0.477      0.994 ## Theta3 for field                                  0.894    1.719     -1.786 ##                                                0.5quant 0.975quant     mode ## Precision-parameter for the Gamma observations   14.657   1.69e+01   14.581 ## Precision for seaDist                          6606.827   1.94e+04 4956.877 ## Theta1 for field                                 -2.359   5.38e-01   -1.201 ## Theta2 for field                                  1.753   2.85e+00    1.555 ## Theta3 for field                                  0.692   4.81e+00   -0.283 ##  ## Marginal log-Likelihood:  -1253.95  ##  is computed  ## Posterior summaries for the linear predictor and the fitted values are computed ## (Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)') result_fit <- rspde.result(rspde_fit, \"field\", rspde_model) ## Warning in rspde.result(rspde_fit, \"field\", rspde_model): the mean or mode of ## nu is very close to nu.upper.bound, please consider increasing nu.upper.bound, ## and refitting the model. summary(result_fit) ##           mean       sd  0.025quant  0.5quant 0.975quant        mode ## tau   0.290104 0.508695 0.000791168 0.0999039    1.67992 8.88419e-05 ## kappa 6.759670 3.799620 2.711240000 5.6886500   16.98490 4.20809e+00 ## nu    1.256410 0.529663 0.291547000 1.3115700    1.98301 1.99105e+00 #Plot the posterior densities posterior_df_fit <- gg_df(result_fit)  ggplot(posterior_df_fit) + geom_line(aes(x = x, y = y)) +  facet_wrap(~parameter, scales = \"free\") + labs(y = \"Density\") #Create a grid to predict nxy <- c(150, 100) projgrid <- rspde.mesh.projector(prmesh,   xlim = range(PRborder[, 1]),   ylim = range(PRborder[, 2]), dims = nxy ) xy.in <- inout(projgrid$lattice$loc, cbind(PRborder[, 1], PRborder[, 2])) coord.prd <- projgrid$lattice$loc[xy.in, ]  #Compute A matrix and seaDist at predict locations and build the stack A.prd <- projgrid$proj$A[xy.in, ] seaDist.prd <- apply(spDists(coord.prd,      PRborder[1034:1078, ], longlat = TRUE), 1, min) ef.prd = list(c(mesh.index),      list(long = inla.group(coord.prd[,      1]), lat = inla.group(coord.prd[, 2]),      seaDist = inla.group(seaDist.prd),     Intercept = 1)) stk.prd <- inla.stack(data = list(y = NA),      A = list(A.prd, 1), tag = \"prd\",      effects = ef.prd) stk.all <- inla.stack(stk.dat, stk.prd)  rspde_fitprd <- inla(f.s,   family = \"Gamma\",   data = inla.stack.data(stk.all),   control.predictor = list(     A = inla.stack.A(stk.all),     compute = TRUE, link = 1   ),   control.compute = list(     return.marginals = FALSE,     return.marginals.predictor = FALSE   ),   control.inla = list(int.strategy = \"eb\") )  id.prd <- inla.stack.index(stk.all, \"prd\")$data m.prd <- rspde_fitprd$summary.fitted.values$mean[id.prd] sd.prd <- rspde_fitprd$summary.fitted.values$sd[id.prd]  #Plot the predictions pred_df <- data.frame(x1 = coord.prd[,1],                       x2 = coord.prd[,2],                       mean = m.prd,                       sd = sd.prd)  ggplot(pred_df, aes(x = x1, y = x2, fill = mean)) +   geom_raster() +   scale_fill_viridis() ggplot(pred_df, aes(x = x1, y = x2, fill = sd)) +   geom_raster() + scale_fill_viridis()"},{"path":"https://davidbolin.github.io/rSPDE/index.html","id":"example-with-rspde---inlabru","dir":"","previous_headings":"","what":"Example with rSPDE - inlabru","title":"Rational Approximations of Fractional Stochastic Partial Differential Equations","text":"now illustrate rSPDE kriging example inlabru interface rSPDE. make description self-contained, use information codes example . data consist precipitation measurements Paran√° region Brazil provided Brazilian National Water Agency. data collected 616 gauge stations Paran√° state, south Brazil, day 2011. analyse full spatio-temporal data set, instead look total precipitation January details dataset commands refer reader rSPDE-inlabru Vignette.    Finally, plot results. First predicted mean:  , std. deviations:","code":"library(rSPDE) library(ggplot2) library(INLA) library(inlabru) library(splancs)  #Load the data data(PRprec) data(PRborder)  #Get the precipitation in January Y <- rowMeans(PRprec[, 3 + 1:31])  #Treat the data and plot ind <- !is.na(Y) Y <- Y[ind] coords <- as.matrix(PRprec[ind, 1:2]) alt <- PRprec$Altitude[ind]  ggplot() +   geom_point(aes(     x = coords[, 1], y = coords[, 2],     colour = Y   ), size = 2, alpha = 1) +   geom_path(aes(x = PRborder[, 1], y = PRborder[, 2])) +   geom_path(aes(x = PRborder[1034:1078, 1], y = PRborder[     1034:1078,     2   ]), colour = \"red\") +    scale_color_viridis() #Get distance from the sea seaDist <- apply(spDists(coords, PRborder[1034:1078, ], longlat = TRUE), 1,                   min)                   #Create the mesh library(fmesher) prdomain <- fm_nonconvex_hull(coords, -0.03, -0.05, resolution = c(100, 100)) prmesh <- fm_mesh_2d(boundary = prdomain, max.edge = c(0.45, 1), cutoff = 0.2) plot(prmesh, asp = 1, main = \"\") lines(PRborder, col = 3) points(coords[, 1], coords[, 2], pch = 19, cex = 0.5, col = \"red\") #Create the rspde model object rspde_model <- rspde.matern(mesh = prmesh)  #Create the data.frame prdata <- data.frame(long = coords[,1], lat = coords[,2],                          seaDist = inla.group(seaDist), y = Y) coordinates(prdata) <- c(\"long\",\"lat\")                        #Create the component  # The following synthax is available for inlabru version 2.5.3.9002 and above: cmp <- y ~ Intercept(1) + distSea(seaDist, model=\"rw1\") + field(coordinates, model = rspde_model)  # For inlabru version 2.5.3 one should use: cmp <- y ~ Intercept(1) + distSea(seaDist, model=\"rw1\") + field(coordinates, model = rspde_model)  # Fit the model    rspde_fit <- bru(cmp, family = \"Gamma\",              data = prdata,             options = list(             verbose = FALSE,              control.inla=list(int.strategy='eb'),             control.predictor = list(compute = TRUE)) )              summary(rspde_fit) ## inlabru version: 2.11.1 ## INLA version: 24.06.27 ## Components: ## Intercept: main = linear(1), group = exchangeable(1L), replicate = iid(1L) ## distSea: main = rw1(seaDist), group = exchangeable(1L), replicate = iid(1L) ## field: main = cgeneric(coordinates), group = exchangeable(1L), replicate = iid(1L) ## Likelihoods: ##   Family: 'Gamma' ##     Data class: 'SpatialPointsDataFrame' ##     Predictor: y ~ . ## Time used: ##     Pre = 0.24, Running = 3.73, Post = 0.0605, Total = 4.03  ## Fixed effects: ##            mean   sd 0.025quant 0.5quant 0.975quant  mode kld ## Intercept 1.941 0.04      1.863    1.941      2.018 1.941   0 ##  ## Random effects: ##   Name     Model ##     distSea RW1 model ##    field CGeneric ##  ## Model hyperparameters: ##                                                    mean      sd 0.025quant ## Precision-parameter for the Gamma observations   14.713    1.05      12.73 ## Precision for distSea                          7846.450 4577.02    2442.91 ## Theta1 for field                                 -2.164    1.54      -5.64 ## Theta2 for field                                  1.678    0.37       1.02 ## Theta3 for field                                  0.538    1.33      -1.58 ##                                                0.5quant 0.975quant     mode ## Precision-parameter for the Gamma observations   14.686   1.69e+01   14.652 ## Precision for distSea                          6753.115   1.98e+04 5058.666 ## Theta1 for field                                 -1.995   2.72e-01   -1.186 ## Theta2 for field                                  1.657   2.47e+00    1.550 ## Theta3 for field                                  0.393   3.56e+00   -0.302 ##  ## Deviance Information Criterion (DIC) ...............: 2465.43 ## Deviance Information Criterion (DIC, saturated) ....: 726.24 ## Effective number of parameters .....................: 112.31 ##  ## Watanabe-Akaike information criterion (WAIC) ...: 2466.83 ## Effective number of parameters .................: 97.97 ##  ## Marginal log-Likelihood:  -1254.18  ##  is computed  ## Posterior summaries for the linear predictor and the fitted values are computed ## (Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)') #Get the summary on the user's scale result_fit <- rspde.result(rspde_fit, \"field\", rspde_model) summary(result_fit) ##           mean       sd 0.025quant 0.5quant 0.975quant       mode ## tau   0.275381 0.369755 0.00370031 0.141872    1.29539 0.00318734 ## kappa 5.738980 2.320680 2.79784000 5.198550   11.71820 4.29620000 ## nu    1.175280 0.476907 0.34413500 1.176480    1.94244 1.85057000 #Plot the posterior densities posterior_df_fit <- gg_df(result_fit)  ggplot(posterior_df_fit) + geom_line(aes(x = x, y = y)) +  facet_wrap(~parameter, scales = \"free\") + labs(y = \"Density\") #Create a grid to predict nxy <- c(150, 100) projgrid <- rspde.mesh.projector(prmesh, xlim = range(PRborder[, 1]),  ylim = range(PRborder[,2]), dims = nxy) xy.in <- inout(projgrid$lattice$loc, cbind(PRborder[, 1], PRborder[, 2])) coord.prd <- projgrid$lattice$loc[xy.in, ]  #Compute seaDist at predict locations  seaDist.prd <- apply(spDists(coord.prd,      PRborder[1034:1078, ], longlat = TRUE), 1, min)  # Build the prediction data.frame() coord.prd.df <- data.frame(x1 = coord.prd[,1],                             x2 = coord.prd[,2]) coordinates(coord.prd.df) <- c(\"x1\", \"x2\") coord.prd.df$seaDist <- seaDist.prd  # Obtain prediction at the locations pred_obs <- predict(rspde_fit, coord.prd.df,          ~exp(Intercept + field + distSea))  # Prepare the plotting data.frame() pred_df <- pred_obs@data pred_df <- cbind(pred_df, pred_obs@coords) ggplot(pred_df, aes(x = x1, y = x2, fill = mean)) +   geom_raster() +   scale_fill_viridis() ggplot(pred_df, aes(x = x1, y = x2, fill = sd)) +   geom_raster() + scale_fill_viridis()"},{"path":"https://davidbolin.github.io/rSPDE/reference/augment.rspde_lme.html","id":null,"dir":"Reference","previous_headings":"","what":"Augment data with information from a rspde_lme object ‚Äî augment.rspde_lme","title":"Augment data with information from a rspde_lme object ‚Äî augment.rspde_lme","text":"Augment accepts model object dataset adds information observation dataset. includes predicted values .fitted column, residuals .resid column, standard errors fitted values .se.fit column. also contains New columns always begin . prefix avoid overwriting columns original dataset.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/augment.rspde_lme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Augment data with information from a rspde_lme object ‚Äî augment.rspde_lme","text":"","code":"# S3 method for class 'rspde_lme' augment(   x,   newdata = NULL,   loc = NULL,   mesh = FALSE,   which_repl = NULL,   se_fit = FALSE,   conf_int = FALSE,   pred_int = FALSE,   level = 0.95,   n_samples = 100,   ... )"},{"path":"https://davidbolin.github.io/rSPDE/reference/augment.rspde_lme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Augment data with information from a rspde_lme object ‚Äî augment.rspde_lme","text":"x rspde_lme object. newdata data.frame list containing covariates, edge number distance edge locations obtain prediction. NULL, fitted values given original locations model fitted. loc Prediction locations. Can either data.frame, matrix character vector, contains names columns coordinates locations. models using metric_graph objects, plase use edge_number distance_on_edge instead. mesh Obtain predictions mesh nodes? graph must mesh, either only_latent set TRUE model covariates. which_repl replicates obtain prediction. NULL predictions obtained replicates. Default NULL. se_fit Logical indicating whether .se.fit column added augmented output. TRUE, returns non-NA value type prediction 'link'. conf_int Logical indicating whether confidence intervals fitted variable built. pred_int Logical indicating whether prediction intervals future observations built. level Level confidence prediction intervals constructed. n_samples Number samples computing prediction intervals. ... Additional arguments. Expert use .","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/augment.rspde_lme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Augment data with information from a rspde_lme object ‚Äî augment.rspde_lme","text":"tidyr::tibble() columns: .fitted Fitted predicted value. .fittedlwrconf Lower bound confidence interval, conf_int = TRUE .fitteduprconf Upper bound confidence interval, conf_int = TRUE .fittedlwrpred Lower bound prediction interval, pred_int = TRUE .fitteduprpred Upper bound prediction interval, pred_int = TRUE .fixed Prediction fixed effects. .random Prediction random effects. .resid ordinary residuals, , difference observed fitted values. .se_fit Standard errors fitted values, se_fit = TRUE.","code":""},{"path":[]},{"path":"https://davidbolin.github.io/rSPDE/reference/bru_get_mapper.inla_rspde.html","id":null,"dir":"Reference","previous_headings":"","what":"rSPDE inlabru mapper ‚Äî bru_get_mapper.inla_rspde","title":"rSPDE inlabru mapper ‚Äî bru_get_mapper.inla_rspde","text":"rSPDE inlabru mapper","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/bru_get_mapper.inla_rspde.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rSPDE inlabru mapper ‚Äî bru_get_mapper.inla_rspde","text":"","code":"bru_get_mapper.inla_rspde(model, ...)  ibm_n.bru_mapper_inla_rspde(mapper, ...)  ibm_values.bru_mapper_inla_rspde(mapper, ...)  ibm_jacobian.bru_mapper_inla_rspde(mapper, input, ...)"},{"path":"https://davidbolin.github.io/rSPDE/reference/bru_get_mapper.inla_rspde.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rSPDE inlabru mapper ‚Äî bru_get_mapper.inla_rspde","text":"model inla_rspde construct extract mapper ... Arguments passed methods mapper bru_mapper_inla_rspde object input values produce mapping matrix","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/bru_get_mapper.inla_rspde.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"rSPDE inlabru mapper ‚Äî bru_get_mapper.inla_rspde","text":"","code":"# \\donttest{ # devel version if (requireNamespace(\"INLA\", quietly = TRUE) &&   requireNamespace(\"inlabru\", quietly = TRUE)) {   library(INLA)   library(inlabru)    set.seed(123)   m <- 100   loc_2d_mesh <- matrix(runif(m * 2), m, 2)   mesh_2d <- inla.mesh.2d(     loc = loc_2d_mesh,     cutoff = 0.05,     max.edge = c(0.1, 0.5)   )   sigma <- 1   range <- 0.2   nu <- 0.8   kappa <- sqrt(8 * nu) / range   op <- matern.operators(     mesh = mesh_2d, nu = nu,     range = range, sigma = sigma, m = 2,     parameterization = \"matern\"   )   u <- simulate(op)   A <- inla.spde.make.A(     mesh = mesh_2d,     loc = loc_2d_mesh   )   sigma.e <- 0.1   y <- A %*% u + rnorm(m) * sigma.e   y <- as.vector(y)    data_df <- data.frame(     y = y, x1 = loc_2d_mesh[, 1],     x2 = loc_2d_mesh[, 2]   )   coordinates(data_df) <- c(\"x1\", \"x2\")   rspde_model <- rspde.matern(     mesh = mesh_2d,     nu_upper_bound = 2   )    cmp <- y ~ Intercept(1) +     field(coordinates, model = rspde_model)     rspde_fit <- bru(cmp, data = data_df)   summary(rspde_fit) } #> Loading required package: sp #> This is INLA_24.06.27 built 2024-06-27 02:36:04 UTC. #>  - See www.r-inla.org/contact-us for how to get help. #>  - List available models/likelihoods/etc with inla.list.models() #>  - Use inla.doc(<NAME>) to access documentation #> Loading required package: fmesher #> inlabru version: 2.11.1 #> INLA version: 24.06.27 #> Components: #> Intercept: main = linear(1), group = exchangeable(1L), replicate = iid(1L) #> field: main = cgeneric(coordinates), group = exchangeable(1L), replicate = iid(1L) #> Likelihoods: #>   Family: 'gaussian' #>     Data class: 'SpatialPointsDataFrame' #>     Predictor: y ~ . #> Time used: #>     Pre = 0.402, Running = 1.65, Post = 0.361, Total = 2.41  #> Fixed effects: #>            mean    sd 0.025quant 0.5quant 0.975quant  mode kld #> Intercept 0.286 0.172     -0.055    0.285      0.629 0.286   0 #>  #> Random effects: #>   Name\t  Model #>     field CGeneric #>  #> Model hyperparameters: #>                                            mean     sd 0.025quant 0.5quant #> Precision for the Gaussian observations 169.585 90.653     51.081  150.672 #> Theta1 for field                         -3.971  0.551     -5.229   -3.905 #> Theta2 for field                          2.882  0.204      2.494    2.878 #> Theta3 for field                         -0.062  0.292     -0.527   -0.093 #>                                         0.975quant    mode #> Precision for the Gaussian observations    397.150 116.405 #> Theta1 for field                            -3.118  -3.581 #> Theta2 for field                             3.296   2.859 #> Theta3 for field                             0.599  -0.245 #>  #> Deviance Information Criterion (DIC) ...............: -125.30 #> Deviance Information Criterion (DIC, saturated) ....: 195.68 #> Effective number of parameters .....................: 93.13 #>  #> Watanabe-Akaike information criterion (WAIC) ...: -145.58 #> Effective number of parameters .................: 54.16 #>  #> Marginal log-Likelihood:  -109.58  #>  is computed  #> Posterior summaries for the linear predictor and the fitted values are computed #> (Posterior marginals needs also 'control.compute=list(return.marginals.predictor=TRUE)') #>  # devel.tag # }"},{"path":"https://davidbolin.github.io/rSPDE/reference/construct.spde.matern.loglike.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor of Matern loglikelihood functions for non-stationary models. ‚Äî construct.spde.matern.loglike","title":"Constructor of Matern loglikelihood functions for non-stationary models. ‚Äî construct.spde.matern.loglike","text":"function evaluates log-likelihood function observations non-stationary Gaussian process defined solution SPDE $$(\\kappa(s) - \\Delta)^\\beta (\\tau(s)u(s)) = W.$$ observations assumed generated \\(Y_i = u(s_i) + \\epsilon_i\\), \\(\\epsilon_i\\) iid mean-zero Gaussian variables. latent model approximated using rational approximation fractional SPDE model.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/construct.spde.matern.loglike.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor of Matern loglikelihood functions for non-stationary models. ‚Äî construct.spde.matern.loglike","text":"","code":"construct.spde.matern.loglike(   object,   Y,   A,   sigma.e = NULL,   mu = 0,   user_nu = NULL,   user_m = NULL,   log_scale = TRUE,   return_negative_likelihood = TRUE )"},{"path":"https://davidbolin.github.io/rSPDE/reference/construct.spde.matern.loglike.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor of Matern loglikelihood functions for non-stationary models. ‚Äî construct.spde.matern.loglike","text":"object rational SPDE approximation, computed using matern.operators() Y observations, either vector matrix columns correspond independent replicates observations. observation matrix links measurement location finite element basis. sigma.e non-null, standard deviation measurement noise kept fixed returned likelihood. mu Expectation vector latent field (default = 0). user_nu non-null, shape parameter kept fixed returned likelihood. user_m non-null, update order rational approximation, needs positive integer. log_scale parameters evaluated log-scale? return_negative_likelihood Return minus likelihood turn maximization minimization?","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/construct.spde.matern.loglike.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor of Matern loglikelihood functions for non-stationary models. ‚Äî construct.spde.matern.loglike","text":"log-likelihood function. parameters returned function given order theta, nu, sigma.e, whenever available.","code":""},{"path":[]},{"path":"https://davidbolin.github.io/rSPDE/reference/construct.spde.matern.loglike.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructor of Matern loglikelihood functions for non-stationary models. ‚Äî construct.spde.matern.loglike","text":"","code":"# this example illustrates how the function can be used for maximum # likelihood estimation # Sample a Gaussian Matern process on R using a rational approximation set.seed(123) sigma.e <- 0.1 n.rep <- 10 n.obs <- 100 n.x <- 51 # create mass and stiffness matrices for a FEM discretization x <- seq(from = 0, to = 1, length.out = n.x) fem <- rSPDE.fem1d(x) tau <- rep(0.5, n.x) nu <- 0.8 alpha <- nu + 0.5 kappa <- rep(1, n.x) # Matern parameterization # compute rational approximation op <- spde.matern.operators(   loc_mesh = x,   kappa = kappa, tau = tau, alpha = alpha,   parameterization = \"spde\", d = 1 ) # Sample the model u <- simulate(op, n.rep) # Create some data obs.loc <- runif(n = n.obs, min = 0, max = 1) A <- rSPDE.A1d(x, obs.loc) noise <- rnorm(n.obs * n.rep) dim(noise) <- c(n.obs, n.rep) Y <- as.matrix(A %*% u + sigma.e * noise) # define negative likelihood function for optimization using matern.loglike mlik <- construct.spde.matern.loglike(op, Y, A) #' #The parameters can now be estimated by minimizing mlik with optim # \\donttest{ # Choose some reasonable starting values depending on the size of the domain theta0 <- log(c(1 / sqrt(var(c(Y))), sqrt(8), 0.9, 0.01)) # run estimation and display the results theta <- optim(theta0, mlik) print(data.frame(   tau = c(tau[1], exp(theta$par[1])), kappa = c(kappa[1], exp(theta$par[2])),   nu = c(nu, exp(theta$par[3])), sigma.e = c(sigma.e, exp(theta$par[4])),   row.names = c(\"Truth\", \"Estimates\") )) #>                 tau     kappa        nu    sigma.e #> Truth     0.5000000 1.0000000 0.8000000 0.10000000 #> Estimates 0.5179508 0.9054192 0.9432971 0.09920897 # }  # SPDE parameterization # compute rational approximation op <- spde.matern.operators(   kappa = kappa, tau = tau, alpha = alpha,   loc_mesh = x, d = 1,   parameterization = \"spde\" ) # Sample the model u <- simulate(op, n.rep) # Create some data obs.loc <- runif(n = n.obs, min = 0, max = 1) A <- rSPDE.A1d(x, obs.loc) noise <- rnorm(n.obs * n.rep) dim(noise) <- c(n.obs, n.rep) Y <- as.matrix(A %*% u + sigma.e * noise) # define negative likelihood function for optimization using matern.loglike mlik <- construct.spde.matern.loglike(op, Y, A) #' #The parameters can now be estimated by minimizing mlik with optim # \\donttest{ # Choose some reasonable starting values depending on the size of the domain theta0 <- log(c(1 / sqrt(var(c(Y))), sqrt(8), 0.9, 0.01)) # run estimation and display the results theta <- optim(theta0, mlik) print(data.frame(   tau = c(tau[1], exp(theta$par[1])), kappa = c(kappa[1], exp(theta$par[2])),   nu = c(nu, exp(theta$par[3])), sigma.e = c(sigma.e, exp(theta$par[4])),   row.names = c(\"Truth\", \"Estimates\") )) #>                 tau    kappa        nu    sigma.e #> Truth     0.5000000 1.000000 0.8000000 0.10000000 #> Estimates 0.5309221 1.108897 0.9179094 0.09957545 # }"},{"path":"https://davidbolin.github.io/rSPDE/reference/create_train_test_indices.html","id":null,"dir":"Reference","previous_headings":"","what":"Create train and test splits to be used in the cross_validation function ‚Äî create_train_test_indices","title":"Create train and test splits to be used in the cross_validation function ‚Äî create_train_test_indices","text":"Train test splits","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/create_train_test_indices.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Create train and test splits to be used in the cross_validation function ‚Äî create_train_test_indices","text":"","code":"create_train_test_indices(   data,   cv_type = c(\"k-fold\", \"loo\", \"lpo\"),   k = 5,   percentage = 20,   number_folds = 10 )"},{"path":"https://davidbolin.github.io/rSPDE/reference/create_train_test_indices.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Create train and test splits to be used in the cross_validation function ‚Äî create_train_test_indices","text":"data list, data.frame, SpatialPointsDataFrame metric_graph_data objects. cv_type type folding carried . options k-fold k-fold cross-validation, case parameter k provided, loo, leave-one-lpo leave-percentage-, case, parameter percentage given, also number_folds number folds done. default k-fold. k number folds used k-fold cross-validation. used cv_type k-fold. percentage percentage (1 99) data used train model. used cv_type lpo. number_folds Number folds done cv_type lpo.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/create_train_test_indices.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Create train and test splits to be used in the cross_validation function ‚Äî create_train_test_indices","text":"list two elements, train containing training indices test containing indices.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/cross_validation.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform cross-validation on a list of fitted models. ‚Äî cross_validation","title":"Perform cross-validation on a list of fitted models. ‚Äî cross_validation","text":"Obtain several scores list fitted models according folding scheme.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/cross_validation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform cross-validation on a list of fitted models. ‚Äî cross_validation","text":"","code":"cross_validation(   models,   model_names = NULL,   scores = c(\"mse\", \"crps\", \"scrps\", \"dss\"),   cv_type = c(\"k-fold\", \"loo\", \"lpo\"),   k = 5,   percentage = 20,   number_folds = 10,   n_samples = 1000,   return_scores_folds = FALSE,   orientation_results = c(\"negative\", \"positive\"),   include_best = TRUE,   train_test_indexes = NULL,   return_train_test = FALSE,   return_post_samples = FALSE,   parallelize_RP = FALSE,   n_cores_RP = parallel::detectCores() - 1,   true_CV = TRUE,   save_settings = FALSE,   print = TRUE,   fit_verbose = FALSE )"},{"path":"https://davidbolin.github.io/rSPDE/reference/cross_validation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform cross-validation on a list of fitted models. ‚Äî cross_validation","text":"models fitted model obtained calling bru() function list models fitted bru() function. model_names vector containing names models appear returned data.frame. NULL, names form Model 1, Model 2, . default, try obtain name models list. scores vector containing scores computed. options \"mse\", \"crps\", \"scrps\" \"dss\". default, scores computed. cv_type type folding carried . options k-fold k-fold cross-validation, case parameter k provided, loo, leave-one-lpo leave-percentage-, case, parameter percentage given, also number_folds number folds done. default k-fold. k number folds used k-fold cross-validation. used cv_type k-fold. percentage percentage (1 99) data used train model. used cv_type lpo. number_folds Number folds done cv_type lpo. n_samples Number samples compute posterior statistics used compute scores. return_scores_folds TRUE, scores fold also returned. orientation_results character vector. options \"negative\" \"positive\". \"negative\", smaller scores better. \"positive\", larger scores better. include_best row indicating model best score included? train_test_indexes list containing two entries train, list whose elements vectors indexes training data, test, list whose elements vectors indexes test data. Typically returned list obtained setting argument return_train_test TRUE. return_train_test Logical. training test indexes returned? 'TRUE' train test indexes 'train_test' element returned list. return_post_samples TRUE posterior samples included returned list. parallelize_RP Logical. computation CRPS SCRPS (cases, DSS) parallelized? n_cores_RP Number cores used parallelize_rp TRUE. true_CV TRUE cross-validation performed? TRUE models fitted training dataset. FALSE, parameters kept fixed ones obtained result object. save_settings Logical. TRUE, settings used cross-validation also returned. print partial results printed throughout computation? fit_verbose INLA's run cross-validation verbose?","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/cross_validation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform cross-validation on a list of fitted models. ‚Äî cross_validation","text":"data.frame fitted models corresponding scores.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/folded.matern.covariance.1d.html","id":null,"dir":"Reference","previous_headings":"","what":"The 1d folded Matern covariance function ‚Äî folded.matern.covariance.1d","title":"The 1d folded Matern covariance function ‚Äî folded.matern.covariance.1d","text":"folded.matern.covariance.1d evaluates 1d folded Matern covariance function interval \\([0,L]\\).","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/folded.matern.covariance.1d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The 1d folded Matern covariance function ‚Äî folded.matern.covariance.1d","text":"","code":"folded.matern.covariance.1d(   h,   m,   kappa,   nu,   sigma,   L = 1,   N = 10,   boundary = c(\"neumann\", \"dirichlet\", \"periodic\") )"},{"path":"https://davidbolin.github.io/rSPDE/reference/folded.matern.covariance.1d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The 1d folded Matern covariance function ‚Äî folded.matern.covariance.1d","text":"h, m Vectors arguments covariance function. kappa Range parameter. nu Shape parameter. sigma Standard deviation. L upper bound interval \\([0,L]\\). default, L=1. N truncation parameter. boundary boundary condition. possible conditions \"neumann\" (default), \"dirichlet\" \"periodic\".","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/folded.matern.covariance.1d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The 1d folded Matern covariance function ‚Äî folded.matern.covariance.1d","text":"matrix corresponding covariance values.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/folded.matern.covariance.1d.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The 1d folded Matern covariance function ‚Äî folded.matern.covariance.1d","text":"folded.matern.covariance.1d evaluates 1d folded Matern covariance function interval \\([0,L]\\) different boundary conditions. periodic boundary conditions $$C_{\\mathcal{P}}(h,m) = \\sum_{k=-\\infty}^{\\infty} (C(h-m+2kL),$$ Neumann boundary conditions $$C_{\\mathcal{N}}(h,m) = \\sum_{k=-\\infty}^{\\infty} (C(h-m+2kL)+C(h+m+2kL)),$$ Dirichlet boundary conditions: $$C_{\\mathcal{D}}(h,m) = \\sum_{k=-\\infty}^{\\infty} (C(h-m+2kL)-C(h+m+2kL)),$$ \\(C(\\cdot)\\) Matern covariance function: $$C(h) = \\frac{\\sigma^2}{2^{\\nu-1}\\Gamma(\\nu)}(\\kappa h)^\\nu K_\\nu(\\kappa h).$$ consider truncation: $$C_{{\\mathcal{P}},N}(h,m) = \\sum_{k=-N}^{N} C(h-m+2kL), C_{\\mathcal{N},N}(h,m) = \\sum_{k=-\\infty}^{\\infty} (C(h-m+2kL)+C(h+m+2kL)),$$ $$C_{\\mathcal{D},N}(h,m) = \\sum_{k=-N}^{N} (C(h-m+2kL)-C(h+m+2kL)).$$","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/folded.matern.covariance.1d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The 1d folded Matern covariance function ‚Äî folded.matern.covariance.1d","text":"","code":"x <- seq(from = 0, to = 1, length.out = 101) plot(x, folded.matern.covariance.1d(rep(0.5, length(x)), x,   kappa = 10, nu = 1 / 5, sigma = 1 ), type = \"l\", ylab = \"C(h)\", xlab = \"h\" )"},{"path":"https://davidbolin.github.io/rSPDE/reference/folded.matern.covariance.2d.html","id":null,"dir":"Reference","previous_headings":"","what":"The 2d folded Matern covariance function ‚Äî folded.matern.covariance.2d","title":"The 2d folded Matern covariance function ‚Äî folded.matern.covariance.2d","text":"folded.matern.covariance.2d evaluates 2d folded Matern covariance function interval \\([0,L]\\times [0,L]\\).","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/folded.matern.covariance.2d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The 2d folded Matern covariance function ‚Äî folded.matern.covariance.2d","text":"","code":"folded.matern.covariance.2d(   h,   m,   kappa,   nu,   sigma,   L = 1,   N = 10,   boundary = c(\"neumann\", \"dirichlet\", \"periodic\", \"R2\") )"},{"path":"https://davidbolin.github.io/rSPDE/reference/folded.matern.covariance.2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The 2d folded Matern covariance function ‚Äî folded.matern.covariance.2d","text":"h, m Vectors two coordinates. kappa Range parameter. nu Shape parameter. sigma Standard deviation. L upper bound square \\([0,L]\\times [0,L]\\). default, L=1. N truncation parameter. boundary boundary condition. possible conditions \"neumann\" (default), \"dirichlet\", \"periodic\" \"R2\".","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/folded.matern.covariance.2d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The 2d folded Matern covariance function ‚Äî folded.matern.covariance.2d","text":"correspoding covariance.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/folded.matern.covariance.2d.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"The 2d folded Matern covariance function ‚Äî folded.matern.covariance.2d","text":"folded.matern.covariance.2d evaluates 1d folded Matern covariance function interval \\([0,L]\\times [0,L]\\) different boundary conditions. periodic boundary conditions $$C_{\\mathcal{P}}((h_1,h_2),(m_1,m_2)) = \\sum_{k_2=-\\infty}^\\infty \\sum_{k_1=-\\infty}^{\\infty} (C(\\|(h_1-m_1+2k_1L,h_2-m_2+2k_2L)\\|),$$ Neumann boundary conditions $$C_{\\mathcal{N}}((h_1,h_2),(m_1,m_2)) = \\sum_{k_2=-\\infty}^\\infty \\sum_{k_1=-\\infty}^{\\infty} (C(\\|(h_1-m_1+2k_1L,h_2-m_2+2k_2L)\\|)+C(\\|(h_1-m_1+2k_1L, h_2+m_2+2k_2L)\\|)+C(\\|(h_1+m_1+2k_1L,h_2-m_2+2k_2L)\\|)+ C(\\|(h_1+m_1+2k_1L,h_2+m_2+2k_2L)\\|)),$$ Dirichlet boundary conditions: $$C_{\\mathcal{D}}((h_1,h_2),(m_1,m_2)) = \\sum_{k_2=-\\infty}^\\infty \\sum_{k_1=-\\infty}^{\\infty} (C(\\|(h_1-m_1+2k_1L,h_2-m_2+2k_2L)\\|)- C(\\|(h_1-m_1+2k_1L,h_2+m_2+2k_2L)\\|)-C(\\|(h_1+m_1+2k_1L, h_2-m_2+2k_2L)\\|)+C(\\|(h_1+m_1+2k_1L,h_2+m_2+2k_2L)\\|)),$$ \\(C(\\cdot)\\) Matern covariance function: $$C(h) = \\frac{\\sigma^2}{2^{\\nu-1}\\Gamma(\\nu)} (\\kappa h)^\\nu K_\\nu(\\kappa h).$$ consider truncation \\(k_1,k_2\\) \\(-N\\) \\(N\\).","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/folded.matern.covariance.2d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The 2d folded Matern covariance function ‚Äî folded.matern.covariance.2d","text":"","code":"h <- c(0.5, 0.5) m <- c(0.5, 0.5) folded.matern.covariance.2d(h, m, kappa = 10, nu = 1 / 5, sigma = 1) #> [1] 1.000043"},{"path":"https://davidbolin.github.io/rSPDE/reference/fractional.operators.html","id":null,"dir":"Reference","previous_headings":"","what":"Rational approximations of fractional operators ‚Äî fractional.operators","title":"Rational approximations of fractional operators ‚Äî fractional.operators","text":"fractional.operators used computing approximation, can used inference simulation, fractional SPDE $$L^\\beta (\\tau u(s)) = W.$$ \\(L\\) differential operator, \\(\\beta>0\\) fractional power, \\(\\tau\\) positive scalar vector scales variance solution \\(u\\), \\(W\\) white noise.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/fractional.operators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rational approximations of fractional operators ‚Äî fractional.operators","text":"","code":"fractional.operators(L, beta, C, scale.factor, m = 1, tau = 1)"},{"path":"https://davidbolin.github.io/rSPDE/reference/fractional.operators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rational approximations of fractional operators ‚Äî fractional.operators","text":"L finite element discretization operator \\(L\\). beta positive fractional power. C mass matrix finite element discretization. scale.factor constant \\(c\\) lower bound smallest eigenvalue non-discretized operator \\(L\\). m order rational approximation, needs positive integer. default value 1. Higer values gives accurate approximation, computationally expensive use inference. Currently, largest value m implemented 4. tau constant vector scales variance solution. default value 1.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/fractional.operators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rational approximations of fractional operators ‚Äî fractional.operators","text":"fractional.operators returns object class \"rSPDEobj\". object contains following quantities: Pl operator \\(P_l\\). Pr operator \\(P_r\\). C mass lumped mass matrix. Ci inverse C. m order rational approximation. beta fractional power. type String indicating type approximation. Q matrix t(Pl) %*% solve(C,Pl). type String indicating type approximation. Pl.factors List elements can used assemble \\(P_l\\). Pr.factors List elements can used assemble \\(P_r\\).","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/fractional.operators.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rational approximations of fractional operators ‚Äî fractional.operators","text":"approximation based rational approximation fractional operator, resulting approximate model form $$P_l u(s) = P_r W,$$ \\(P_j = p_j(L)\\) non-fractional operators defined terms polynomials \\(p_j\\) \\(j=l,r\\). order \\(p_r\\) given m order \\(p_l\\) \\(m + m_\\beta\\) \\(m_\\beta\\) integer part \\(\\beta\\) \\(\\beta>1\\) \\(m_\\beta = 1\\) otherwise. discrete approximation can written \\(u = P_r x\\) \\(x \\sim N(0,Q^{-1})\\) \\(Q = P_l^T C^{-1} P_l\\). Note matrices \\(P_r\\) \\(Q\\) may ill-conditioned \\(m>1\\). case, methods operator.operations() used operations involving matrices, since methods numerically stable.","code":""},{"path":[]},{"path":"https://davidbolin.github.io/rSPDE/reference/fractional.operators.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rational approximations of fractional operators ‚Äî fractional.operators","text":"","code":"# Compute rational approximation of a Gaussian process with a # Matern covariance function on R kappa <- 10 sigma <- 1 nu <- 0.8  # create mass and stiffness matrices for a FEM discretization x <- seq(from = 0, to = 1, length.out = 101) fem <- rSPDE.fem1d(x)  # compute rational approximation of covariance function at 0.5 tau <- sqrt(gamma(nu) / (sigma^2 * kappa^(2 * nu) *   (4 * pi)^(1 / 2) * gamma(nu + 1 / 2))) op <- fractional.operators(   L = fem$G + kappa^2 * fem$C, beta = (nu + 1 / 2) / 2,   C = fem$C, scale.factor = kappa^2, tau = tau )  v <- t(rSPDE.A1d(x, 0.5)) c.approx <- Sigma.mult(op, v)  # plot the result and compare with the true Matern covariance plot(x, matern.covariance(abs(x - 0.5), kappa, nu, sigma),   type = \"l\", ylab = \"C(h)\",   xlab = \"h\", main = \"Matern covariance and rational approximations\" ) lines(x, c.approx, col = 2)"},{"path":"https://davidbolin.github.io/rSPDE/reference/get.initial.values.rSPDE.html","id":null,"dir":"Reference","previous_headings":"","what":"Initial values for log-likelihood optimization in rSPDE models with a latent stationary Gaussian Matern model ‚Äî get.initial.values.rSPDE","title":"Initial values for log-likelihood optimization in rSPDE models with a latent stationary Gaussian Matern model ‚Äî get.initial.values.rSPDE","text":"Auxiliar function obtain domain-based initial values log-likelihood optimization rSPDE models latent stationary Gaussian Matern model","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/get.initial.values.rSPDE.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Initial values for log-likelihood optimization in rSPDE models with a latent stationary Gaussian Matern model ‚Äî get.initial.values.rSPDE","text":"","code":"get.initial.values.rSPDE(   mesh = NULL,   mesh.range = NULL,   graph.obj = NULL,   n.spde = 1,   dim = NULL,   B.tau = NULL,   B.kappa = NULL,   B.sigma = NULL,   B.range = NULL,   nu = NULL,   parameterization = c(\"matern\", \"spde\"),   include.nu = TRUE,   log.scale = TRUE,   nu.upper.bound = NULL )"},{"path":"https://davidbolin.github.io/rSPDE/reference/get.initial.values.rSPDE.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Initial values for log-likelihood optimization in rSPDE models with a latent stationary Gaussian Matern model ‚Äî get.initial.values.rSPDE","text":"mesh INLA mesh mesh.range range mesh. graph.obj metric_graph object. used case mesh mesh.range NULL. n.spde number basis functions mesh model. dim dimension domain. B.tau Matrix specification log-linear model \\(\\tau\\). used parameterization = 'spde'. B.kappa Matrix specification log-linear model \\(\\kappa\\). used parameterization = 'spde'. B.sigma Matrix specification log-linear model \\(\\sigma\\). used parameterization = 'matern'. B.range Matrix specification log-linear model \\(\\rho\\), range-like parameter (exactly range parameter stationary case). used parameterization = 'matern'. nu smoothness parameter. parameterization parameterization use? matern uses range, std. deviation nu (smoothness). spde uses kappa, tau nu (smoothness). default matern. include.nu also provide initial guess nu? log.scale results provided log scale? nu.upper.bound upper bound nu considered?","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/get.initial.values.rSPDE.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Initial values for log-likelihood optimization in rSPDE models with a latent stationary Gaussian Matern model ‚Äî get.initial.values.rSPDE","text":"vector form (theta_1,theta_2,theta_3) theta_1 initial guess tau, theta_2 initial guess kappa theta_3 initial guess nu.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/gg_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame for result objects from R-INLA fitted models to be used in ggplot2 ‚Äî gg_df","title":"Data frame for result objects from R-INLA fitted models to be used in ggplot2 ‚Äî gg_df","text":"Data frame result objects R-INLA fitted models used ggplot2","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/gg_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame for result objects from R-INLA fitted models to be used in ggplot2 ‚Äî gg_df","text":"","code":"gg_df(result, ...)"},{"path":"https://davidbolin.github.io/rSPDE/reference/gg_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data frame for result objects from R-INLA fitted models to be used in ggplot2 ‚Äî gg_df","text":"result result object data frame desired ... arguments passed methods.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/gg_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data frame for result objects from R-INLA fitted models to be used in ggplot2 ‚Äî gg_df","text":"data frame containing posterior densities.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/gg_df.rspde_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Data frame for rspde_result objects to be used in ggplot2 ‚Äî gg_df.rspde_result","title":"Data frame for rspde_result objects to be used in ggplot2 ‚Äî gg_df.rspde_result","text":"Returns ggplot-friendly data-frame marginal posterior densities.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/gg_df.rspde_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data frame for rspde_result objects to be used in ggplot2 ‚Äî gg_df.rspde_result","text":"","code":"# S3 method for class 'rspde_result' gg_df(   result,   parameter = result$params,   transform = TRUE,   restrict_x_axis = NULL,   restrict_quantiles = NULL,   ... )"},{"path":"https://davidbolin.github.io/rSPDE/reference/gg_df.rspde_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data frame for rspde_result objects to be used in ggplot2 ‚Äî gg_df.rspde_result","text":"result rspde_result object. parameter Vector. parameters get posterior density data.frame? options std.dev, range, tau, kappa nu. transform posterior density given original scale? restrict_x_axis Variables restrict range x axis based quantiles. restrict_quantiles Named list quantiles restrict x axis. contain name parameter along vector two elements specifying lower upper quantiles. names match ones result$params. example, want restrict nu 0.05 0.95 quantiles restrict_quantiles = c(0.05, 0.95). ... currently used.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/gg_df.rspde_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data frame for rspde_result objects to be used in ggplot2 ‚Äî gg_df.rspde_result","text":"data frame containing posterior densities.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/glance.rspde_lme.html","id":null,"dir":"Reference","previous_headings":"","what":"Glance at an rspde_lme object ‚Äî glance.rspde_lme","title":"Glance at an rspde_lme object ‚Äî glance.rspde_lme","text":"Glance accepts rspde_lme object returns tidyr::tibble() exactly one row model summaries. summaries square root estimated variance measurement error, residual degrees freedom, AIC, BIC, log-likelihood, type latent model used fit total number observations.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/glance.rspde_lme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Glance at an rspde_lme object ‚Äî glance.rspde_lme","text":"","code":"# S3 method for class 'rspde_lme' glance(x, ...)"},{"path":"https://davidbolin.github.io/rSPDE/reference/glance.rspde_lme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Glance at an rspde_lme object ‚Äî glance.rspde_lme","text":"x rspde_lme object. ... Currently used.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/glance.rspde_lme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Glance at an rspde_lme object ‚Äî glance.rspde_lme","text":"tidyr::tibble() exactly one row columns: nobs Number observations used. sigma square root estimated residual variance logLik log-likelihood model. AIC Akaike's Information Criterion model. BIC Bayesian Information Criterion model. deviance Deviance model. df.residual Residual degrees freedom. model.type Type latent model fitted.","code":""},{"path":[]},{"path":"https://davidbolin.github.io/rSPDE/reference/graph_data_rspde.html","id":null,"dir":"Reference","previous_headings":"","what":"Data extraction from metric graphs for 'rSPDE' models ‚Äî graph_data_rspde","title":"Data extraction from metric graphs for 'rSPDE' models ‚Äî graph_data_rspde","text":"Extracts data metric graphs used 'INLA' 'inlabru'.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/graph_data_rspde.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Data extraction from metric graphs for 'rSPDE' models ‚Äî graph_data_rspde","text":"","code":"graph_data_rspde(   graph_rspde,   name = \"field\",   repl = NULL,   group = NULL,   group_col = NULL,   only_pred = FALSE,   loc = NULL,   loc_name = NULL,   tibble = FALSE,   drop_na = FALSE,   drop_all_na = TRUE )"},{"path":"https://davidbolin.github.io/rSPDE/reference/graph_data_rspde.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Data extraction from metric graphs for 'rSPDE' models ‚Äî graph_data_rspde","text":"graph_rspde inla_metric_graph_spde object built rspde.metric_graph() function. name character string base name effect. repl replicates? replicates, one can set repl NULL. one wants replicates, one sets repl .. group groups? groups, one can set group NULL. one wants groups, one sets group .. group_col \"column\" data contains group variable? only_pred return data.frame prediction data? loc Locations. given, chosen available locations metric graph internal dataset. loc_name Character name location variable used 'inlabru' prediction. tibble data returned tidyr::tibble? drop_na rows least one NA one columns removed? DEFAULT FALSE. option turned FALSE only_pred TRUE. drop_all_na rows variables NA removed? DEFAULT TRUE. option turned FALSE only_pred TRUE.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/graph_data_rspde.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Data extraction from metric graphs for 'rSPDE' models ‚Äî graph_data_rspde","text":"'INLA' 'inlabru' friendly list data.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/group_predict.html","id":null,"dir":"Reference","previous_headings":"","what":"Perform prediction on a testing set based on a training set ‚Äî group_predict","title":"Perform prediction on a testing set based on a training set ‚Äî group_predict","text":"Compute prediction formula-based expression testing set based training set.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/group_predict.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Perform prediction on a testing set based on a training set ‚Äî group_predict","text":"","code":"group_predict(   models,   model_names = NULL,   formula = NULL,   train_indices,   test_indices,   n_samples = 1000,   pseudo_predict = TRUE,   return_samples = FALSE,   return_hyper_samples = FALSE,   n_hyper_samples = 1,   compute_posterior_means = TRUE,   print = TRUE,   fit_verbose = FALSE )"},{"path":"https://davidbolin.github.io/rSPDE/reference/group_predict.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Perform prediction on a testing set based on a training set ‚Äî group_predict","text":"models fitted model obtained calling bru() function list models fitted bru() function. model_names vector containing names models appear returned data.frame. NULL, names form Model 1, Model 2, . default, try obtain name models list. formula formula right hand side defines R expression evaluate generated sample. NULL``, latent hyperparameter states returned named list elements. See manual predictmethod theinlabru` package. train_indices list containing indices observations model trained, numerical vector containing indices. test_indices list containing indices test data, prediction done, numerical vector containing indices. n_samples Number samples compute posterior statistics used compute scores. pseudo_predict TRUE, models refitted training data, parameters obtained entire dataset used. FALSE, models refitted training data. return_samples posterior samples returned? return_hyper_samples samples hyperparameters obtained? n_hyper_samples Number independent samples hyper parameters size n_samples. compute_posterior_means posterior means computed posterior samples? print partial results printed throughout computation? fit_verbose INLA's run prediction verbose?","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/group_predict.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Perform prediction on a testing set based on a training set ‚Äî group_predict","text":"data.frame fitted models corresponding scores.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/intrinsic.matern.operators.html","id":null,"dir":"Reference","previous_headings":"","what":"Covariance-based approximations of intrinsic fields ‚Äî intrinsic.matern.operators","title":"Covariance-based approximations of intrinsic fields ‚Äî intrinsic.matern.operators","text":"intrinsic.matern.operators used computing covariance-based rational SPDE approximation intrinsic fields \\(R^d\\) defined SPDE $$(-\\Delta)^{\\beta/2}(\\kappa^2-\\Delta)^{\\alpha/2} (\\tau u) = \\mathcal{W}$$","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/intrinsic.matern.operators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Covariance-based approximations of intrinsic fields ‚Äî intrinsic.matern.operators","text":"","code":"intrinsic.matern.operators(   kappa,   tau,   alpha,   beta = 1,   G = NULL,   C = NULL,   d = NULL,   mesh = NULL,   graph = NULL,   loc_mesh = NULL,   m_alpha = 2,   m_beta = 2,   compute_higher_order = FALSE,   return_block_list = FALSE,   type_rational_approximation = c(\"chebfun\", \"brasil\", \"chebfunLB\"),   fem_mesh_matrices = NULL,   scaling = NULL )"},{"path":"https://davidbolin.github.io/rSPDE/reference/intrinsic.matern.operators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Covariance-based approximations of intrinsic fields ‚Äî intrinsic.matern.operators","text":"kappa range parameter tau precision parameter alpha Smoothness parameter beta Smoothness parameter G stiffness matrix finite element discretization domain interest. C mass matrix finite element discretization domain interest. d dimension domain. mesh inla mesh. graph optional metric_graph object. Replaces d, C G. loc_mesh locations mesh d=1. m_alpha order rational approximation Mat√©rn part, needs positive integer. default value 2. m_beta order rational approximation intrinsic part, needs positive integer. default value 2. compute_higher_order Logical. higher order finite element matrices computed? return_block_list Logical. type = \"covariance\", block parts precision matrix returned separately list? type_rational_approximation type rational approximation used? current types \"chebfun\", \"brasil\" \"chebfunLB\". fem_mesh_matrices list containing FEM-related matrices. list contain elements c0, g1, g2, g3, etc. scaling second lowest eigenvalue g1","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/intrinsic.matern.operators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Covariance-based approximations of intrinsic fields ‚Äî intrinsic.matern.operators","text":"intrinsic.matern.operators returns object class \"intrinsicCBrSPDEobj\". object list containing following quantities: C mass lumped mass matrix. Ci inverse C. GCi stiffness matrix G times Ci Gk stiffness matrix G along higher-order FEM-related matrices G2, G3, etc. fem_mesh_matrices list containing mass lumped mass matrix, stiffness matrix higher-order FEM-related matrices. m_alpha order rational approximation Mat√©rn part. m_beta order rational approximation intrinsic part. alpha fractional power Mat√©rn part operator. beta fractional power intrinsic part operator. type String indicating type approximation. d dimension domain. Matrix sums components approximation mesh nodes. kappa Range parameter covariance function tau Scale parameter covariance function. type String indicating type approximation.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/intrinsic.matern.operators.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Covariance-based approximations of intrinsic fields ‚Äî intrinsic.matern.operators","text":"covariance operator $$\\tau^{-2}(-\\Delta)^{\\beta}(\\kappa^2-\\Delta)^{\\alpha}$$ approximated based rational approximations two fractional components. Laplacians equipped homogeneous Neumann boundary conditions zero-mean constraint additionally imposed obtained non-intrinsic model.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/intrinsic.matern.operators.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Covariance-based approximations of intrinsic fields ‚Äî intrinsic.matern.operators","text":"","code":"if (requireNamespace(\"RSpectra\", quietly = TRUE)) {   x <- seq(from = 0, to = 10, length.out = 201)   beta <- 1   alpha <- 1   kappa <- 1   op <- intrinsic.matern.operators(     kappa = kappa, tau = 1, alpha = alpha,     beta = beta, loc_mesh = x, d = 1   )   # Compute and plot the variogram of the model   Sigma <- op$A[,-1] %*% solve(op$Q[-1,-1], t(op$A[,-1]))   One <- rep(1, times = ncol(Sigma))   D <- diag(Sigma)   Gamma <- 0.5 * (One %*% t(D) + D %*% t(One) - 2 * Sigma)   k <- 100   plot(x, Gamma[k, ], type = \"l\")   lines(x,     variogram.intrinsic.spde(x[k], x, kappa, alpha, beta, L = 10, d = 1),     col = 2, lty = 2   ) }"},{"path":"https://davidbolin.github.io/rSPDE/reference/matern.covariance.html","id":null,"dir":"Reference","previous_headings":"","what":"The Matern covariance function ‚Äî matern.covariance","title":"The Matern covariance function ‚Äî matern.covariance","text":"matern.covariance evaluates Matern covariance function $$C(h) = \\frac{\\sigma^2}{2^{\\nu-1}\\Gamma(\\nu)}(\\kappa h)^\\nu K_\\nu(\\kappa h).$$","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/matern.covariance.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"The Matern covariance function ‚Äî matern.covariance","text":"","code":"matern.covariance(h, kappa, nu, sigma)"},{"path":"https://davidbolin.github.io/rSPDE/reference/matern.covariance.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"The Matern covariance function ‚Äî matern.covariance","text":"h Distances evaluate covariance function . kappa Range parameter. nu Shape parameter. sigma Standard deviation.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/matern.covariance.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"The Matern covariance function ‚Äî matern.covariance","text":"vector values C(h).","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/matern.covariance.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"The Matern covariance function ‚Äî matern.covariance","text":"","code":"x <- seq(from = 0, to = 1, length.out = 101) plot(x, matern.covariance(abs(x - 0.5), kappa = 10, nu = 1 / 5, sigma = 1),   type = \"l\", ylab = \"C(h)\", xlab = \"h\" )"},{"path":"https://davidbolin.github.io/rSPDE/reference/matern.operators.html","id":null,"dir":"Reference","previous_headings":"","what":"Rational approximations of stationary Gaussian Matern random fields ‚Äî matern.operators","title":"Rational approximations of stationary Gaussian Matern random fields ‚Äî matern.operators","text":"matern.operators used computing rational SPDE approximation stationary Gaussian random fields \\(R^d\\) Matern covariance function $$C(h) = \\frac{\\sigma^2}{2^{\\nu-1}\\Gamma(\\nu)} (\\kappa h)^\\nu K_\\nu(\\kappa h)$$","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/matern.operators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rational approximations of stationary Gaussian Matern random fields ‚Äî matern.operators","text":"","code":"matern.operators(   kappa = NULL,   tau = NULL,   alpha = NULL,   sigma = NULL,   range = NULL,   nu = NULL,   G = NULL,   C = NULL,   d = NULL,   mesh = NULL,   graph = NULL,   range_mesh = NULL,   loc_mesh = NULL,   m = 1,   type = c(\"covariance\", \"operator\"),   parameterization = c(\"spde\", \"matern\"),   compute_higher_order = FALSE,   return_block_list = FALSE,   type_rational_approximation = c(\"chebfun\", \"brasil\", \"chebfunLB\"),   fem_mesh_matrices = NULL,   compute_logdet = FALSE )"},{"path":"https://davidbolin.github.io/rSPDE/reference/matern.operators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rational approximations of stationary Gaussian Matern random fields ‚Äî matern.operators","text":"kappa Parameter kappa SPDE representation. NULL, range parameter used. range also NULL, starting value based mesh supplied. tau Parameter tau SPDE representation. sigma tau NULL, starting value based mesh supplied. alpha Parameter alpha SPDE representation. alpha NULL, starting value supplied. sigma Standard deviation covariance function. Used parameterization matern. NULL, tau used. tau also NULL, starting value based mesh supplied. range Range parameter covariance function. Used parameterization matern. range NULL, starting value based mesh supplied. nu Shape parameter covariance function. Used parameterization matern. NULL, starting value supplied. G stiffness matrix finite element discretization domain interest. need given either mesh graph supplied. C mass matrix finite element discretization domain interest. need given either mesh graph supplied. d dimension domain. need given either mesh graph provided. mesh optional fmesher mesh. Replaces d, C G. graph optional metric_graph object. Replaces d, C G. range_mesh range mesh. used provide starting values parameters. used mesh graph NULL, one parameters (kappa tau spde parameterization, sigma range matern parameterization) provided. loc_mesh mesh locations used construct matrices C G. option provided one wants use rspde_lme() function provide neither graph mesh. works 1d data. work metric graphs. metric graphs supply graph using graph argument. m order rational approximation, needs positive integer. default value 1. type type rational approximation. options \"covariance\" \"operator\". default \"covariance\". parameterization parameterization use? matern uses range, std. deviation nu (smoothness). spde uses kappa, tau alpha. default spde. compute_higher_order Logical. higher order finite element matrices computed? return_block_list Logical. type = \"covariance\", block parts precision matrix returned separately list? type_rational_approximation type rational approximation used? current types \"chebfun\", \"brasil\" \"chebfunLB\". fem_mesh_matrices list containing FEM-related matrices. list contain elements c0, g1, g2, g3, etc. compute_logdet log determinants computed building model? (covariance-based models)","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/matern.operators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rational approximations of stationary Gaussian Matern random fields ‚Äî matern.operators","text":"type \"covariance\", matern.operators returns object class \"CBrSPDEobj\". object list containing following quantities: C mass lumped mass matrix. Ci inverse C. GCi stiffness matrix G times Ci Gk stiffness matrix G along higher-order FEM-related matrices G2, G3, etc. fem_mesh_matrices list containing mass lumped mass matrix, stiffness matrix higher-order FEM-related matrices. m order rational approximation. alpha fractional power precision operator. type String indicating type approximation. d dimension domain. nu Shape parameter covariance function. kappa Range parameter covariance function tau Scale parameter covariance function. sigma Standard deviation covariance function. type String indicating type approximation. type \"operator\", matern.operators returns object class \"rSPDEobj\". object contains quantities listed output fractional.operators(), G matrix, dimension domain, well parameters covariance function.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/matern.operators.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rational approximations of stationary Gaussian Matern random fields ‚Äî matern.operators","text":"type \"covariance\", use covariance-based rational approximation fractional operator. SPDE approach, model \\(u\\) solution following SPDE: $$L^{\\alpha/2}(\\tau u) = \\mathcal{W},$$ \\(L  = -\\Delta +\\kappa^2 \\) \\(\\mathcal{W}\\) standard Gaussian white noise. covariance operator \\(u\\) given \\(L^{-\\alpha}\\). Now, let \\(L_h\\) finite-element approximation \\(L\\). can use rational approximation order \\(m\\) \\(L_h^{-\\alpha}\\) obtain following approximation: $$L_{h,m}^{-\\alpha} = L_h^{-m_\\alpha} p(L_h^{-1})q(L_h^{-1})^{-1},$$ \\(m_\\alpha = \\lfloor \\alpha\\rfloor\\), \\(p\\) \\(q\\) polynomials arising rational approximation. approximation construct approximate precision matrix \\(u\\). type \"operator\", approximation based rational approximation fractional operator \\((\\kappa^2 -\\Delta)^\\beta\\), \\(\\beta = (\\nu + d/2)/2\\). results approximate model form $$P_l u(s) = P_r W,$$ \\(P_j = p_j(L)\\) non-fractional operators defined terms polynomials \\(p_j\\) \\(j=l,r\\). order \\(p_r\\) given m order \\(p_l\\) \\(m + m_\\beta\\) \\(m_\\beta\\) integer part \\(\\beta\\) \\(\\beta>1\\) \\(m_\\beta = 1\\) otherwise. discrete approximation can written \\(u = P_r x\\) \\(x \\sim N(0,Q^{-1})\\) \\(Q = P_l^T C^{-1} P_l\\). Note matrices \\(P_r\\) \\(Q\\) may ill-conditioned \\(m>1\\). case, methods operator.operations() used operations involving matrices, since methods numerically stable.","code":""},{"path":[]},{"path":"https://davidbolin.github.io/rSPDE/reference/matern.operators.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rational approximations of stationary Gaussian Matern random fields ‚Äî matern.operators","text":"","code":"# Compute the covariance-based rational approximation of a # Gaussian process with a Matern covariance function on R kappa <- 10 sigma <- 1 nu <- 0.8 range <- sqrt(8 * nu) / kappa  # create mass and stiffness matrices for a FEM discretization nobs <- 101 x <- seq(from = 0, to = 1, length.out = 101) fem <- rSPDE.fem1d(x)  # compute rational approximation of covariance function at 0.5 op_cov <- matern.operators(   loc_mesh = x, nu = nu,   range = range, sigma = sigma, d = 1, m = 2,   parameterization = \"matern\" )  v <- t(rSPDE.A1d(x, 0.5)) # Compute the precision matrix Q <- op_cov$Q # A matrix here is the identity matrix A <- Diagonal(nobs) # We need to concatenate 3 A's since we are doing a covariance-based rational # approximation of order 2 Abar <- cbind(A, A, A) w <- rbind(v, v, v) # The approximate covariance function: c_cov.approx <- (Abar) %*% solve(Q, w) c.true <- folded.matern.covariance.1d(   rep(0.5, length(x)),   abs(x), kappa, nu, sigma )  # plot the result and compare with the true Matern covariance plot(x, c.true,   type = \"l\", ylab = \"C(h)\",   xlab = \"h\", main = \"Matern covariance and rational approximations\" ) lines(x, c_cov.approx, col = 2)    # Compute the operator-based rational approximation of a Gaussian # process with a Matern covariance function on R kappa <- 10 sigma <- 1 nu <- 0.8 range <- sqrt(8 * nu) / kappa  # create mass and stiffness matrices for a FEM discretization x <- seq(from = 0, to = 1, length.out = 101) fem <- rSPDE.fem1d(x)  # compute rational approximation of covariance function at 0.5 op <- matern.operators(   range = range, sigma = sigma, nu = nu,   loc_mesh = x, d = 1,   type = \"operator\",   parameterization = \"matern\" )  v <- t(rSPDE.A1d(x, 0.5)) c.approx <- Sigma.mult(op, v) c.true <- folded.matern.covariance.1d(   rep(0.5, length(x)),   abs(x), kappa, nu, sigma )  # plot the result and compare with the true Matern covariance plot(x, c.true,   type = \"l\", ylab = \"C(h)\",   xlab = \"h\", main = \"Matern covariance and rational approximation\" ) lines(x, c.approx, col = 2)"},{"path":"https://davidbolin.github.io/rSPDE/reference/matern.rational.cov.html","id":null,"dir":"Reference","previous_headings":"","what":"Rational approximation of the Matern covariance ‚Äî matern.rational.cov","title":"Rational approximation of the Matern covariance ‚Äî matern.rational.cov","text":"Computes rational approximation Matern covariance function intervals.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/matern.rational.cov.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rational approximation of the Matern covariance ‚Äî matern.rational.cov","text":"","code":"matern.rational.cov(   h,   order,   kappa,   nu,   sigma,   type_rational = \"brasil\",   type_interp = \"linear\" )"},{"path":"https://davidbolin.github.io/rSPDE/reference/matern.rational.cov.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rational approximation of the Matern covariance ‚Äî matern.rational.cov","text":"h Distances compute covariance order order approximation kappa Range parameter nu Smoothness parameter sigma Standard deviation type_rational Method used compute coefficients rational approximation. type_interp Interpolation method rational coefficients.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/matern.rational.cov.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rational approximation of the Matern covariance ‚Äî matern.rational.cov","text":"covariance matrix approximation","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/matern.rational.cov.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rational approximation of the Matern covariance ‚Äî matern.rational.cov","text":"","code":"h <- seq(from = 0, to = 1, length.out = 100) cov.true <- matern.covariance(h, kappa = 10, sigma = 1, nu = 0.8) cov.approx <- matern.rational.cov(h, kappa = 10, sigma = 1, nu = 0.8, order = 2)  plot(h, cov.true) lines(h, cov.approx, col = 2)"},{"path":"https://davidbolin.github.io/rSPDE/reference/matern.rational.html","id":null,"dir":"Reference","previous_headings":"","what":"Rational approximation of the Matern fields on intervals and metric graphs ‚Äî matern.rational","title":"Rational approximation of the Matern fields on intervals and metric graphs ‚Äî matern.rational","text":"function used computing approximation, can used inference simulation, fractional SPDE $$(\\kappa^2 - \\Delta)^{\\alpha/2} (\\tau u(s)) = W$$ intervals metric graphs. \\(W\\) Gaussian white noise, \\(\\kappa\\) controls range, \\(\\alpha = \\nu + 1/2\\) \\(\\nu>0\\) controls smoothness \\(\\tau\\) related marginal variances $$\\sigma^2 = \\frac{\\Gamma(\\nu)}{\\tau^2\\Gamma(\\alpha)2\\sqrt{\\pi}\\kappa^{2\\nu}}.$$","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/matern.rational.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rational approximation of the Matern fields on intervals and metric graphs ‚Äî matern.rational","text":"","code":"matern.rational(   graph = NULL,   loc = NULL,   bc = c(\"free\", \"Neumann\", \"Dirichlet\"),   kappa = NULL,   range = NULL,   nu = NULL,   sigma = NULL,   tau = NULL,   alpha = NULL,   m = 2,   parameterization = c(\"matern\", \"spde\"),   type_rational_approximation = \"brasil\",   type_interp = \"spline\" )"},{"path":"https://davidbolin.github.io/rSPDE/reference/matern.rational.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rational approximation of the Matern fields on intervals and metric graphs ‚Äî matern.rational","text":"graph Metric graph object. default NULL, means stationary Matern model line created. loc Locations evaluate model. bc Specifies boundary conditions. default \"free\" gives stationary Matern models intervals. options \"Neumann\" \"Dirichlet\". kappa Range parameter range practical correlation range nu Smoothness parameter sigma Standard deviation tau Precision parameter alpha Smoothness parameter m order approximation parameterization parameterization use? matern uses range, std. deviation nu (smoothness). spde uses kappa, tau alpha. default matern. type_rational_approximation Method used compute coefficients rational approximation. type_interp Interpolation method rational coefficients.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/matern.rational.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rational approximation of the Matern fields on intervals and metric graphs ‚Äî matern.rational","text":"model object approximation","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/matern.rational.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rational approximation of the Matern fields on intervals and metric graphs ‚Äî matern.rational","text":"","code":"s <- seq(from = 0, to = 1, length.out = 101) kappa <- 20 sigma <- 2 nu <- 0.8 r <- sqrt(8*nu)/kappa #range parameter op_cov <- matern.rational(loc = s, nu = nu, range = r, sigma = sigma, m = 2,  parameterization = \"matern\") cov.true <- matern.covariance(abs(s-s[1]), kappa = kappa, sigma = sigma, nu = nu) cov.approx <- op_cov$covariance(ind = 1)  plot(s, cov.true) lines(s, cov.approx, col = 2)"},{"path":"https://davidbolin.github.io/rSPDE/reference/operator.operations.html","id":null,"dir":"Reference","previous_headings":"","what":"Operations with the Pr and Pl operators ‚Äî operator.operations","title":"Operations with the Pr and Pl operators ‚Äî operator.operations","text":"Functions multiplying solving \\(P_r\\) \\(P_l\\) operators well latent precision matrix \\(Q = P_l C^{-1}P_l\\) covariance matrix \\(\\Sigma = P_r Q^{-1} P_r^T\\). operations done without first assembling \\(P_r\\), \\(P_l\\) order avoid numerical problems caused ill-conditioned matrices.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/operator.operations.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Operations with the Pr and Pl operators ‚Äî operator.operations","text":"","code":"Pr.mult(obj, v, transpose = FALSE)  Pr.solve(obj, v, transpose = FALSE)  Pl.mult(obj, v, transpose = FALSE)  Pl.solve(obj, v, transpose = FALSE)  Q.mult(obj, v)  Q.solve(obj, v)  Qsqrt.mult(obj, v, transpose = FALSE)  Qsqrt.solve(obj, v, transpose = FALSE)  Sigma.mult(obj, v)  Sigma.solve(obj, v)"},{"path":"https://davidbolin.github.io/rSPDE/reference/operator.operations.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Operations with the Pr and Pl operators ‚Äî operator.operations","text":"obj rSPDE object v vector apply operation transpose set TRUE operation performed transposed object","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/operator.operations.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Operations with the Pr and Pl operators ‚Äî operator.operations","text":"vector values operation","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/operator.operations.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Operations with the Pr and Pl operators ‚Äî operator.operations","text":"Pl.mult, Pr.mult, Q.mult multiplies vector respective object. Changing mult solve function names multiplies vector inverse object. Qsqrt.mult Qsqrt.solve performs operations square-root type object \\(Q_r = C^{-1/2}P_l\\) defined \\(Q = Q_r^T Q_r\\).","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/precision.CBrSPDEobj.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the precision matrix of CBrSPDEobj objects ‚Äî precision","title":"Get the precision matrix of CBrSPDEobj objects ‚Äî precision","text":"Function get precision matrix CBrSPDEobj object","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/precision.CBrSPDEobj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the precision matrix of CBrSPDEobj objects ‚Äî precision","text":"","code":"precision(object, ...)  # S3 method for class 'CBrSPDEobj' precision(   object,   user_nu = NULL,   user_kappa = NULL,   user_sigma = NULL,   user_range = NULL,   user_tau = NULL,   user_m = NULL,   ... )"},{"path":"https://davidbolin.github.io/rSPDE/reference/precision.CBrSPDEobj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the precision matrix of CBrSPDEobj objects ‚Äî precision","text":"object covariance-based rational SPDE approximation, computed using matern.operators() ... Currently used. user_nu non-null, update shape parameter covariance function. user_kappa non-null, update range parameter covariance function. user_sigma non-null, update standard deviation covariance function. user_range non-null, update range parameter covariance function. user_tau non-null, update parameter tau. user_m non-null, update order rational approximation, needs positive integer.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/precision.CBrSPDEobj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the precision matrix of CBrSPDEobj objects ‚Äî precision","text":"precision matrix.","code":""},{"path":[]},{"path":"https://davidbolin.github.io/rSPDE/reference/precision.CBrSPDEobj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the precision matrix of CBrSPDEobj objects ‚Äî precision","text":"","code":"# Compute the covariance-based rational approximation of a # Gaussian process with a Matern covariance function on R kappa <- 10 sigma <- 1 nu <- 0.8 range <- 0.2  # create mass and stiffness matrices for a FEM discretization x <- seq(from = 0, to = 1, length.out = 101) fem <- rSPDE.fem1d(x)  # compute rational approximation of covariance function at 0.5 tau <- sqrt(gamma(nu) / (sigma^2 * kappa^(2 * nu) *   (4 * pi)^(1 / 2) * gamma(nu + 1 / 2))) op_cov <- matern.operators(   loc_mesh = x, nu = nu,   range = range, sigma = sigma, d = 1, m = 2,   parameterization = \"matern\" )  # Get the precision matrix: prec_matrix <- precision(op_cov)"},{"path":"https://davidbolin.github.io/rSPDE/reference/precision.inla_rspde.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the precision matrix of inla_rspde objects ‚Äî precision.inla_rspde","title":"Get the precision matrix of inla_rspde objects ‚Äî precision.inla_rspde","text":"Function get precision matrix inla_rspde object created rspde.matern() function.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/precision.inla_rspde.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the precision matrix of inla_rspde objects ‚Äî precision.inla_rspde","text":"","code":"# S3 method for class 'inla_rspde' precision(object, theta = NULL, ...)"},{"path":"https://davidbolin.github.io/rSPDE/reference/precision.inla_rspde.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the precision matrix of inla_rspde objects ‚Äî precision.inla_rspde","text":"object inla_rspde object obtained rspde.matern() function. theta null, starting values theta used. Otherwise, must suplied vector. stationary models, theta = c(log(tau), log(kappa), nu). nonstationary models, theta = c(theta_1, theta_2, ..., theta_n, nu). ... Currently used.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/precision.inla_rspde.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the precision matrix of inla_rspde objects ‚Äî precision.inla_rspde","text":"precision matrix.","code":""},{"path":[]},{"path":"https://davidbolin.github.io/rSPDE/reference/precision.rSPDEobj1d.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the precision matrix of rSPDEobj1d objects ‚Äî precision.rSPDEobj1d","title":"Get the precision matrix of rSPDEobj1d objects ‚Äî precision.rSPDEobj1d","text":"Function get precision matrix rSPDEobj1d object","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/precision.rSPDEobj1d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the precision matrix of rSPDEobj1d objects ‚Äî precision.rSPDEobj1d","text":"","code":"# S3 method for class 'rSPDEobj1d' precision(   object,   user_loc = NULL,   user_nu = NULL,   user_kappa = NULL,   user_sigma = NULL,   user_range = NULL,   user_tau = NULL,   user_m = NULL,   ordering = c(\"field\", \"location\"),   ldl = FALSE,   ... )"},{"path":"https://davidbolin.github.io/rSPDE/reference/precision.rSPDEobj1d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the precision matrix of rSPDEobj1d objects ‚Äî precision.rSPDEobj1d","text":"object covariance-based rational SPDE approximation, computed using matern.rational() user_loc non-null, update locations evaluate model. user_nu non-null, update shape parameter covariance function. user_kappa non-null, update range parameter covariance function. user_sigma non-null, update standard deviation covariance function. user_range non-null, update range parameter covariance function. user_tau non-null, update parameter tau. user_m non-null, update order rational approximation, needs positive integer. ordering Return matrices ordered field location? ldl Directly build LDL factorization precision matrix? ... Currently used.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/precision.rSPDEobj1d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the precision matrix of rSPDEobj1d objects ‚Äî precision.rSPDEobj1d","text":"list containing precision matrix Q process derivatives exist, matrix extracts elements corresponding process. ldl=TRUE, LDL factorization returned instead Q. locations ordered, precision matrix given ordered locations, matrix returns original order.","code":""},{"path":[]},{"path":"https://davidbolin.github.io/rSPDE/reference/precision.rSPDEobj1d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Get the precision matrix of rSPDEobj1d objects ‚Äî precision.rSPDEobj1d","text":"","code":"# Compute the covariance-based rational approximation of a # Gaussian process with a Matern covariance function on R sigma <- 1 nu <- 0.8 range <- 0.2  # create mass and stiffness matrices for a FEM discretization x <- seq(from = 0, to = 1, length.out = 101)  op_cov <- matern.rational(   loc = x, nu = nu,   range = range, sigma = sigma, m = 2,   parameterization = \"matern\" )  # Get the precision matrix: prec_matrix <- precision(op_cov)"},{"path":"https://davidbolin.github.io/rSPDE/reference/predict.CBrSPDEobj.html","id":null,"dir":"Reference","previous_headings":"","what":"Prediction of a fractional SPDE using the covariance-based rational SPDE approximation ‚Äî predict.CBrSPDEobj","title":"Prediction of a fractional SPDE using the covariance-based rational SPDE approximation ‚Äî predict.CBrSPDEobj","text":"function used computing kriging predictions based data \\(Y_i = u(s_i) + \\epsilon_i\\), \\(\\epsilon\\) mean-zero Gaussian measurement noise \\(u(s)\\) defined fractional SPDE \\((\\kappa^2 - \\Delta)^{\\alpha/2} (\\tau u(s)) = W\\), \\(W\\) Gaussian white noise \\(\\alpha = \\nu + d/2\\), \\(d\\) dimension domain.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/predict.CBrSPDEobj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prediction of a fractional SPDE using the covariance-based rational SPDE approximation ‚Äî predict.CBrSPDEobj","text":"","code":"# S3 method for class 'CBrSPDEobj' predict(   object,   A,   Aprd,   Y,   sigma.e,   mu = 0,   compute.variances = FALSE,   posterior_samples = FALSE,   n_samples = 100,   only_latent = FALSE,   ... )"},{"path":"https://davidbolin.github.io/rSPDE/reference/predict.CBrSPDEobj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prediction of a fractional SPDE using the covariance-based rational SPDE approximation ‚Äî predict.CBrSPDEobj","text":"object covariance-based rational SPDE approximation, computed using matern.operators() matrix linking measurement locations basis FEM approximation latent model. Aprd matrix linking prediction locations basis FEM approximation latent model. Y vector observed data, can also matrix columns observations independent replicates \\(u\\). sigma.e standard deviation Gaussian measurement noise. Put zero model measurement noise. mu Expectation vector latent field (default = 0). compute.variances Set also TRUE compute kriging variances. posterior_samples TRUE, posterior samples returned. n_samples Number samples returned. used sampling TRUE. only_latent posterior samples given laten model? ... arguments passed methods.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/predict.CBrSPDEobj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prediction of a fractional SPDE using the covariance-based rational SPDE approximation ‚Äî predict.CBrSPDEobj","text":"list elements mean kriging predictor (posterior mean u|Y). variance posterior variances (computed).","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/predict.CBrSPDEobj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prediction of a fractional SPDE using the covariance-based rational SPDE approximation ‚Äî predict.CBrSPDEobj","text":"","code":"set.seed(123) # Sample a Gaussian Matern process on R using a rational approximation kappa <- 10 sigma <- 1 nu <- 0.8 sigma.e <- 0.3 range <- 0.2  # create mass and stiffness matrices for a FEM discretization x <- seq(from = 0, to = 1, length.out = 101) fem <- rSPDE.fem1d(x)  tau <- sqrt(gamma(nu) / (sigma^2 * kappa^(2 * nu) *   (4 * pi)^(1 / 2) * gamma(nu + 1 / 2)))  # Compute the covariance-based rational approximation op_cov <- matern.operators(   loc_mesh = x, nu = nu,   range = range, sigma = sigma, d = 1, m = 2,   parameterization = \"matern\" )  # Sample the model u <- simulate(op_cov)  # Create some data obs.loc <- runif(n = 10, min = 0, max = 1) A <- rSPDE.A1d(x, obs.loc) Y <- as.vector(A %*% u + sigma.e * rnorm(10))  # compute kriging predictions at the FEM grid A.krig <- rSPDE.A1d(x, x) u.krig <- predict(op_cov,   A = A, Aprd = A.krig, Y = Y, sigma.e = sigma.e,   compute.variances = TRUE )  plot(obs.loc, Y,   ylab = \"u(x)\", xlab = \"x\", main = \"Data and prediction\",   ylim = c(     min(u.krig$mean - 2 * sqrt(u.krig$variance)),     max(u.krig$mean + 2 * sqrt(u.krig$variance))   ) ) lines(x, u.krig$mean) lines(x, u.krig$mean + 2 * sqrt(u.krig$variance), col = 2) lines(x, u.krig$mean - 2 * sqrt(u.krig$variance), col = 2)"},{"path":"https://davidbolin.github.io/rSPDE/reference/predict.rSPDEobj.html","id":null,"dir":"Reference","previous_headings":"","what":"Prediction of a fractional SPDE using a rational SPDE approximation ‚Äî predict.rSPDEobj","title":"Prediction of a fractional SPDE using a rational SPDE approximation ‚Äî predict.rSPDEobj","text":"function used computing kriging predictions based data \\(Y_i = u(s_i) + \\epsilon_i\\), \\(\\epsilon\\) mean-zero Gaussian measurement noise \\(u(s)\\) defined fractional SPDE \\(L^\\beta u(s) = W\\), \\(W\\) Gaussian white noise.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/predict.rSPDEobj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prediction of a fractional SPDE using a rational SPDE approximation ‚Äî predict.rSPDEobj","text":"","code":"# S3 method for class 'rSPDEobj' predict(   object,   A,   Aprd,   Y,   sigma.e,   compute.variances = FALSE,   posterior_samples = FALSE,   n_samples = 100,   only_latent = FALSE,   ... )"},{"path":"https://davidbolin.github.io/rSPDE/reference/predict.rSPDEobj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prediction of a fractional SPDE using a rational SPDE approximation ‚Äî predict.rSPDEobj","text":"object rational SPDE approximation, computed using fractional.operators(), matern.operators(), spde.matern.operators(). matrix linking measurement locations basis FEM approximation latent model. Aprd matrix linking prediction locations basis FEM approximation latent model. Y vector observed data, can also matrix columns observations independent replicates \\(u\\). sigma.e standard deviation Gaussian measurement noise. Put zero model measurement noise. compute.variances Set also TRUE compute kriging variances. posterior_samples TRUE, posterior samples returned. n_samples Number samples returned. used sampling TRUE. only_latent posterior samples given latent model? ... arguments passed methods.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/predict.rSPDEobj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prediction of a fractional SPDE using a rational SPDE approximation ‚Äî predict.rSPDEobj","text":"list elements mean kriging predictor (posterior mean u|Y). variance posterior variances (computed). samples matrix containing samples sampling TRUE.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/predict.rSPDEobj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Prediction of a fractional SPDE using a rational SPDE approximation ‚Äî predict.rSPDEobj","text":"","code":"# Sample a Gaussian Matern process on R using a rational approximation kappa <- 10 sigma <- 1 nu <- 0.8 sigma.e <- 0.3 range <- sqrt(8 * nu) / kappa  # create mass and stiffness matrices for a FEM discretization x <- seq(from = 0, to = 1, length.out = 101) fem <- rSPDE.fem1d(x)  # compute rational approximation op <- matern.operators(   range = range, sigma = sigma,   nu = nu, loc_mesh = x, d = 1,   parameterization = \"matern\" )  # Sample the model u <- simulate(op)  # Create some data obs.loc <- runif(n = 10, min = 0, max = 1) A <- rSPDE.A1d(x, obs.loc) Y <- as.vector(A %*% u + sigma.e * rnorm(10))  # compute kriging predictions at the FEM grid A.krig <- rSPDE.A1d(x, x) u.krig <- predict(op,   A = A, Aprd = A.krig, Y = Y, sigma.e = sigma.e,   compute.variances = TRUE )  plot(obs.loc, Y,   ylab = \"u(x)\", xlab = \"x\", main = \"Data and prediction\",   ylim = c(     min(u.krig$mean - 2 * sqrt(u.krig$variance)),     max(u.krig$mean + 2 * sqrt(u.krig$variance))   ) ) lines(x, u.krig$mean) lines(x, u.krig$mean + 2 * sqrt(u.krig$variance), col = 2) lines(x, u.krig$mean - 2 * sqrt(u.krig$variance), col = 2)"},{"path":"https://davidbolin.github.io/rSPDE/reference/predict.rspde_lme.html","id":null,"dir":"Reference","previous_headings":"","what":"Prediction of a mixed effects regression model on a metric graph. ‚Äî predict.rspde_lme","title":"Prediction of a mixed effects regression model on a metric graph. ‚Äî predict.rspde_lme","text":"Prediction mixed effects regression model metric graph.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/predict.rspde_lme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Prediction of a mixed effects regression model on a metric graph. ‚Äî predict.rspde_lme","text":"","code":"# S3 method for class 'rspde_lme' predict(   object,   newdata = NULL,   loc = NULL,   mesh = FALSE,   which_repl = NULL,   compute_variances = FALSE,   posterior_samples = FALSE,   n_samples = 100,   sample_latent = FALSE,   return_as_list = FALSE,   return_original_order = TRUE,   ...,   data = deprecated() )"},{"path":"https://davidbolin.github.io/rSPDE/reference/predict.rspde_lme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Prediction of a mixed effects regression model on a metric graph. ‚Äî predict.rspde_lme","text":"object fitted object rspde_lme() function newdata data.frame list containing covariates, edge number distance edge locations obtain prediction. loc Prediction locations. Can either data.frame, matrix character vector, contains names columns coordinates locations. models using metric_graph objects, plase use edge_number distance_on_edge instead. mesh Obtain predictions mesh nodes? graph must mesh, either only_latent set TRUE model covariates. which_repl replicates use? NULL replicates used. compute_variances Set also TRUE compute kriging variances. posterior_samples TRUE, posterior samples returned. n_samples Number samples returned. used sampling TRUE. sample_latent posterior samples random effects? return_as_list means predictions posterior samples returned list, replicate element? return_original_order results return original (input) order order inside graph? ... Additional arguments. Expert use . data Use newdata instead.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/predict.rspde_lme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Prediction of a mixed effects regression model on a metric graph. ‚Äî predict.rspde_lme","text":"list elements mean, contains means predictions, fe_mean, prediction fixed effects, re_mean, prediction random effects, variance (compute_variance TRUE), contains variances predictions, samples (posterior_samples TRUE), contains posterior samples.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rSPDE-package.html","id":null,"dir":"Reference","previous_headings":"","what":"Rational approximations of fractional SPDEs. ‚Äî rSPDE-package","title":"Rational approximations of fractional SPDEs. ‚Äî rSPDE-package","text":"rSPDE used approximating fractional elliptic SPDEs $$L^\\beta (\\tau u(s)) = W,$$ \\(L\\) differential operator \\(\\beta>0\\) general fractional power.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rSPDE-package.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rational approximations of fractional SPDEs. ‚Äî rSPDE-package","text":"approximation based rational approximation fractional operator, allows computationally efficient inference simulation. main functions computing rational approximation objects : fractional.operators() works general rational operators matern.operators() works random fields stationary Matern covariance functions spde.matern.operators() works random fields defined solutions possibly non-stationary Matern-type SPDE model. rspde.matern() R-INLA implementation covariance-based rational approximation random fields stationary Matern covariance functions Basic statistical operations likelihood evaluations (see [rSPDE.loglike], [rSPDE.matern.loglike]) kriging predictions (see [predict.rSPDEobj], [predict.CBrSPDEobj]) using rational approximations also implemented. illustration purposes, package contains simple FEM implementation models R. spatial models, FEM implementation R-INLA package recommended. detailed introduction package, see rSPDE Vignettes.","code":""},{"path":[]},{"path":"https://davidbolin.github.io/rSPDE/reference/rSPDE-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Rational approximations of fractional SPDEs. ‚Äî rSPDE-package","text":"Maintainer: David Bolin davidbolin@gmail.com Authors: Alexandre Simas alexandre.impa@gmail.com contributors: Finn Lindgren finn.lindgren@ed.ac.uk [contributor]","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rSPDE.A1d.html","id":null,"dir":"Reference","previous_headings":"","what":"Observation matrix for finite element discretization on R ‚Äî rSPDE.A1d","title":"Observation matrix for finite element discretization on R ‚Äî rSPDE.A1d","text":"finite element discretization R can written \\(u(s) = \\sum_i^n u_i \\varphi_i(s)\\) \\(\\varphi_i(s)\\) piecewise linear \"hat function\" centered location \\(x_i\\). function computes \\(m\\times n\\) matrix \\(\\) links basis function expansion specified locations \\(s = (s_1,\\ldots, s_m)\\) domain \\(A_ij = \\varphi_j(s_i)\\).","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rSPDE.A1d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Observation matrix for finite element discretization on R ‚Äî rSPDE.A1d","text":"","code":"rSPDE.A1d(x, loc)"},{"path":"https://davidbolin.github.io/rSPDE/reference/rSPDE.A1d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Observation matrix for finite element discretization on R ‚Äî rSPDE.A1d","text":"x locations nodes FEM discretization. loc locations \\((s_1,\\ldots, s_m)\\)","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rSPDE.A1d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Observation matrix for finite element discretization on R ‚Äî rSPDE.A1d","text":"sparse matrix .","code":""},{"path":[]},{"path":"https://davidbolin.github.io/rSPDE/reference/rSPDE.A1d.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Observation matrix for finite element discretization on R ‚Äî rSPDE.A1d","text":"David Bolin davidbolin@gmail.com","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rSPDE.A1d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Observation matrix for finite element discretization on R ‚Äî rSPDE.A1d","text":"","code":"# create mass and stiffness matrices for a FEM discretization on [0,1] x <- seq(from = 0, to = 1, length.out = 101) fem <- rSPDE.fem1d(x)  # create the observation matrix for some locations in the domain obs.loc <- runif(n = 10, min = 0, max = 1) A <- rSPDE.A1d(x, obs.loc)"},{"path":"https://davidbolin.github.io/rSPDE/reference/rSPDE.construct.matern.loglike.html","id":null,"dir":"Reference","previous_headings":"","what":"Constructor of Matern loglikelihood functions. ‚Äî rSPDE.construct.matern.loglike","title":"Constructor of Matern loglikelihood functions. ‚Äî rSPDE.construct.matern.loglike","text":"function returns log-likelihood function Gaussian process Matern covariance function, observed Gaussian measurement noise: \\(Y_i = u(s_i) + \\epsilon_i\\), \\(\\epsilon_i\\) iid mean-zero Gaussian variables. latent model approximated using rational approximation fractional SPDE model corresponding Gaussian process.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rSPDE.construct.matern.loglike.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Constructor of Matern loglikelihood functions. ‚Äî rSPDE.construct.matern.loglike","text":"","code":"rSPDE.construct.matern.loglike(   object,   Y,   A,   sigma.e = NULL,   mu = 0,   user_nu = NULL,   user_tau = NULL,   user_kappa = NULL,   user_sigma = NULL,   user_range = NULL,   parameterization = c(\"spde\", \"matern\"),   user_m = NULL,   log_scale = TRUE,   return_negative_likelihood = TRUE )"},{"path":"https://davidbolin.github.io/rSPDE/reference/rSPDE.construct.matern.loglike.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Constructor of Matern loglikelihood functions. ‚Äî rSPDE.construct.matern.loglike","text":"object rational SPDE approximation, computed using matern.operators() Y observations, either vector matrix columns correspond independent replicates observations. observation matrix links measurement location finite element basis. sigma.e non-null, standard deviation measurement noise kept fixed returned likelihood. mu Expectation vector latent field (default = 0). user_nu non-null, shape parameter kept fixed returned likelihood. user_tau non-null, tau parameter kept fixed returned likelihood. (Replaces sigma) user_kappa non-null, range parameter kept fixed returned likelihood. user_sigma non-null, standard deviation kept fixed returned likelihood. user_range non-null, range parameter kept fixed returned likelihood. (Replaces kappa) parameterization spde, one use parameters tau kappa. matern, one use parameters sigma range. user_m non-null, update order rational approximation, needs positive integer. log_scale parameters evaluated log-scale? return_negative_likelihood Return minus likelihood turn maximization minimization?","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rSPDE.construct.matern.loglike.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Constructor of Matern loglikelihood functions. ‚Äî rSPDE.construct.matern.loglike","text":"log-likelihood function. parameters returned function given order sigma, kappa, nu, sigma.e, whenever available.","code":""},{"path":[]},{"path":"https://davidbolin.github.io/rSPDE/reference/rSPDE.construct.matern.loglike.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Constructor of Matern loglikelihood functions. ‚Äî rSPDE.construct.matern.loglike","text":"","code":"# this example illustrates how the function can be used for maximum # likelihood estimation  set.seed(123) # Sample a Gaussian Matern process on R using a rational approximation nu <- 0.8 sigma <- 1 sigma.e <- 0.1 n.rep <- 10 n.obs <- 200 n.x <- 51 range <- 0.2 # create mass and stiffness matrices for a FEM discretization x <- seq(from = 0, to = 1, length.out = n.x) # Compute the covariance-based rational approximation op_cov <- matern.operators(   loc_mesh = x, nu = nu,   range = range, sigma = sigma, d = 1, m = 2,   parameterization = \"matern\" ) # Sample the model u <- simulate(op_cov, n.rep) # Create some data obs.loc <- runif(n = n.obs, min = 0, max = 1) A <- rSPDE.A1d(x, obs.loc) noise <- rnorm(n.obs * n.rep) dim(noise) <- c(n.obs, n.rep) Y <- as.matrix(A %*% u + sigma.e * noise) # \\donttest{ # Define the negative likelihood function for optimization # using CBrSPDE.matern.loglike # Matern parameterization loglike <- rSPDE.construct.matern.loglike(op_cov, Y, A, parameterization = \"matern\")  # The parameters can now be estimated by minimizing mlik with optim  # Choose some reasonable starting values depending on the size of the domain theta0 <- c(   get.initial.values.rSPDE(mesh.range = 1, dim = 1),   log(0.1 * sd(as.vector(Y))) ) # run estimation and display the results theta <- optim(theta0, loglike,   method = \"L-BFGS-B\" ) print(data.frame(   sigma = c(sigma, exp(theta$par[1])), range = c(range, exp(theta$par[2])),   nu = c(nu, exp(theta$par[3])), sigma.e = c(sigma.e, exp(theta$par[4])),   row.names = c(\"Truth\", \"Estimates\") )) #>               sigma     range        nu  sigma.e #> Truth     1.0000000 0.2000000 0.8000000 0.100000 #> Estimates 0.9974914 0.1800131 0.9778594 0.100258 # }"},{"path":"https://davidbolin.github.io/rSPDE/reference/rSPDE.fem1d.html","id":null,"dir":"Reference","previous_headings":"","what":"Finite element calculations for problems on R ‚Äî rSPDE.fem1d","title":"Finite element calculations for problems on R ‚Äî rSPDE.fem1d","text":"function computes mass stiffness matrices FEM approximation R, assuming Neumann boundary conditions. matrices needed discretizing operators rational approximations.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rSPDE.fem1d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finite element calculations for problems on R ‚Äî rSPDE.fem1d","text":"","code":"rSPDE.fem1d(x)"},{"path":"https://davidbolin.github.io/rSPDE/reference/rSPDE.fem1d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finite element calculations for problems on R ‚Äî rSPDE.fem1d","text":"x Locations nodes FEM approximation.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rSPDE.fem1d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finite element calculations for problems on R ‚Äî rSPDE.fem1d","text":"function returns list following elements G stiffness matrix. C mass matrix.","code":""},{"path":[]},{"path":"https://davidbolin.github.io/rSPDE/reference/rSPDE.fem1d.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Finite element calculations for problems on R ‚Äî rSPDE.fem1d","text":"David Bolin davidbolin@gmail.com","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rSPDE.fem1d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Finite element calculations for problems on R ‚Äî rSPDE.fem1d","text":"","code":"# create mass and stiffness matrices for a FEM discretization on [0,1] x <- seq(from = 0, to = 1, length.out = 101) fem <- rSPDE.fem1d(x)"},{"path":"https://davidbolin.github.io/rSPDE/reference/rSPDE.fem2d.html","id":null,"dir":"Reference","previous_headings":"","what":"Finite element calculations for problems in 2D ‚Äî rSPDE.fem2d","title":"Finite element calculations for problems in 2D ‚Äî rSPDE.fem2d","text":"function computes mass stiffness matrices mesh 2D, assuming Neumann boundary conditions.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rSPDE.fem2d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Finite element calculations for problems in 2D ‚Äî rSPDE.fem2d","text":"","code":"rSPDE.fem2d(FV, P)"},{"path":"https://davidbolin.github.io/rSPDE/reference/rSPDE.fem2d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Finite element calculations for problems in 2D ‚Äî rSPDE.fem2d","text":"FV Matrix row defines triangle P Locations nodes mesh.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rSPDE.fem2d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Finite element calculations for problems in 2D ‚Äî rSPDE.fem2d","text":"function returns list following elements G stiffness matrix elements \\((\\nabla \\phi_i, \\nabla \\phi_j)\\). C mass matrix elements \\((\\phi_i, \\phi_j)\\). Cd mass lumped matrix diagonal elements \\((\\phi_i, 1)\\). Hxx Matrix elements \\((\\partial_x \\phi_i, \\partial_x \\phi_j)\\). Hyy Matrix elements \\((\\partial_y \\phi_i, \\partial_y \\phi_j)\\). Hxy Matrix elements \\((\\partial_x \\phi_i, \\partial_y \\phi_j)\\). Hyx Matrix elements \\((\\partial_y \\phi_i, \\partial_x \\phi_j)\\).","code":""},{"path":[]},{"path":"https://davidbolin.github.io/rSPDE/reference/rSPDE.fem2d.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"Finite element calculations for problems in 2D ‚Äî rSPDE.fem2d","text":"David Bolin davidbolin@gmail.com","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rSPDE.fem2d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Finite element calculations for problems in 2D ‚Äî rSPDE.fem2d","text":"","code":"P <- rbind(c(0, 0), c(1, 0), c(1, 1), c(0, 1)) FV <- rbind(c(1, 2, 3), c(2, 3, 4)) fem <- rSPDE.fem2d(FV, P)"},{"path":"https://davidbolin.github.io/rSPDE/reference/rSPDE.loglike.html","id":null,"dir":"Reference","previous_headings":"","what":"Object-based log-likelihood function for latent Gaussian fractional SPDE model ‚Äî rSPDE.loglike","title":"Object-based log-likelihood function for latent Gaussian fractional SPDE model ‚Äî rSPDE.loglike","text":"function evaluates log-likelihood function fractional SPDE model \\(L^\\beta u(s) = W\\) observed Gaussian measurement noise: \\(Y_i = u(s_i) + \\epsilon_i\\), \\(\\epsilon_i\\) iid mean-zero Gaussian variables \\(x(s) = \\mu(s) + u(s)\\), \\(\\mu(s)\\) expectation vector latent field.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rSPDE.loglike.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Object-based log-likelihood function for latent Gaussian fractional SPDE model ‚Äî rSPDE.loglike","text":"","code":"rSPDE.loglike(obj, Y, A, sigma.e, mu = 0)"},{"path":"https://davidbolin.github.io/rSPDE/reference/rSPDE.loglike.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Object-based log-likelihood function for latent Gaussian fractional SPDE model ‚Äî rSPDE.loglike","text":"obj rational SPDE approximation, computed using fractional.operators(), matern.operators(), spde.matern.operators(). Y observations, either vector matrix columns correspond independent replicates observations. observation matrix links measurement location finite element basis. sigma.e standard deviation measurement noise. mu Expectation vector latent field (default = 0).","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rSPDE.loglike.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Object-based log-likelihood function for latent Gaussian fractional SPDE model ‚Äî rSPDE.loglike","text":"log-likelihood value.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rSPDE.loglike.html","id":"note","dir":"Reference","previous_headings":"","what":"Note","title":"Object-based log-likelihood function for latent Gaussian fractional SPDE model ‚Äî rSPDE.loglike","text":"example shows function can used evaluate likelihood latent Matern model.","code":""},{"path":[]},{"path":"https://davidbolin.github.io/rSPDE/reference/rSPDE.loglike.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Object-based log-likelihood function for latent Gaussian fractional SPDE model ‚Äî rSPDE.loglike","text":"","code":"# Sample a Gaussian Matern process on R using a rational approximation kappa <- 10 sigma <- 1 nu <- 0.8 sigma.e <- 0.3 range <- 0.2  # create mass and stiffness matrices for a FEM discretization x <- seq(from = 0, to = 1, length.out = 101) fem <- rSPDE.fem1d(x)  # compute rational approximation op <- matern.operators(   range = range, sigma = sigma, nu = nu,   loc_mesh = x, d = 1,   type = \"operator\", parameterization = \"matern\" )  # Sample the model u <- simulate(op)  # Create some data obs.loc <- runif(n = 10, min = 0, max = 1) A <- rSPDE.A1d(x, obs.loc) Y <- as.vector(A %*% u + sigma.e * rnorm(10))  # compute log-likelihood of the data lik1 <- rSPDE.loglike(op, Y, A, sigma.e) cat(lik1) #> -9.336895"},{"path":"https://davidbolin.github.io/rSPDE/reference/rSPDE.matern.loglike.html","id":null,"dir":"Reference","previous_headings":"","what":"Object-based log-likelihood function for latent Gaussian fractional SPDE model using the rational approximations ‚Äî rSPDE.matern.loglike","title":"Object-based log-likelihood function for latent Gaussian fractional SPDE model using the rational approximations ‚Äî rSPDE.matern.loglike","text":"function evaluates log-likelihood function Gaussian process Matern covariance function, observed Gaussian measurement noise: \\(Y_i = u(s_i) + \\epsilon_i\\), \\(\\epsilon_i\\) iid mean-zero Gaussian variables. latent model approximated using rational approximation fractional SPDE model corresponding Gaussian process.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rSPDE.matern.loglike.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Object-based log-likelihood function for latent Gaussian fractional SPDE model using the rational approximations ‚Äî rSPDE.matern.loglike","text":"","code":"rSPDE.matern.loglike(   object,   Y,   A,   sigma.e,   mu = 0,   user_nu = NULL,   user_kappa = NULL,   user_sigma = NULL,   user_range = NULL,   user_tau = NULL,   user_m = NULL )"},{"path":"https://davidbolin.github.io/rSPDE/reference/rSPDE.matern.loglike.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Object-based log-likelihood function for latent Gaussian fractional SPDE model using the rational approximations ‚Äî rSPDE.matern.loglike","text":"object rational SPDE approximation, computed using matern.operators() Y observations, either vector matrix columns correspond independent replicates observations. observation matrix links measurement location finite element basis. sigma.e standard deviation measurement noise. mu Expectation vector latent field (default = 0). user_nu non-null, update shape parameter covariance function. user_kappa non-null, update range parameter covariance function. user_sigma non-null, update standard deviation covariance function. user_range non-null, update range parameter covariance function. user_tau non-null, update parameter tau. user_m non-null, update order rational approximation, needs positive integer.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rSPDE.matern.loglike.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Object-based log-likelihood function for latent Gaussian fractional SPDE model using the rational approximations ‚Äî rSPDE.matern.loglike","text":"log-likelihood value.","code":""},{"path":[]},{"path":"https://davidbolin.github.io/rSPDE/reference/rSPDE.matern.loglike.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Object-based log-likelihood function for latent Gaussian fractional SPDE model using the rational approximations ‚Äî rSPDE.matern.loglike","text":"","code":"# this example illustrates how the function can be used for maximum likelihood estimation  set.seed(123) # Sample a Gaussian Matern process on R using a rational approximation nu <- 0.8 kappa <- 5 sigma <- 1 sigma.e <- 0.1 n.rep <- 10 n.obs <- 100 n.x <- 51 range <- 0.2  # create mass and stiffness matrices for a FEM discretization x <- seq(from = 0, to = 1, length.out = n.x) fem <- rSPDE.fem1d(x)  tau <- sqrt(gamma(nu) / (sigma^2 * kappa^(2 * nu) *   (4 * pi)^(1 / 2) * gamma(nu + 1 / 2)))  # Compute the covariance-based rational approximation op_cov <- matern.operators(   loc_mesh = x, nu = nu,   range = range, sigma = sigma, d = 1, m = 2,   parameterization = \"matern\" )  # Sample the model u <- simulate(op_cov, n.rep)  # Create some data obs.loc <- runif(n = n.obs, min = 0, max = 1) A <- rSPDE.A1d(x, obs.loc) noise <- rnorm(n.obs * n.rep) dim(noise) <- c(n.obs, n.rep) Y <- as.matrix(A %*% u + sigma.e * noise)  # Define the negative likelihood function for optimization # using CBrSPDE.matern.loglike  # Notice that we are also using sigma instead of tau, so it can be compared # to matern.loglike() mlik_cov <- function(theta, Y, A, op_cov) {   kappa <- exp(theta[1])   sigma <- exp(theta[2])   nu <- exp(theta[3])   return(-rSPDE.matern.loglike(     object = op_cov, Y = Y,     A = A, user_kappa = kappa, user_sigma = sigma,     user_nu = nu, sigma.e = exp(theta[4])   )) }  # The parameters can now be estimated by minimizing mlik with optim # \\donttest{ # Choose some reasonable starting values depending on the size of the domain theta0 <- log(c(sqrt(8), 1 / sqrt(var(c(Y))), 0.9, 0.01))  # run estimation and display the results theta <- optim(theta0, mlik_cov,   Y = Y, A = A, op_cov = op_cov,   method = \"L-BFGS-B\" )  print(data.frame(   range = c(range, exp(theta$par[1])), sigma = c(sigma, exp(theta$par[2])),   nu = c(nu, exp(theta$par[3])), sigma.e = c(sigma.e, exp(theta$par[4])),   row.names = c(\"Truth\", \"Estimates\") )) #>              range    sigma        nu    sigma.e #> Truth     0.200000 1.000000 0.8000000 0.10000000 #> Estimates 2.828427 1.032637 0.8914999 0.09829063 # }"},{"path":"https://davidbolin.github.io/rSPDE/reference/rational.order-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Changing the order of the rational approximation ‚Äî rational.order<-","title":"Changing the order of the rational approximation ‚Äî rational.order<-","text":"Changing order rational approximation","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rational.order-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Changing the order of the rational approximation ‚Äî rational.order<-","text":"","code":"rational.order(x) <- value"},{"path":"https://davidbolin.github.io/rSPDE/reference/rational.order-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Changing the order of the rational approximation ‚Äî rational.order<-","text":"x CBrSPDE rpsde.inla object value order rational approximation.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rational.order-set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Changing the order of the rational approximation ‚Äî rational.order<-","text":"object class new order rational approximation.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rational.order.html","id":null,"dir":"Reference","previous_headings":"","what":"Get the order of rational approximation. ‚Äî rational.order","title":"Get the order of rational approximation. ‚Äî rational.order","text":"Get order rational approximation.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rational.order.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get the order of rational approximation. ‚Äî rational.order","text":"","code":"rational.order(object)"},{"path":"https://davidbolin.github.io/rSPDE/reference/rational.order.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get the order of rational approximation. ‚Äî rational.order","text":"object CBrSPDEobj object inla_rspde object.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rational.order.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get the order of rational approximation. ‚Äî rational.order","text":"order rational approximation.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rational.type-set.html","id":null,"dir":"Reference","previous_headings":"","what":"Changing the type of the rational approximation ‚Äî rational.type<-","title":"Changing the type of the rational approximation ‚Äî rational.type<-","text":"Changing type rational approximation","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rational.type-set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Changing the type of the rational approximation ‚Äî rational.type<-","text":"","code":"rational.type(x) <- value"},{"path":"https://davidbolin.github.io/rSPDE/reference/rational.type-set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Changing the type of the rational approximation ‚Äî rational.type<-","text":"x CBrSPDE rpsde.inla object value type rational approximation. current options \"chebfun\", \"brasil\" \"chebfunLB\"","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rational.type-set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Changing the type of the rational approximation ‚Äî rational.type<-","text":"object class new rational approximation.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rational.type.html","id":null,"dir":"Reference","previous_headings":"","what":"Get type of rational approximation. ‚Äî rational.type","title":"Get type of rational approximation. ‚Äî rational.type","text":"Get type rational approximation.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rational.type.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Get type of rational approximation. ‚Äî rational.type","text":"","code":"rational.type(object)"},{"path":"https://davidbolin.github.io/rSPDE/reference/rational.type.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Get type of rational approximation. ‚Äî rational.type","text":"object CBrSPDEobj object inla_rspde object.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rational.type.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Get type of rational approximation. ‚Äî rational.type","text":"type rational approximation.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/require.nowarnings.html","id":null,"dir":"Reference","previous_headings":"","what":"Warnings free loading of add-on packages ‚Äî require.nowarnings","title":"Warnings free loading of add-on packages ‚Äî require.nowarnings","text":"Turn warnings require(), allow clean completion examples require unavailable Suggested packages.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/require.nowarnings.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Warnings free loading of add-on packages ‚Äî require.nowarnings","text":"","code":"require.nowarnings(package, lib.loc = NULL, character.only = FALSE)"},{"path":"https://davidbolin.github.io/rSPDE/reference/require.nowarnings.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Warnings free loading of add-on packages ‚Äî require.nowarnings","text":"package name package, given character string. lib.loc character vector describing location R library trees search , NULL.  default value NULL corresponds libraries currently known .libPaths(). Non-existent library trees silently ignored. character.logical indicating whether package can assumed character string.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/require.nowarnings.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Warnings free loading of add-on packages ‚Äî require.nowarnings","text":"require.nowarnings returns (invisibly) TRUE succeeds, otherwise FALSE","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/require.nowarnings.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Warnings free loading of add-on packages ‚Äî require.nowarnings","text":"require(package) acts require(package, quietly = TRUE) warnings turned . particular, warning error given package unavailable. cases use requireNamespace(package, quietly = TRUE) instead, produce warnings.","code":""},{"path":[]},{"path":"https://davidbolin.github.io/rSPDE/reference/require.nowarnings.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Warnings free loading of add-on packages ‚Äî require.nowarnings","text":"","code":"## This should produce no output: if (require.nowarnings(nonexistent)) {   message(\"Package loaded successfully\") }"},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.make.A.html","id":null,"dir":"Reference","previous_headings":"","what":"Observation/prediction matrices for rSPDE models. ‚Äî rspde.make.A","title":"Observation/prediction matrices for rSPDE models. ‚Äî rspde.make.A","text":"Constructs observation/prediction weight matrices rSPDE models based inla.mesh inla.mesh.1d objects.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.make.A.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Observation/prediction matrices for rSPDE models. ‚Äî rspde.make.A","text":"","code":"rspde.make.A(   mesh = NULL,   loc = NULL,   A = NULL,   dim = NULL,   rspde.order = 1,   nu = NULL,   index = NULL,   group = NULL,   repl = 1L,   n.group = NULL,   n.repl = NULL )"},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.make.A.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Observation/prediction matrices for rSPDE models. ‚Äî rspde.make.A","text":"mesh inla.mesh, inla.mesh.1d object metric_graph object. loc Locations, needed INLA mesh provided matrix standard SPDE approach, matrix returned inla.spde.make.. provided mesh provided. dim dimension. provided mesh provided. rspde.order order covariance-based rational SPDE approach. nu NULL, model assume nu estimated. nu fixed, provide value nu. index observation/prediction value, index loc. Default seq_len(nrow(.loc)). group observation/prediction value, index group model. repl observation/prediction value, replicate index. n.group size group model. n.repl total number replicates.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.make.A.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Observation/prediction matrices for rSPDE models. ‚Äî rspde.make.A","text":"\\(\\) matrix rSPDE models.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.make.A.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Observation/prediction matrices for rSPDE models. ‚Äî rspde.make.A","text":"","code":"# \\donttest{ # devel version if (requireNamespace(\"INLA\", quietly = TRUE)) {   library(INLA)    set.seed(123)   loc <- matrix(runif(100 * 2) * 100, 100, 2)   mesh <- inla.mesh.2d(     loc = loc,     cutoff = 50,     max.edge = c(50, 500)   )   A <- rspde.make.A(mesh, loc = loc, rspde.order = 3) } # devel.tag # }"},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.make.index.html","id":null,"dir":"Reference","previous_headings":"","what":"rSPDE model index vector generation ‚Äî rspde.make.index","title":"rSPDE model index vector generation ‚Äî rspde.make.index","text":"Generates list named index vectors rSPDE model.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.make.index.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rSPDE model index vector generation ‚Äî rspde.make.index","text":"","code":"rspde.make.index(   name,   n.spde = NULL,   n.group = 1,   n.repl = 1,   mesh = NULL,   rspde.order = 1,   nu = NULL,   dim = NULL )"},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.make.index.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rSPDE model index vector generation ‚Äî rspde.make.index","text":"name character string base name effect. n.spde number basis functions mesh model. n.group size group model. n.repl total number replicates. mesh inla.mesh, inla.mesh.1d object metric_graph object. rspde.order order rational approximation nu NULL, model assume nu estimated. nu fixed, provide value nu. dim dimension domain. provided mesh provided.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.make.index.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rSPDE model index vector generation ‚Äî rspde.make.index","text":"list named index vectors. name Indices vector latent variables name.group 'group' indices name.repl Indices replicates","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.make.index.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"rSPDE model index vector generation ‚Äî rspde.make.index","text":"","code":"# \\donttest{ # devel version if (requireNamespace(\"INLA\", quietly = TRUE)) {   library(INLA)    set.seed(123)    m <- 100   loc_2d_mesh <- matrix(runif(m * 2), m, 2)   mesh_2d <- inla.mesh.2d(     loc = loc_2d_mesh,     cutoff = 0.05,     max.edge = c(0.1, 0.5)   )   sigma <- 1   range <- 0.2   nu <- 0.8   kappa <- sqrt(8 * nu) / range   op <- matern.operators(     mesh = mesh_2d, nu = nu,     range = range, sigma = sigma, m = 2,     parameterization = \"matern\"   )   u <- simulate(op)   A <- inla.spde.make.A(     mesh = mesh_2d,     loc = loc_2d_mesh   )   sigma.e <- 0.1   y <- A %*% u + rnorm(m) * sigma.e   Abar <- rspde.make.A(mesh = mesh_2d, loc = loc_2d_mesh)   mesh.index <- rspde.make.index(name = \"field\", mesh = mesh_2d)   st.dat <- inla.stack(     data = list(y = as.vector(y)),     A = Abar,     effects = mesh.index   )   rspde_model <- rspde.matern(     mesh = mesh_2d,     nu.upper.bound = 2   )   f <- y ~ -1 + f(field, model = rspde_model)   rspde_fit <- inla(f,     data = inla.stack.data(st.dat),     family = \"gaussian\",     control.predictor =       list(A = inla.stack.A(st.dat))   )   result <- rspde.result(rspde_fit, \"field\", rspde_model)   summary(result) } #> Warning: the mean or mode of nu is very close to nu.upper.bound, please consider increasing nu.upper.bound, and refitting the model. #>             mean         sd  0.025quant    0.5quant 0.975quant        mode #> tau    0.0133513  0.0352798 2.58008e-12 6.53985e-04   0.108923 2.58008e-12 #> kappa 27.6245000 15.5402000 1.27261e+01 2.29037e+01  70.011100 1.60429e+01 #> nu     1.5384600  0.4638670 5.44410e-01 1.71573e+00   1.999120 1.99998e+00 # devel.tag # }"},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.matern.html","id":null,"dir":"Reference","previous_headings":"","what":"Matern rSPDE model object for INLA ‚Äî rspde.matern","title":"Matern rSPDE model object for INLA ‚Äî rspde.matern","text":"Creates INLA object stationary Matern model general smoothness parameter.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.matern.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matern rSPDE model object for INLA ‚Äî rspde.matern","text":"","code":"rspde.matern(   mesh,   nu.upper.bound = NULL,   rspde.order = 1,   nu = NULL,   B.sigma = matrix(c(0, 1, 0), 1, 3),   B.range = matrix(c(0, 0, 1), 1, 3),   parameterization = c(\"spde\", \"matern\", \"matern2\"),   B.tau = matrix(c(0, 1, 0), 1, 3),   B.kappa = matrix(c(0, 0, 1), 1, 3),   start.nu = NULL,   start.theta = NULL,   prior.nu = NULL,   theta.prior.mean = NULL,   theta.prior.prec = 0.1,   prior.std.dev.nominal = 1,   prior.range.nominal = NULL,   prior.kappa.mean = NULL,   prior.tau.mean = NULL,   start.lstd.dev = NULL,   start.lrange = NULL,   start.ltau = NULL,   start.lkappa = NULL,   prior.theta.param = c(\"theta\", \"spde\"),   prior.nu.dist = c(\"beta\", \"lognormal\"),   nu.prec.inc = 1,   type.rational.approx = c(\"chebfun\", \"brasil\", \"chebfunLB\"),   debug = FALSE,   shared_lib = \"detect\",   ... )"},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.matern.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matern rSPDE model object for INLA ‚Äî rspde.matern","text":"mesh mesh build model. can inla.mesh inla.mesh.1d object. Otherwise, list containing elements d, dimension, C, mass matrix, G, stiffness matrix. nu.upper.bound Upper bound smoothness parameter. NULL, set 2. rspde.order order covariance-based rational SPDE approach. default order 1. nu nu set parameter, nu kept fixed estimated. nu NULL, estimated. B.sigma Matrix specification log-linear model \\(\\sigma\\) ('matern' parameterization) \\(\\sigma^2\\) ('matern2' parameterization). used parameterization = 'matern' parameterization = 'matern2'. B.range Matrix specification log-linear model \\(\\rho\\), range-like parameter (exactly range parameter stationary case). used parameterization = 'matern' parameterization = 'matern2'. parameterization parameterization use? matern uses range, std. deviation nu (smoothness). spde uses kappa, tau nu (smoothness). matern2 uses range-like (1/kappa), variance nu (smoothness). default spde. B.tau Matrix specification log-linear model \\(\\tau\\). used parameterization = 'spde'. B.kappa Matrix specification log-linear model \\(\\kappa\\). used parameterization = 'spde'. start.nu Starting value nu. start.theta Starting values model parameters. stationary case, parameterization='matern', theta[1] std.dev theta[2] range parameter. parameterization = 'spde', theta[1] tau theta[2] kappa. prior.nu list containing elements mean prec beta distribution, loglocation logscale truncated lognormal distribution. loglocation stands location parameter truncated lognormal distribution log scale. prec stands precision beta distribution. logscale stands scale truncated lognormal distribution log scale. Check details . theta.prior.mean vector mean priors theta. theta.prior.prec precision matrix prior theta. prior.std.dev.nominal Prior std. deviation used priors starting values. prior.range.nominal Prior range used priors starting values. prior.kappa.mean Prior kappa used priors starting values. prior.tau.mean Prior tau used priors starting values. start.lstd.dev Starting value log std. deviation. used start.ltau non-null. used stationary case parameterization = 'matern'. start.lrange Starting value log range. used start.lkappa non-null. used stationary case parameterization = 'matern'. start.ltau Starting value log tau. used stationary case parameterization = 'spde'. start.lkappa Starting value log kappa. used stationary case parameterization = 'spde'. prior.theta.param lognormal prior theta SPDE parameters (tau kappa stationary case)? prior.nu.dist distribution smoothness parameter. current options \"beta\" \"lognormal\". default \"lognormal\". nu.prec.inc Amount increase precision beta prior distribution. Check details . type.rational.approx type rational approximation used? current types \"chebfun\", \"brasil\" \"chebfunLB\". debug INLA debug argument shared_lib shared lib use cgeneric implementation? \"detect\", check shared lib exists locally, case use . Otherwise use INLA's shared library. \"INLA\", use shared lib INLA's installation. 'rSPDE', use local installation (work installation CRAN). Otherwise, can directly supply path .(.dll) file. ... used internally. prior.kappa list containing elements meanlog sdlog, , mean standard deviation log scale. prior.tau list containing elements meanlog sdlog, , mean standard deviation log scale. prior.range list containing elements meanlog sdlog, , mean standard deviation log scale. used prior.kappa non-null. prior.std.dev list containing elements meanlog sdlog, , mean standard deviation log scale. used prior.tau non-null.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.matern.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Matern rSPDE model object for INLA ‚Äî rspde.matern","text":"INLA model.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.matern.intrinsic.html","id":null,"dir":"Reference","previous_headings":"","what":"Intrinsic Matern rSPDE model object for INLA ‚Äî rspde.matern.intrinsic","title":"Intrinsic Matern rSPDE model object for INLA ‚Äî rspde.matern.intrinsic","text":"Creates INLA object stationary intrinsic Matern model. Currently, alpha fixed 2 beta fixed 1.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.matern.intrinsic.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Intrinsic Matern rSPDE model object for INLA ‚Äî rspde.matern.intrinsic","text":"","code":"rspde.intrinsic.matern(   mesh,   alpha = 2,   mean.correction = FALSE,   prior.lkappa.mean = NULL,   prior.ltau.mean = 1,   prior.lkappa.prec = 0.1,   prior.ltau.prec = 0.1,   start.ltau = NULL,   start.lkappa = NULL,   true.scaling = TRUE,   diagonal = 0,   debug = FALSE,   shared_lib = \"detect\",   ... )"},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.matern.intrinsic.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Intrinsic Matern rSPDE model object for INLA ‚Äî rspde.matern.intrinsic","text":"mesh mesh build model. can inla.mesh inla.mesh.1d object. Otherwise, list containing elements d, dimension, C, mass matrix, G, stiffness matrix. alpha Smoothness parameter, need 1 2. mean.correction Add mean correction extreme value models? prior.lkappa.mean Prior log kappa used priors starting values. prior.ltau.mean Prior log tau used priors starting values. prior.lkappa.prec Precision used prior log kappa used priors starting values. prior.ltau.prec Precision used prior log tau used priors starting values. start.ltau Starting value log tau. start.lkappa Starting value log kappa. true.scaling Compute true normalizing constant manually? Default TRUE. alternative set FALSE set diagonal argument small positive value. latter case, model approximated non-intrinsic model precision matrix diagonal value added diagonal. diagonal Value diagonal correction INLA stability. Default 0. debug INLA debug argument shared_lib shared lib use cgeneric implementation? \"detect\", check shared lib exists locally, case use . Otherwise use INLA's shared library. \"INLA\", use shared lib INLA's installation. 'rSPDE', use local installation (work installation CRAN). Otherwise, can directly supply path .(.dll) file. ... used internally.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.matern.intrinsic.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Intrinsic Matern rSPDE model object for INLA ‚Äî rspde.matern.intrinsic","text":"INLA model.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.matern.precision.html","id":null,"dir":"Reference","previous_headings":"","what":"Precision matrix of the covariance-based rational approximation of stationary Gaussian Matern random fields ‚Äî rspde.matern.precision","title":"Precision matrix of the covariance-based rational approximation of stationary Gaussian Matern random fields ‚Äî rspde.matern.precision","text":"rspde.matern.precision used computing precision matrix covariance-based rational SPDE approximation stationary Gaussian random fields \\(R^d\\) Matern covariance function $$C(h) = \\frac{\\sigma^2}{2^(\\nu-1)\\Gamma(\\nu)}(\\kappa h)^\\nu K_\\nu(\\kappa h)$$","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.matern.precision.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Precision matrix of the covariance-based rational approximation of stationary Gaussian Matern random fields ‚Äî rspde.matern.precision","text":"","code":"rspde.matern.precision(   kappa,   nu,   tau = NULL,   sigma = NULL,   rspde.order,   dim,   fem_mesh_matrices,   only_fractional = FALSE,   return_block_list = FALSE,   type_rational_approx = \"chebfun\" )"},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.matern.precision.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Precision matrix of the covariance-based rational approximation of stationary Gaussian Matern random fields ‚Äî rspde.matern.precision","text":"kappa Range parameter covariance function. nu Shape parameter covariance function. tau Scale parameter covariance function. sigma provided, tau provided. sigma Standard deviation covariance function. tau provided, sigma provided. rspde.order order rational approximation dim dimension domain fem_mesh_matrices list containing FEM-related matrices. list contain elements c0, g1, g2, g3, etc. only_fractional Logical. fractional-order part precision matrix returned? return_block_list Logical. type = \"covariance\", block parts precision matrix returned separately list? type_rational_approx type rational approximation used? current types \"chebfun\", \"brasil\" \"chebfunLB\".","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.matern.precision.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Precision matrix of the covariance-based rational approximation of stationary Gaussian Matern random fields ‚Äî rspde.matern.precision","text":"precision matrix","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.matern.precision.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Precision matrix of the covariance-based rational approximation of stationary Gaussian Matern random fields ‚Äî rspde.matern.precision","text":"","code":"set.seed(123) nobs <- 101 x <- seq(from = 0, to = 1, length.out = nobs) fem <- rSPDE.fem1d(x) kappa <- 40 sigma <- 1 d <- 1 nu <- 2.6 tau <- sqrt(gamma(nu) / (kappa^(2 * nu) * (4 * pi)^(d / 2) *   gamma(nu + d / 2))) range <- sqrt(8 * nu) / kappa op_cov <- matern.operators(   loc_mesh = x, nu = nu, range = range, sigma = sigma,   d = 1, m = 2, compute_higher_order = TRUE,   parameterization = \"matern\" ) v <- t(rSPDE.A1d(x, 0.5)) c.true <- matern.covariance(abs(x - 0.5), kappa, nu, sigma) Q <- rspde.matern.precision(   kappa = kappa, nu = nu, tau = tau, rspde.order = 2, d = 1,   fem_mesh_matrices = op_cov$fem_mesh_matrices ) A <- Diagonal(nobs) Abar <- cbind(A, A, A) w <- rbind(v, v, v) c.approx_cov <- (Abar) %*% solve(Q, w)  # plot the result and compare with the true Matern covariance plot(x, matern.covariance(abs(x - 0.5), kappa, nu, sigma),   type = \"l\", ylab = \"C(h)\",   xlab = \"h\", main = \"Matern covariance and rational approximations\" ) lines(x, c.approx_cov, col = 2)"},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.matern.precision.integer.html","id":null,"dir":"Reference","previous_headings":"","what":"Precision matrix of stationary Gaussian Matern random fields with integer covariance exponent ‚Äî rspde.matern.precision.integer","title":"Precision matrix of stationary Gaussian Matern random fields with integer covariance exponent ‚Äî rspde.matern.precision.integer","text":"rspde.matern.precision.integer.opt used computing precision matrix stationary Gaussian random fields \\(R^d\\) Matern covariance function $$C(h) = \\frac{\\sigma^2}{2^(\\nu-1)\\Gamma(\\nu)} (\\kappa h)^\\nu K_\\nu(\\kappa h)$$, \\(\\alpha = \\nu + d/2\\) natural number.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.matern.precision.integer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Precision matrix of stationary Gaussian Matern random fields with integer covariance exponent ‚Äî rspde.matern.precision.integer","text":"","code":"rspde.matern.precision.integer(   kappa,   nu,   tau = NULL,   sigma = NULL,   dim,   fem_mesh_matrices )"},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.matern.precision.integer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Precision matrix of stationary Gaussian Matern random fields with integer covariance exponent ‚Äî rspde.matern.precision.integer","text":"kappa Range parameter covariance function. nu Shape parameter covariance function. tau Scale parameter covariance function. sigma Standard deviation covariance function. tau provided, sigma provided. dim dimension domain fem_mesh_matrices list containing FEM-related matrices. list contain elements c0, g1, g2, g3, etc.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.matern.precision.integer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Precision matrix of stationary Gaussian Matern random fields with integer covariance exponent ‚Äî rspde.matern.precision.integer","text":"precision matrix","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.matern.precision.integer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Precision matrix of stationary Gaussian Matern random fields with integer covariance exponent ‚Äî rspde.matern.precision.integer","text":"","code":"set.seed(123) nobs <- 101 x <- seq(from = 0, to = 1, length.out = nobs) fem <- rSPDE.fem1d(x) kappa <- 40 sigma <- 1 d <- 1 nu <- 0.5 tau <- sqrt(gamma(nu) / (kappa^(2 * nu) *   (4 * pi)^(d / 2) * gamma(nu + d / 2))) range <- sqrt(8 * nu) / kappa op_cov <- matern.operators(   loc_mesh = x, nu = nu, range = range, sigma = sigma,   d = 1, m = 2, parameterization = \"matern\" ) v <- t(rSPDE.A1d(x, 0.5)) c.true <- matern.covariance(abs(x - 0.5), kappa, nu, sigma) Q <- rspde.matern.precision.integer(   kappa = kappa, nu = nu, tau = tau, d = 1,   fem_mesh_matrices = op_cov$fem_mesh_matrices ) A <- Diagonal(nobs) c.approx_cov <- A %*% solve(Q, v)  # plot the result and compare with the true Matern covariance plot(x, matern.covariance(abs(x - 0.5), kappa, nu, sigma),   type = \"l\", ylab = \"C(h)\",   xlab = \"h\", main = \"Matern covariance and rational approximations\" ) lines(x, c.approx_cov, col = 2)"},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.matern.precision.integer.opt.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimized precision matrix of stationary Gaussian Matern random fields with integer covariance exponent ‚Äî rspde.matern.precision.integer.opt","title":"Optimized precision matrix of stationary Gaussian Matern random fields with integer covariance exponent ‚Äî rspde.matern.precision.integer.opt","text":"rspde.matern.precision.integer.opt used computing optimized version precision matrix stationary Gaussian random fields \\(R^d\\) Matern covariance function $$C(h) = \\frac{\\sigma^2}{2^{\\nu-1}\\Gamma(\\nu)}(\\kappa h)^\\nu K_\\nu(\\kappa h),$$ \\(\\alpha = \\nu + d/2\\) natural number.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.matern.precision.integer.opt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimized precision matrix of stationary Gaussian Matern random fields with integer covariance exponent ‚Äî rspde.matern.precision.integer.opt","text":"","code":"rspde.matern.precision.integer.opt(   kappa,   nu,   tau,   d,   fem_matrices,   graph = NULL )"},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.matern.precision.integer.opt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimized precision matrix of stationary Gaussian Matern random fields with integer covariance exponent ‚Äî rspde.matern.precision.integer.opt","text":"kappa Range parameter covariance function. nu Shape parameter covariance function. tau Scale parameter covariance function. d dimension domain fem_matrices list containing FEM-related matrices. list contain elements C, G, G_2, G_3, etc. graph sparsity graph matrices. NULL, vector elements returned, non-NULL, sparse matrix returned.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.matern.precision.integer.opt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimized precision matrix of stationary Gaussian Matern random fields with integer covariance exponent ‚Äî rspde.matern.precision.integer.opt","text":"precision matrix","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.matern.precision.opt.html","id":null,"dir":"Reference","previous_headings":"","what":"Optimized precision matrix of the covariance-based rational approximation ‚Äî rspde.matern.precision.opt","title":"Optimized precision matrix of the covariance-based rational approximation ‚Äî rspde.matern.precision.opt","text":"rspde.matern.precision used computing optimized version precision matrix covariance-based rational SPDE approximation stationary Gaussian random fields \\(R^d\\) Matern covariance function $$C(h) = \\frac{\\sigma^2}{2^{\\nu-1}\\Gamma(\\nu)}(\\kappa h)^\\nu K_\\nu(\\kappa h).$$","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.matern.precision.opt.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Optimized precision matrix of the covariance-based rational approximation ‚Äî rspde.matern.precision.opt","text":"","code":"rspde.matern.precision.opt(   kappa,   nu,   tau,   rspde.order,   dim,   fem_matrices,   graph = NULL,   sharp,   type_rational_approx )"},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.matern.precision.opt.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Optimized precision matrix of the covariance-based rational approximation ‚Äî rspde.matern.precision.opt","text":"kappa Range parameter covariance function. nu Shape parameter covariance function. tau Scale parameter covariance function. rspde.order order rational approximation dim dimension domain fem_matrices list containing FEM-related matrices. list contain elements C, G, G_2, G_3, etc. graph sparsity graph matrices. NULL, vector elements returned, non-NULL, sparse matrix returned. sharp sparsity graph correct sparsity (costs perform sparsity analysis) upper bound sparsity? type_rational_approx type rational approximation used? current types \"chebfun\", \"brasil\" \"chebfunLB\".","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.matern.precision.opt.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Optimized precision matrix of the covariance-based rational approximation ‚Äî rspde.matern.precision.opt","text":"precision matrix","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.mesh.project.html","id":null,"dir":"Reference","previous_headings":"","what":"Calculate a lattice projection to/from an inla.mesh for rSPDE objects ‚Äî rspde.mesh.project","title":"Calculate a lattice projection to/from an inla.mesh for rSPDE objects ‚Äî rspde.mesh.project","text":"Calculate lattice projection /inla.mesh rSPDE objects","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.mesh.project.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Calculate a lattice projection to/from an inla.mesh for rSPDE objects ‚Äî rspde.mesh.project","text":"","code":"rspde.mesh.project(...)  rspde.mesh.projector(   mesh,   nu = NULL,   rspde.order = 1,   loc = NULL,   lattice = NULL,   xlim = NULL,   ylim = NULL,   dims = c(100, 100),   projection = NULL,   ... )  # S3 method for class 'inla.mesh' rspde.mesh.project(   mesh,   loc = NULL,   field = NULL,   rspde.order = 1,   nu = NULL,   ... )  # S3 method for class 'rspde.mesh.projector' rspde.mesh.project(projector, field, ...)  # S3 method for class 'inla.mesh.1d' rspde.mesh.project(mesh, loc, field = NULL, rspde.order = 1, nu = NULL, ...)"},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.mesh.project.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Calculate a lattice projection to/from an inla.mesh for rSPDE objects ‚Äî rspde.mesh.project","text":"... Additional parameters. mesh inla.mesh inla.mesh.1d object. nu smoothness parameter. NULL, assumed nu estimated. rspde.order order rational approximation. loc Projection locations. Can matrix SpatialPoints SpatialPointsDataFrame object. lattice inla.mesh.lattice object. xlim X-axis limits lattice. R2 meshes, defaults covering domain. ylim Y-axis limits lattice. R2 meshes, defaults covering domain. dims Lattice dimensions. projection One c(\"default\", \"longlat\", \"longsinlat\", \"mollweide\"). field Basis function weights, one per mesh basis function, describing function evaluated projection locations. projector rspde.mesh.projector object.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.mesh.project.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Calculate a lattice projection to/from an inla.mesh for rSPDE objects ‚Äî rspde.mesh.project","text":"list projection information rspde.mesh.project. rspde.mesh.projector(mesh, ...), rspde.mesh.projector object. rspde.mesh.project(projector, field, ...), field projected mesh onto locations given projector object.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.mesh.project.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Calculate a lattice projection to/from an inla.mesh for rSPDE objects ‚Äî rspde.mesh.project","text":"function built upon inla.mesh.project inla.mesh.projector functions INLA.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.metric_graph.html","id":null,"dir":"Reference","previous_headings":"","what":"Matern rSPDE model object for metric graphs in INLA ‚Äî rspde.metric_graph","title":"Matern rSPDE model object for metric graphs in INLA ‚Äî rspde.metric_graph","text":"Creates INLA object stationary Matern model metric graph general smoothness parameter.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.metric_graph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Matern rSPDE model object for metric graphs in INLA ‚Äî rspde.metric_graph","text":"","code":"rspde.metric_graph(   graph_obj,   h = NULL,   nu.upper.bound = 2,   rspde.order = 1,   nu = NULL,   debug = FALSE,   B.sigma = matrix(c(0, 1, 0), 1, 3),   B.range = matrix(c(0, 0, 1), 1, 3),   parameterization = c(\"matern\", \"spde\"),   B.tau = matrix(c(0, 1, 0), 1, 3),   B.kappa = matrix(c(0, 0, 1), 1, 3),   start.nu = NULL,   start.theta = NULL,   prior.nu = NULL,   theta.prior.mean = NULL,   theta.prior.prec = 0.1,   prior.std.dev.nominal = 1,   prior.range.nominal = NULL,   prior.kappa.mean = NULL,   prior.tau.mean = NULL,   start.lstd.dev = NULL,   start.lrange = NULL,   start.ltau = NULL,   start.lkappa = NULL,   prior.theta.param = c(\"theta\", \"spde\"),   prior.nu.dist = c(\"lognormal\", \"beta\"),   nu.prec.inc = 1,   type.rational.approx = c(\"chebfun\", \"brasil\", \"chebfunLB\"),   shared_lib = \"INLA\" )"},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.metric_graph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Matern rSPDE model object for metric graphs in INLA ‚Äî rspde.metric_graph","text":"graph_obj graph object build model. Needs class metric_graph. built mesh. mesh built, one built using h=0.01 default. h width mesh case mesh built. nu.upper.bound Upper bound smoothness parameter. rspde.order order covariance-based rational SPDE approach. nu nu set parameter, nu kept fixed estimated. nu NULL, estimated. debug INLA debug argument B.sigma Matrix specification log-linear model \\(\\sigma\\). used parameterization = 'matern'. B.range Matrix specification log-linear model \\(\\rho\\), range-like parameter (exactly range parameter stationary case). used parameterization = 'matern'. parameterization parameterization use? matern uses range, std. deviation nu (smoothness). spde uses kappa, tau nu (smoothness). default matern. B.tau Matrix specification log-linear model \\(\\tau\\). used parameterization = 'spde'. B.kappa Matrix specification log-linear model \\(\\kappa\\). used parameterization = 'spde'. start.nu Starting value nu. start.theta Starting values model parameters. stationary case, parameterization='matern', theta[1] std.dev theta[2] range parameter. parameterization = 'spde', theta[1] tau theta[2] kappa. prior.nu list containing elements mean prec beta distribution, loglocation logscale truncated lognormal distribution. loglocation stands location parameter truncated lognormal distribution log scale. prec stands precision beta distribution. logscale stands scale truncated lognormal distribution log scale. Check details . theta.prior.mean vector mean priors theta. theta.prior.prec precision matrix prior theta. prior.std.dev.nominal Prior std. deviation used priors starting values. prior.range.nominal Prior range used priors starting values. prior.kappa.mean Prior kappa used priors starting values. prior.tau.mean Prior tau used priors starting values. start.lstd.dev Starting value log std. deviation. used start.ltau non-null. used stationary case parameterization = 'matern'. start.lrange Starting value log range. used start.lkappa non-null. used stationary case parameterization = 'matern'. start.ltau Starting value log tau. used stationary case parameterization = 'spde'. start.lkappa Starting value log kappa. used stationary case parameterization = 'spde'. prior.theta.param lognormal prior theta SPDE parameters (tau kappa stationary case)? prior.nu.dist distribution smoothness parameter. current options \"beta\" \"lognormal\". default \"beta\". nu.prec.inc Amount increase precision beta prior distribution. Check details . type.rational.approx type rational approximation used? current types \"chebfun\", \"brasil\" \"chebfunLB\". shared_lib shared lib use cgeneric implementation? \"INLA\", use shared lib INLA's installation. 'rSPDE', use local installation (work installation CRAN). Otherwise, can directly supply path .(.dll) file. prior.kappa list containing elements meanlog sdlog, , mean standard deviation log scale. prior.tau list containing elements meanlog sdlog, , mean standard deviation log scale. prior.range list containing elements meanlog sdlog, , mean standard deviation log scale. used prior.kappa non-null. prior.std.dev list containing elements meanlog sdlog, , mean standard deviation log scale. used prior.tau non-null.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.metric_graph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Matern rSPDE model object for metric graphs in INLA ‚Äî rspde.metric_graph","text":"INLA model.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.result.html","id":null,"dir":"Reference","previous_headings":"","what":"rSPDE result extraction from INLA estimation results ‚Äî rspde.result","title":"rSPDE result extraction from INLA estimation results ‚Äî rspde.result","text":"Extract field parameter values distributions rspde effect inla result object.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rSPDE result extraction from INLA estimation results ‚Äî rspde.result","text":"","code":"rspde.result(   inla,   name,   rspde,   compute.summary = TRUE,   parameterization = \"detect\",   n_samples = 5000,   n_density = 1024 )"},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rSPDE result extraction from INLA estimation results ‚Äî rspde.result","text":"inla inla object obtained call inla(). name character string name rSPDE effect inla formula. rspde inla_rspde object used effect inla formula. compute.summary summary computed? parameterization 'detect', parameterization model used. Otherwise, options 'spde', 'matern' 'matern2'. n_samples number samples used parameterization different one used fit model. n_density number equally spaced points estimate density.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rSPDE result extraction from INLA estimation results ‚Äî rspde.result","text":"model fitted matern parameterization (default), returns list containing: marginals.range Marginal densities range parameter marginals.log.range Marginal densities log(range) marginals.std.dev Marginal densities std. deviation marginals.log.std.dev Marginal densities log(std. deviation) marginals.values Marginal densities field values summary.log.range Summary statistics log(range) summary.log.std.dev Summary statistics log(std. deviation) summary.values Summary statistics field values compute.summary TRUE, list also contain summary.kappa Summary statistics kappa summary.tau Summary statistics tau model fitted spde parameterization, returns list containing: marginals.kappa Marginal densities kappa marginals.log.kappa Marginal densities log(kappa) marginals.log.tau Marginal densities log(tau) marginals.tau Marginal densities tau marginals.values Marginal densities field values summary.log.kappa Summary statistics log(kappa) summary.log.tau Summary statistics log(tau) summary.values Summary statistics field values compute.summary TRUE, list also contain summary.kappa Summary statistics kappa summary.tau Summary statistics tau cases, nu estimated, list also contain marginals.nu Marginal densities nu nu estimated beta prior used, list also contain marginals.logit.nu Marginal densities logit(nu) summary.logit.nu Marginal densities logit(nu) nu estimated truncated lognormal prior used, list also contain marginals.log.nu Marginal densities log(nu) summary.log.nu Marginal densities log(nu) nu estimated compute.summary TRUE, list also contain summary.nu Summary statistics nu","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde.result.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"rSPDE result extraction from INLA estimation results ‚Äî rspde.result","text":"","code":"# \\donttest{ # devel version if (requireNamespace(\"INLA\", quietly = TRUE)) {   library(INLA)    set.seed(123)    m <- 100   loc_2d_mesh <- matrix(runif(m * 2), m, 2)   mesh_2d <- inla.mesh.2d(     loc = loc_2d_mesh,     cutoff = 0.05,     max.edge = c(0.1, 0.5)   )   sigma <- 1   range <- 0.2   nu <- 0.8   kappa <- sqrt(8 * nu) / range   op <- matern.operators(     mesh = mesh_2d, nu = nu,     range = range, sigma = sigma, m = 2,     parameterization = \"matern\"   )   u <- simulate(op)   A <- inla.spde.make.A(     mesh = mesh_2d,     loc = loc_2d_mesh   )   sigma.e <- 0.1   y <- A %*% u + rnorm(m) * sigma.e   Abar <- rspde.make.A(mesh = mesh_2d, loc = loc_2d_mesh)   mesh.index <- rspde.make.index(name = \"field\", mesh = mesh_2d)   st.dat <- inla.stack(     data = list(y = as.vector(y)),     A = Abar,     effects = mesh.index   )   rspde_model <- rspde.matern(     mesh = mesh_2d,     nu.upper.bound = 2   )   f <- y ~ -1 + f(field, model = rspde_model)   rspde_fit <- inla(f,     data = inla.stack.data(st.dat),     family = \"gaussian\",     control.predictor =       list(A = inla.stack.A(st.dat))   )   result <- rspde.result(rspde_fit, \"field\", rspde_model)   summary(result) } #> Warning: the mean or mode of nu is very close to nu.upper.bound, please consider increasing nu.upper.bound, and refitting the model. #>             mean         sd  0.025quant    0.5quant 0.975quant        mode #> tau    0.0133513  0.0352799 2.58004e-12 6.53981e-04   0.108924 2.58004e-12 #> kappa 27.6245000 15.5402000 1.27261e+01 2.29037e+01  70.011200 1.60429e+01 #> nu     1.5384600  0.4638680 5.44410e-01 1.71573e+00   1.999120 1.99998e+00 # devel.tag # }"},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde_lme.html","id":null,"dir":"Reference","previous_headings":"","what":"rSPDE linear mixed effects models ‚Äî rspde_lme","title":"rSPDE linear mixed effects models ‚Äî rspde_lme","text":"Fitting linear mixed effects model latent Whittle-Matern models.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde_lme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"rSPDE linear mixed effects models ‚Äî rspde_lme","text":"","code":"rspde_lme(   formula,   loc,   data,   model = NULL,   repl = NULL,   which_repl = NULL,   optim_method = \"L-BFGS-B\",   use_data_from_graph = TRUE,   starting_values_latent = NULL,   start_sigma_e = NULL,   start_alpha = NULL,   alpha = NULL,   start_nu = NULL,   nu = NULL,   nu_upper_bound = 4,   rspde_order = NULL,   parallel = FALSE,   n_cores = parallel::detectCores() - 1,   optim_controls = list(),   improve_hessian = FALSE,   hessian_args = list() )"},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde_lme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"rSPDE linear mixed effects models ‚Äî rspde_lme","text":"formula Formula object describing relation response variables fixed effects. response variable matrix, column matrix treated replicate. loc vector names columns data contain observation locations, matrix data.frame containing observation locations. model class metric_graph, locations must either matrix data.frame two columns, character vector names two columns. first column number edge, second column normalized position edge. model 2d model, loc must either matrix data.frame two columns character vector name two columns contain location, first entry corresponding x entry second corresponding y entry. data data.frame containing data used. model Either object generated matern.operators() spde.matern.operators(). NULL, simple linear regression performed. repl Vector indicating replicate observation. NULL assume one replicate. which_repl replicates use? NULL replicates used. optim_method method used optim function. use_data_from_graph Logical. models generated graphs metric_graph class. case, data, locations replicates obtained graph object? starting_values_latent vector containing starting values latent model. latent model generated matern.operators(), starting values provided vector form c(tau,kappa). model generated spde.matern.operators(), starting values provided vector containing nonstationary parameters. start_sigma_e Starting value standard deviation measurament error. start_alpha Starting value smoothness parameter. used start_nu given. alpha NULL, smoothness parameter estimated, otherwise smoothness parameter kept fixed provided value. used nu given. start_nu Starting value smoothness parameter. nu NULL, smoothness parameter estimated, otherwise smoothness parameter kept fixed provided value. nu_upper_bound parameter limits maximum value nu can assume. rspde_order order rational approximation used fitting model. given, order model object used. parallel logical. Indicating whether use optimParallel . n_cores Number cores used parallel true. optim_controls Additional controls passed optim optimParallel. improve_hessian precise estimate hessian obtained? Turning might increase overall time. hessian_args List controls used improve_hessian TRUE. list can contain arguments passed method.args argument numDeriv::hessian function. See help hessian function numDeriv package details. Observe accepts \"Richardson\" method now, method \"complex\" supported.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/rspde_lme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"rSPDE linear mixed effects models ‚Äî rspde_lme","text":"list containing fitted model.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/simulate.CBrSPDEobj.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulation of a fractional SPDE using the covariance-based rational SPDE approximation ‚Äî simulate.CBrSPDEobj","title":"Simulation of a fractional SPDE using the covariance-based rational SPDE approximation ‚Äî simulate.CBrSPDEobj","text":"function samples Gaussian random field based using covariance-based rational SPDE approximation.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/simulate.CBrSPDEobj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation of a fractional SPDE using the covariance-based rational SPDE approximation ‚Äî simulate.CBrSPDEobj","text":"","code":"# S3 method for class 'CBrSPDEobj' simulate(   object,   nsim = 1,   seed = NULL,   user_nu = NULL,   user_kappa = NULL,   user_sigma = NULL,   user_range = NULL,   user_tau = NULL,   user_theta = NULL,   user_m = NULL,   ... )"},{"path":"https://davidbolin.github.io/rSPDE/reference/simulate.CBrSPDEobj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation of a fractional SPDE using the covariance-based rational SPDE approximation ‚Äî simulate.CBrSPDEobj","text":"object covariance-based rational SPDE approximation, computed using matern.operators() nsim number simulations. seed object specifying random number generator initialized (‚Äòseeded‚Äô). user_nu non-null, update shape parameter covariance function. user_kappa non-null, update range parameter covariance function. user_sigma non-null, update standard deviation covariance function. user_range non-null, update range parameter covariance function. user_tau non-null, update parameter tau. user_theta non-stationary models. non-null, update vector parameters. user_m non-null, update order rational approximation, needs positive integer. ... Currently used.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/simulate.CBrSPDEobj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulation of a fractional SPDE using the covariance-based rational SPDE approximation ‚Äî simulate.CBrSPDEobj","text":"matrix n samples columns.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/simulate.CBrSPDEobj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation of a fractional SPDE using the covariance-based rational SPDE approximation ‚Äî simulate.CBrSPDEobj","text":"","code":"# Sample a Gaussian Matern process on R using a rational approximation kappa <- 10 sigma <- 1 nu <- 0.8 range <- sqrt(8 * nu) / kappa  # create mass and stiffness matrices for a FEM discretization x <- seq(from = 0, to = 1, length.out = 101) fem <- rSPDE.fem1d(x)  # compute rational approximation of covariance function at 0.5 tau <- sqrt(gamma(nu) / (sigma^2 * kappa^(2 * nu) *   (4 * pi)^(1 / 2) * gamma(nu + 1 / 2))) op_cov <- matern.operators(   loc_mesh = x, nu = nu,   range = range, sigma = sigma, d = 1, m = 2,   parameterization = \"matern\" )  # Sample the model and plot the result Y <- simulate(op_cov) plot(x, Y, type = \"l\", ylab = \"u(x)\", xlab = \"x\")"},{"path":"https://davidbolin.github.io/rSPDE/reference/simulate.intrinsicCBrSPDEobj.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulation of a fractional intrinsic SPDE using the covariance-based rational SPDE approximation ‚Äî simulate.intrinsicCBrSPDEobj","title":"Simulation of a fractional intrinsic SPDE using the covariance-based rational SPDE approximation ‚Äî simulate.intrinsicCBrSPDEobj","text":"function samples Gaussian random field based using covariance-based rational SPDE approximation.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/simulate.intrinsicCBrSPDEobj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation of a fractional intrinsic SPDE using the covariance-based rational SPDE approximation ‚Äî simulate.intrinsicCBrSPDEobj","text":"","code":"# S3 method for class 'intrinsicCBrSPDEobj' simulate(object, nsim = 1, seed = NULL, integral.constraint = TRUE, ...)"},{"path":"https://davidbolin.github.io/rSPDE/reference/simulate.intrinsicCBrSPDEobj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation of a fractional intrinsic SPDE using the covariance-based rational SPDE approximation ‚Äî simulate.intrinsicCBrSPDEobj","text":"object covariance-based rational SPDE approximation, computed using intrinsic.matern.operators() nsim number simulations. seed object specifying random number generator initialized (‚Äòseeded‚Äô). integral.constraint contraint integral done? ... Currently used.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/simulate.intrinsicCBrSPDEobj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulation of a fractional intrinsic SPDE using the covariance-based rational SPDE approximation ‚Äî simulate.intrinsicCBrSPDEobj","text":"matrix nsim samples columns.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/simulate.rSPDEobj.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulation of a fractional SPDE using a rational SPDE approximation ‚Äî simulate.rSPDEobj","title":"Simulation of a fractional SPDE using a rational SPDE approximation ‚Äî simulate.rSPDEobj","text":"function samples Gaussian random field based pre-computed rational SPDE approximation.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/simulate.rSPDEobj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation of a fractional SPDE using a rational SPDE approximation ‚Äî simulate.rSPDEobj","text":"","code":"# S3 method for class 'rSPDEobj' simulate(object, nsim = 1, seed = NULL, ...)"},{"path":"https://davidbolin.github.io/rSPDE/reference/simulate.rSPDEobj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation of a fractional SPDE using a rational SPDE approximation ‚Äî simulate.rSPDEobj","text":"object rational SPDE approximation, computed using fractional.operators(), matern.operators(), spde.matern.operators(). nsim number simulations. seed object specifying random number generator initialized (‚Äòseeded‚Äô). ... Currently used.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/simulate.rSPDEobj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulation of a fractional SPDE using a rational SPDE approximation ‚Äî simulate.rSPDEobj","text":"matrix n samples columns.","code":""},{"path":[]},{"path":"https://davidbolin.github.io/rSPDE/reference/simulate.rSPDEobj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation of a fractional SPDE using a rational SPDE approximation ‚Äî simulate.rSPDEobj","text":"","code":"# Sample a Gaussian Matern process on R using a rational approximation kappa <- 10 sigma <- 1 nu <- 0.8 range <- sqrt(8 * nu) / kappa  # create mass and stiffness matrices for a FEM discretization x <- seq(from = 0, to = 1, length.out = 101) fem <- rSPDE.fem1d(x)  # compute rational approximation op <- matern.operators(   range = range, sigma = sigma,   nu = nu, loc_mesh = x, d = 1,   parameterization = \"matern\" )  # Sample the model and plot the result Y <- simulate(op) plot(x, Y, type = \"l\", ylab = \"u(x)\", xlab = \"x\")"},{"path":"https://davidbolin.github.io/rSPDE/reference/simulate.rSPDEobj1d.html","id":null,"dir":"Reference","previous_headings":"","what":"Simulation of a Matern field using a rational SPDE approximation ‚Äî simulate.rSPDEobj1d","title":"Simulation of a Matern field using a rational SPDE approximation ‚Äî simulate.rSPDEobj1d","text":"function samples Gaussian random field based pre-computed rational SPDE approximation.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/simulate.rSPDEobj1d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Simulation of a Matern field using a rational SPDE approximation ‚Äî simulate.rSPDEobj1d","text":"","code":"# S3 method for class 'rSPDEobj1d' simulate(object, nsim = 1, seed = NULL, ...)"},{"path":"https://davidbolin.github.io/rSPDE/reference/simulate.rSPDEobj1d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Simulation of a Matern field using a rational SPDE approximation ‚Äî simulate.rSPDEobj1d","text":"object rational SPDE approximation, computed using matern.rational(). nsim number simulations. seed object specifying random number generator initialized (‚Äòseeded‚Äô). ... Currently used.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/simulate.rSPDEobj1d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Simulation of a Matern field using a rational SPDE approximation ‚Äî simulate.rSPDEobj1d","text":"matrix n samples columns.","code":""},{"path":[]},{"path":"https://davidbolin.github.io/rSPDE/reference/simulate.rSPDEobj1d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Simulation of a Matern field using a rational SPDE approximation ‚Äî simulate.rSPDEobj1d","text":"","code":"# Sample a Gaussian Matern process on R using a rational approximation range <- 0.2 sigma <- 1 nu <- 0.8  # compute rational approximation x <- seq(from = 0, to = 1, length.out = 100) op <- matern.rational(   range = range, sigma = sigma,   nu = nu, loc = x )  # Sample the model and plot the result Y <- simulate(op) plot(x, Y, type = \"l\", ylab = \"u(x)\", xlab = \"x\")"},{"path":"https://davidbolin.github.io/rSPDE/reference/spde.make.A.html","id":null,"dir":"Reference","previous_headings":"","what":"Observation/prediction matrices for rSPDE models with integer smoothness. ‚Äî spde.make.A","title":"Observation/prediction matrices for rSPDE models with integer smoothness. ‚Äî spde.make.A","text":"Constructs observation/prediction weight matrices rSPDE models integer smoothness based inla.mesh inla.mesh.1d objects.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/spde.make.A.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Observation/prediction matrices for rSPDE models with integer smoothness. ‚Äî spde.make.A","text":"","code":"spde.make.A(   mesh = NULL,   loc = NULL,   A = NULL,   index = NULL,   group = NULL,   repl = 1L,   n.group = NULL,   n.repl = NULL )"},{"path":"https://davidbolin.github.io/rSPDE/reference/spde.make.A.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Observation/prediction matrices for rSPDE models with integer smoothness. ‚Äî spde.make.A","text":"mesh inla.mesh, inla.mesh.1d object metric_graph object. loc Locations, needed INLA mesh provided matrix standard SPDE approach, matrix returned inla.spde.make.. provided mesh provided. index observation/prediction value, index loc. Default seq_len(nrow(.loc)). group observation/prediction value, index group model. repl observation/prediction value, replicate index. n.group size group model. n.repl total number replicates.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/spde.make.A.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Observation/prediction matrices for rSPDE models with integer smoothness. ‚Äî spde.make.A","text":"\\(\\) matrix rSPDE models.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/spde.make.A.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Observation/prediction matrices for rSPDE models with integer smoothness. ‚Äî spde.make.A","text":"","code":"# \\donttest{ # devel version if (requireNamespace(\"fmesher\", quietly = TRUE)) {   library(fmesher)    set.seed(123)   loc <- matrix(runif(100 * 2) * 100, 100, 2)   mesh <- fm_mesh_2d(     loc = loc,     cutoff = 50,     max.edge = c(50, 500)   )   A <- spde.make.A(mesh, loc = loc) } # devel.tag # }"},{"path":"https://davidbolin.github.io/rSPDE/reference/spde.matern.loglike.html","id":null,"dir":"Reference","previous_headings":"","what":"Parameter-based log-likelihood for a latent Gaussian Matern SPDE model using a rational SPDE approximation ‚Äî spde.matern.loglike","title":"Parameter-based log-likelihood for a latent Gaussian Matern SPDE model using a rational SPDE approximation ‚Äî spde.matern.loglike","text":"function evaluates log-likelihood function observations Gaussian process defined solution SPDE $$(\\kappa(s) - \\Delta)^\\beta (\\tau(s)u(s)) = W.$$","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/spde.matern.loglike.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Parameter-based log-likelihood for a latent Gaussian Matern SPDE model using a rational SPDE approximation ‚Äî spde.matern.loglike","text":"","code":"spde.matern.loglike(   object,   Y,   A,   sigma.e,   mu = 0,   user_nu = NULL,   user_kappa = NULL,   user_tau = NULL,   user_theta = NULL,   user_m = NULL )"},{"path":"https://davidbolin.github.io/rSPDE/reference/spde.matern.loglike.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Parameter-based log-likelihood for a latent Gaussian Matern SPDE model using a rational SPDE approximation ‚Äî spde.matern.loglike","text":"object rational SPDE approximation, computed using spde.matern.operators() Y observations, either vector matrix columns correspond independent replicates observations. observation matrix links measurement location finite element basis. sigma.e non-null, standard deviation measurement noise kept fixed returned likelihood. mu Expectation vector latent field (default = 0). user_nu non-null, shape parameter kept fixed returned likelihood. user_kappa non-null, updates range parameter. user_tau non-null, updates parameter tau. user_theta non-null, updates parameter theta (connects tau kappa model matrices object). user_m non-null, update order rational approximation, needs positive integer.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/spde.matern.loglike.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Parameter-based log-likelihood for a latent Gaussian Matern SPDE model using a rational SPDE approximation ‚Äî spde.matern.loglike","text":"log-likelihood value.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/spde.matern.loglike.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Parameter-based log-likelihood for a latent Gaussian Matern SPDE model using a rational SPDE approximation ‚Äî spde.matern.loglike","text":"observations assumed generated \\(Y_i = u(s_i) + \\epsilon_i\\), \\(\\epsilon_i\\) iid mean-zero Gaussian variables. latent model approximated using rational approximation fractional SPDE model.","code":""},{"path":[]},{"path":"https://davidbolin.github.io/rSPDE/reference/spde.matern.loglike.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Parameter-based log-likelihood for a latent Gaussian Matern SPDE model using a rational SPDE approximation ‚Äî spde.matern.loglike","text":"","code":"# this example illustrates how the function can be used for maximum # likelihood estimation # Sample a Gaussian Matern process on R using a rational approximation sigma.e <- 0.1 n.rep <- 10 n.obs <- 100 n.x <- 51 # create mass and stiffness matrices for a FEM discretization x <- seq(from = 0, to = 1, length.out = n.x) fem <- rSPDE.fem1d(x) tau <- rep(0.5, n.x) nu <- 0.8 alpha <- nu + 1 / 2 kappa <- rep(1, n.x) # compute rational approximation op <- spde.matern.operators(   kappa = kappa, tau = tau, alpha = alpha,   parameterization = \"spde\", d = 1,   loc_mesh = x ) # Sample the model u <- simulate(op, n.rep) # Create some data obs.loc <- runif(n = n.obs, min = 0, max = 1) A <- rSPDE.A1d(x, obs.loc) noise <- rnorm(n.obs * n.rep) dim(noise) <- c(n.obs, n.rep) Y <- as.matrix(A %*% u + sigma.e * noise) # define negative likelihood function for optimization using matern.loglike mlik <- function(theta) {   return(-spde.matern.loglike(op, Y, A,     sigma.e = exp(theta[4]),     user_nu = exp(theta[3]),     user_kappa = exp(theta[2]),     user_tau = exp(theta[1])   )) } #' #The parameters can now be estimated by minimizing mlik with optim # \\donttest{ # Choose some reasonable starting values depending on the size of the domain theta0 <- log(c(1 / sqrt(var(c(Y))), sqrt(8), 0.9, 0.01)) # run estimation and display the results theta <- optim(theta0, mlik) print(data.frame(   tau = c(tau[1], exp(theta$par[1])), kappa = c(kappa[1], exp(theta$par[2])),   nu = c(nu, exp(theta$par[3])), sigma.e = c(sigma.e, exp(theta$par[4])),   row.names = c(\"Truth\", \"Estimates\") )) #>                 tau     kappa        nu    sigma.e #> Truth     0.5000000 1.0000000 0.8000000 0.10000000 #> Estimates 0.5068642 0.9608962 0.8582716 0.09821771 # }"},{"path":"https://davidbolin.github.io/rSPDE/reference/spde.matern.operators.html","id":null,"dir":"Reference","previous_headings":"","what":"Rational approximations of non-stationary Gaussian SPDE Matern random fields ‚Äî spde.matern.operators","title":"Rational approximations of non-stationary Gaussian SPDE Matern random fields ‚Äî spde.matern.operators","text":"spde.matern.operators used computing rational SPDE approximation Gaussian random fields \\(R^d\\) defined solution SPDE $$(\\kappa(s) - \\Delta)^\\beta (\\tau(s)u(s)) = W.$$","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/spde.matern.operators.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Rational approximations of non-stationary Gaussian SPDE Matern random fields ‚Äî spde.matern.operators","text":"","code":"spde.matern.operators(   kappa = NULL,   tau = NULL,   theta = NULL,   B.tau = matrix(c(0, 1, 0), 1, 3),   B.kappa = matrix(c(0, 0, 1), 1, 3),   B.sigma = matrix(c(0, 1, 0), 1, 3),   B.range = matrix(c(0, 0, 1), 1, 3),   alpha = NULL,   nu = NULL,   parameterization = c(\"spde\", \"matern\"),   G = NULL,   C = NULL,   d = NULL,   graph = NULL,   mesh = NULL,   range_mesh = NULL,   loc_mesh = NULL,   m = 1,   type = c(\"covariance\", \"operator\"),   type_rational_approximation = c(\"chebfun\", \"brasil\", \"chebfunLB\") )"},{"path":"https://davidbolin.github.io/rSPDE/reference/spde.matern.operators.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Rational approximations of non-stationary Gaussian SPDE Matern random fields ‚Äî spde.matern.operators","text":"kappa Vector , possibly spatially varying, range parameter evaluated locations mesh used finite element discretization SPDE. tau Vector , possibly spatially varying, precision parameter evaluated locations mesh used finite element discretization SPDE. theta Theta parameter connects B.tau B.kappa tau kappa log-linear regression, case parameterization spde, connects B.sigma B.range tau kappa case parameterization matern. B.tau Matrix specification log-linear model \\(\\tau\\). used parameterization = 'spde'. B.kappa Matrix specification log-linear model \\(\\kappa\\). used parameterization = 'spde'. B.sigma Matrix specification log-linear model \\(\\sigma\\). used parameterization = 'matern'. B.range Matrix specification log-linear model \\(\\rho\\), range-like parameter (exactly range parameter stationary case). used parameterization = 'matern'. alpha smoothness parameter. used parameterization 'spde'. nu Shape parameter covariance function. used parameterization 'matern'. parameterization parameterization use? matern uses range, std. deviation nu (smoothness). spde uses kappa, tau nu (smoothness). default matern. G stiffness matrix finite element discretization domain interest. C mass matrix finite element discretization domain interest. d dimension domain. need given mesh used. graph optional metric_graph object. Replaces d, C G. mesh optional inla mesh. d, C G must given mesh given. range_mesh range mesh. used provide starting values parameters. used mesh graph NULL, one parameters (kappa tau spde parameterization, sigma range matern parameterization) provided. loc_mesh mesh locations used construct matrices C G. option provided one wants use rspde_lme() function provide neither graph mesh. works 1d data. work metric graphs. metric graphs supply graph using graph argument. m order rational approximation, needs positive integer. default value 1. type type rational approximation. options \"covariance\" \"operator\". default \"covariance\". type_rational_approximation type rational approximation used? current types \"chebfun\", \"brasil\" \"chebfunLB\".","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/spde.matern.operators.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Rational approximations of non-stationary Gaussian SPDE Matern random fields ‚Äî spde.matern.operators","text":"spde.matern.operators returns object class \"rSPDEobj. object contains quantities listed output fractional.operators() well smoothness parameter \\(\\nu\\).","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/spde.matern.operators.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Rational approximations of non-stationary Gaussian SPDE Matern random fields ‚Äî spde.matern.operators","text":"approximation based rational approximation fractional operator \\((\\kappa(s)^2 -\\Delta)^\\beta\\), \\(\\beta = (\\nu + d/2)/2\\). results approximate model form $$P_l u(s) = P_r W,$$ \\(P_j = p_j(L)\\) non-fractional operators defined terms polynomials \\(p_j\\) \\(j=l,r\\). order \\(p_r\\) given m order \\(p_l\\) \\(m + m_\\beta\\) \\(m_\\beta\\) integer part \\(\\beta\\) \\(\\beta>1\\) \\(m_\\beta = 1\\) otherwise. discrete approximation can written \\(u = P_r x\\) \\(x \\sim N(0,Q^{-1})\\) \\(Q = P_l^T C^{-1} P_l\\). Note matrices \\(P_r\\) \\(Q\\) may ill-conditioned \\(m>1\\). case, metehods operator.operations() used operations involving matrices, since methods numerically stable.","code":""},{"path":[]},{"path":"https://davidbolin.github.io/rSPDE/reference/spde.matern.operators.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Rational approximations of non-stationary Gaussian SPDE Matern random fields ‚Äî spde.matern.operators","text":"","code":"# Sample non-stationary Matern field on R tau <- 1 nu <- 0.8  # create mass and stiffness matrices for a FEM discretization x <- seq(from = 0, to = 1, length.out = 101) fem <- rSPDE.fem1d(x)  # define a non-stationary range parameter kappa <- seq(from = 2, to = 20, length.out = length(x)) alpha <- nu + 1 / 2 # compute rational approximation op <- spde.matern.operators(   kappa = kappa, tau = tau, alpha = alpha,   G = fem$G, C = fem$C, d = 1 )  # sample the field u <- simulate(op)  # plot the sample plot(x, u, type = \"l\", ylab = \"u(s)\", xlab = \"s\")"},{"path":"https://davidbolin.github.io/rSPDE/reference/summary.CBrSPDEobj.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise CBrSPDE objects ‚Äî summary.CBrSPDEobj","title":"Summarise CBrSPDE objects ‚Äî summary.CBrSPDEobj","text":"Summary method class \"CBrSPDEobj\"","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/summary.CBrSPDEobj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise CBrSPDE objects ‚Äî summary.CBrSPDEobj","text":"","code":"# S3 method for class 'CBrSPDEobj' summary(object, ...)  # S3 method for class 'summary.CBrSPDEobj' print(x, ...)  # S3 method for class 'CBrSPDEobj' print(x, ...)"},{"path":"https://davidbolin.github.io/rSPDE/reference/summary.CBrSPDEobj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise CBrSPDE objects ‚Äî summary.CBrSPDEobj","text":"object object class \"CBrSPDEobj\", usually, result call matern.operators(). ... arguments passed methods. x object class \"summary.CBrSPDEobj\", usually, result call summary.CBrSPDEobj().","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/summary.CBrSPDEobj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summarise CBrSPDE objects ‚Äî summary.CBrSPDEobj","text":"","code":"# Compute the covariance-based rational approximation of a # Gaussian process with a Matern covariance function on R kappa <- 10 sigma <- 1 nu <- 0.8 range <- sqrt(8 * nu) / kappa  # create mass and stiffness matrices for a FEM discretization x <- seq(from = 0, to = 1, length.out = 101) fem <- rSPDE.fem1d(x)  # compute rational approximation of covariance function at 0.5 tau <- sqrt(gamma(nu) / (sigma^2 * kappa^(2 * nu) *   (4 * pi)^(1 / 2) * gamma(nu + 1 / 2))) op_cov <- matern.operators(   loc_mesh = x, nu = nu,   range = range, sigma = sigma, d = 1, m = 2,   parameterization = \"matern\" )  op_cov #> Type of approximation:  Covariance-Based Matern SPDE Approximation  #> Parameterization:  matern  #> Type of rational approximation:  chebfun  #> Parameters of covariance function: range =  0.2529822 , sigma =  1 , nu =  0.8  #> Order or rational approximation:  2  #> Size of discrete operators:  101  x  101  #> Stationary Model"},{"path":"https://davidbolin.github.io/rSPDE/reference/summary.rSPDEobj.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise rSPDE objects ‚Äî summary.rSPDEobj","title":"Summarise rSPDE objects ‚Äî summary.rSPDEobj","text":"Summary method class \"rSPDEobj\"","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/summary.rSPDEobj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise rSPDE objects ‚Äî summary.rSPDEobj","text":"","code":"# S3 method for class 'rSPDEobj' summary(object, ...)  # S3 method for class 'summary.rSPDEobj' print(x, ...)  # S3 method for class 'rSPDEobj' print(x, ...)"},{"path":"https://davidbolin.github.io/rSPDE/reference/summary.rSPDEobj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise rSPDE objects ‚Äî summary.rSPDEobj","text":"object object class \"rSPDEobj\", usually, result call fractional.operators(), matern.operators(), spde.matern.operators(). ... arguments passed methods. x object class \"summary.rSPDEobj\", usually, result call summary.rSPDEobj().","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/summary.rSPDEobj1d.html","id":null,"dir":"Reference","previous_headings":"","what":"Summarise rSPDE objects without FEM ‚Äî summary.rSPDEobj1d","title":"Summarise rSPDE objects without FEM ‚Äî summary.rSPDEobj1d","text":"Summary method class \"rSPDEobj1d\"","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/summary.rSPDEobj1d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summarise rSPDE objects without FEM ‚Äî summary.rSPDEobj1d","text":"","code":"# S3 method for class 'rSPDEobj1d' summary(object, ...)  # S3 method for class 'summary.rSPDEobj1d' print(x, ...)  # S3 method for class 'rSPDEobj1d' print(x, ...)"},{"path":"https://davidbolin.github.io/rSPDE/reference/summary.rSPDEobj1d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summarise rSPDE objects without FEM ‚Äî summary.rSPDEobj1d","text":"object object class \"rSPDEobj1d\", usually, result call matern.rational(). ... arguments passed methods. x object class \"summary.rSPDEobj1d\", usually, result call summary.rSPDEobj1d().","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/summary.rspde_lme.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary Method for rspde_lme Objects. ‚Äî summary.rspde_lme","title":"Summary Method for rspde_lme Objects. ‚Äî summary.rspde_lme","text":"Function providing summary results related mixed effects regression models Whittle-Matern latent models.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/summary.rspde_lme.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary Method for rspde_lme Objects. ‚Äî summary.rspde_lme","text":"","code":"# S3 method for class 'rspde_lme' summary(object, all_times = FALSE, ...)"},{"path":"https://davidbolin.github.io/rSPDE/reference/summary.rspde_lme.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary Method for rspde_lme Objects. ‚Äî summary.rspde_lme","text":"object object class \"rspde_lme\" containing results fitted model. all_times Show computed times. ... used.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/summary.rspde_lme.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary Method for rspde_lme Objects. ‚Äî summary.rspde_lme","text":"object class summary_rspde_lme containing several informations rspde_lme object.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/summary.rspde_result.html","id":null,"dir":"Reference","previous_headings":"","what":"Summary for posteriors of field parameters for an inla_rspde model from a rspde_result object ‚Äî summary.rspde_result","title":"Summary for posteriors of field parameters for an inla_rspde model from a rspde_result object ‚Äî summary.rspde_result","text":"Summary posteriors rSPDE field parameters original scales.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/summary.rspde_result.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Summary for posteriors of field parameters for an inla_rspde model from a rspde_result object ‚Äî summary.rspde_result","text":"","code":"# S3 method for class 'rspde_result' summary(object, digits = 6, ...)"},{"path":"https://davidbolin.github.io/rSPDE/reference/summary.rspde_result.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Summary for posteriors of field parameters for an inla_rspde model from a rspde_result object ‚Äî summary.rspde_result","text":"object rspde_result object. digits integer, used number formatting signif() ... Currently used.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/summary.rspde_result.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Summary for posteriors of field parameters for an inla_rspde model from a rspde_result object ‚Äî summary.rspde_result","text":"Returns data.frame containing summary.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/summary.rspde_result.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Summary for posteriors of field parameters for an inla_rspde model from a rspde_result object ‚Äî summary.rspde_result","text":"","code":"# \\donttest{ # devel version if (requireNamespace(\"INLA\", quietly = TRUE)) {   library(INLA)    set.seed(123)    m <- 100   loc_2d_mesh <- matrix(runif(m * 2), m, 2)   mesh_2d <- inla.mesh.2d(     loc = loc_2d_mesh,     cutoff = 0.05,     max.edge = c(0.1, 0.5)   )   sigma <- 1   range <- 0.2   nu <- 0.8   kappa <- sqrt(8 * nu) / range   op <- matern.operators(     mesh = mesh_2d, nu = nu,     range = range, sigma = sigma, m = 2,     parameterization = \"matern\"   )   u <- simulate(op)   A <- inla.spde.make.A(     mesh = mesh_2d,     loc = loc_2d_mesh   )   sigma.e <- 0.1   y <- A %*% u + rnorm(m) * sigma.e   Abar <- rspde.make.A(mesh = mesh_2d, loc = loc_2d_mesh)   mesh.index <- rspde.make.index(name = \"field\", mesh = mesh_2d)   st.dat <- inla.stack(     data = list(y = as.vector(y)),     A = Abar,     effects = mesh.index   )   rspde_model <- rspde.matern(     mesh = mesh_2d,     nu.upper.bound = 2   )   f <- y ~ -1 + f(field, model = rspde_model)   rspde_fit <- inla(f,     data = inla.stack.data(st.dat),     family = \"gaussian\",     control.predictor =       list(A = inla.stack.A(st.dat))   )   result <- rspde.result(rspde_fit, \"field\", rspde_model)   summary(result) } #> Warning: the mean or mode of nu is very close to nu.upper.bound, please consider increasing nu.upper.bound, and refitting the model. #>             mean         sd  0.025quant    0.5quant 0.975quant        mode #> tau    0.0133513  0.0352799 2.58003e-12 6.53981e-04   0.108924 2.58003e-12 #> kappa 27.6245000 15.5402000 1.27261e+01 2.29037e+01  70.011200 1.60429e+01 #> nu     1.5384600  0.4638680 5.44410e-01 1.71573e+00   1.999120 1.99998e+00 # devel.tag # }"},{"path":"https://davidbolin.github.io/rSPDE/reference/update.CBrSPDEobj.html","id":null,"dir":"Reference","previous_headings":"","what":"Update parameters of CBrSPDEobj objects ‚Äî update.CBrSPDEobj","title":"Update parameters of CBrSPDEobj objects ‚Äî update.CBrSPDEobj","text":"Function change parameters CBrSPDEobj object","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/update.CBrSPDEobj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update parameters of CBrSPDEobj objects ‚Äî update.CBrSPDEobj","text":"","code":"# S3 method for class 'CBrSPDEobj' update(   object,   user_nu = NULL,   user_alpha = NULL,   user_kappa = NULL,   user_tau = NULL,   user_sigma = NULL,   user_range = NULL,   user_theta = NULL,   user_m = NULL,   mesh = NULL,   loc_mesh = NULL,   graph = NULL,   range_mesh = NULL,   compute_higher_order = object$higher_order,   parameterization = NULL,   type_rational_approximation = object$type_rational_approximation,   return_block_list = object$return_block_list,   ... )"},{"path":"https://davidbolin.github.io/rSPDE/reference/update.CBrSPDEobj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update parameters of CBrSPDEobj objects ‚Äî update.CBrSPDEobj","text":"object covariance-based rational SPDE approximation, computed using matern.operators() user_nu non-null, update shape parameter covariance function. used parameterization 'matern'. user_alpha non-null, update fractional SPDE order parameter. used parameterization 'spde'. user_kappa non-null, update parameter kappa SPDE. used parameterization 'spde'. user_tau non-null, update parameter tau SPDE. used parameterization 'spde'. user_sigma non-null, update standard deviation covariance function. used parameterization 'matern'. user_range non-null, update range parameter covariance function. used parameterization 'matern'. user_theta non-stationary models. non-null, update vector parameters. user_m non-null, update order rational approximation, needs positive integer. mesh optional inla mesh. Replaces d, C G. loc_mesh mesh locations used construct matrices C G. option provided one wants use rspde_lme() function provide neither graph mesh. works 1d data. work metric graphs. metric graphs supply graph using graph argument. graph optional metric_graph object. Replaces d, C G. range_mesh range mesh. used provide starting values parameters. used mesh graph NULL, one parameters (kappa tau spde parameterization, sigma range matern parameterization) provided. compute_higher_order Logical. higher order finite element matrices computed? parameterization non-null, update parameterization. works stationary models. type_rational_approximation type rational approximation used? current types \"chebfun\", \"brasil\" \"chebfunLB\". return_block_list Logical. type = \"covariance\", block parts precision matrix returned separately list? ... Currently used.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/update.CBrSPDEobj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update parameters of CBrSPDEobj objects ‚Äî update.CBrSPDEobj","text":"returns object class \"CBrSPDEobj. object contains quantities listed output matern.operators().","code":""},{"path":[]},{"path":"https://davidbolin.github.io/rSPDE/reference/update.CBrSPDEobj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update parameters of CBrSPDEobj objects ‚Äî update.CBrSPDEobj","text":"","code":"# Compute the covariance-based rational approximation of a # Gaussian process with a Matern covariance function on R kappa <- 10 sigma <- 1 nu <- 0.8 range <- sqrt(8 * nu) / kappa  # create mass and stiffness matrices for a FEM discretization x <- seq(from = 0, to = 1, length.out = 101) fem <- rSPDE.fem1d(x)  # compute rational approximation of covariance function at 0.5 op_cov <- matern.operators(   loc_mesh = x, nu = nu,   range = range, sigma = sigma, d = 1, m = 2,   parameterization = \"matern\" ) op_cov #> Type of approximation:  Covariance-Based Matern SPDE Approximation  #> Parameterization:  matern  #> Type of rational approximation:  chebfun  #> Parameters of covariance function: range =  0.2529822 , sigma =  1 , nu =  0.8  #> Order or rational approximation:  2  #> Size of discrete operators:  101  x  101  #> Stationary Model  # Update the range parameter of the model: op_cov <- update(op_cov, user_kappa = 20) op_cov #> Type of approximation:  Covariance-Based Matern SPDE Approximation  #> Parameterization:  matern  #> Type of rational approximation:  chebfun  #> Parameters of covariance function: range =  0.2529822 , sigma =  1 , nu =  0.8  #> Order or rational approximation:  2  #> Size of discrete operators:  101  x  101  #> Stationary Model"},{"path":"https://davidbolin.github.io/rSPDE/reference/update.rSPDEobj.html","id":null,"dir":"Reference","previous_headings":"","what":"Update parameters of rSPDEobj objects ‚Äî update.rSPDEobj","title":"Update parameters of rSPDEobj objects ‚Äî update.rSPDEobj","text":"Function change parameters rSPDEobj object","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/update.rSPDEobj.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update parameters of rSPDEobj objects ‚Äî update.rSPDEobj","text":"","code":"# S3 method for class 'rSPDEobj' update(   object,   user_nu = NULL,   user_alpha = NULL,   user_kappa = NULL,   user_sigma = NULL,   user_range = NULL,   user_tau = NULL,   user_theta = NULL,   user_m = NULL,   mesh = NULL,   loc_mesh = NULL,   graph = NULL,   range_mesh = NULL,   parameterization = NULL,   ... )"},{"path":"https://davidbolin.github.io/rSPDE/reference/update.rSPDEobj.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update parameters of rSPDEobj objects ‚Äî update.rSPDEobj","text":"object operator-based rational SPDE approximation, computed using matern.operators() type=\"operator\" user_nu non-null, update shape parameter covariance function. user_alpha non-null, update fractional order. user_kappa non-null, update range parameter covariance function. user_sigma non-null, update standard deviation covariance function. user_range non-null, update range parameter covariance function. user_tau non-null, update parameter tau. user_theta non-null, update parameter theta, connects tau kappa model matrices. user_m non-null, update order rational approximation, needs positive integer. mesh optional inla mesh. Replaces d, C G. loc_mesh mesh locations used construct matrices C G. option provided one wants use rspde_lme() function provide neither graph mesh. works 1d data. work metric graphs. metric graphs supply graph using graph argument. graph optional metric_graph object. Replaces d, C G. range_mesh range mesh. used provide starting values parameters. used mesh graph NULL, one parameters (kappa tau spde parameterization, sigma range matern parameterization) provided. parameterization non-null, update parameterization. works stationary models. ... Currently used.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/update.rSPDEobj.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update parameters of rSPDEobj objects ‚Äî update.rSPDEobj","text":"returns object class \"rSPDEobj. object contains quantities listed output matern.operators().","code":""},{"path":[]},{"path":"https://davidbolin.github.io/rSPDE/reference/update.rSPDEobj.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update parameters of rSPDEobj objects ‚Äî update.rSPDEobj","text":"","code":"# Compute the operator-based rational approximation of a # Gaussian process with a Matern covariance function on R kappa <- 10 sigma <- 1 nu <- 0.8 range <- sqrt(8 * nu) / kappa  # create mass and stiffness matrices for a FEM discretization x <- seq(from = 0, to = 1, length.out = 101) fem <- rSPDE.fem1d(x)  # compute rational approximation of covariance function at 0.5 op <- matern.operators(   loc_mesh = x, nu = nu,   range = range, sigma = sigma, d = 1, m = 2, type = \"operator\",   parameterization = \"matern\" ) op #> Type of approximation:  Matern approximation  #> Parameterization:  matern  #> Parameters of covariance function: range =  0.2529822 , sigma =  1 , nu =  0.8  #> Order or rational approximation:  2  #> Size of discrete operators:  101  x  101  #> Stationary Model  # Update the range parameter of the model: op <- update(op, user_kappa = 20) op #> Type of approximation:  Matern approximation  #> Parameterization:  matern  #> Parameters of covariance function: range =  0.2529822 , sigma =  1 , nu =  0.8  #> Order or rational approximation:  2  #> Size of discrete operators:  101  x  101  #> Stationary Model"},{"path":"https://davidbolin.github.io/rSPDE/reference/update.rSPDEobj1d.html","id":null,"dir":"Reference","previous_headings":"","what":"Update parameters of rSPDEobj1d objects ‚Äî update.rSPDEobj1d","title":"Update parameters of rSPDEobj1d objects ‚Äî update.rSPDEobj1d","text":"Function change parameters rSPDEobj1d object","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/update.rSPDEobj1d.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Update parameters of rSPDEobj1d objects ‚Äî update.rSPDEobj1d","text":"","code":"# S3 method for class 'rSPDEobj1d' update(   object,   user_nu = NULL,   user_alpha = NULL,   user_kappa = NULL,   user_tau = NULL,   user_sigma = NULL,   user_range = NULL,   user_theta = NULL,   user_m = NULL,   loc = NULL,   graph = NULL,   parameterization = NULL,   type_rational_approximation = object$type_rational_approximation,   ... )"},{"path":"https://davidbolin.github.io/rSPDE/reference/update.rSPDEobj1d.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Update parameters of rSPDEobj1d objects ‚Äî update.rSPDEobj1d","text":"object covariance-based rational SPDE approximation, computed using matern.rational() user_nu non-null, update shape parameter covariance function. used parameterization 'matern'. user_alpha non-null, update fractional SPDE order parameter. used parameterization 'spde'. user_kappa non-null, update parameter kappa SPDE. used parameterization 'spde'. user_tau non-null, update parameter tau SPDE. used parameterization 'spde'. user_sigma non-null, update standard deviation covariance function. used parameterization 'matern'. user_range non-null, update range parameter covariance function. used parameterization 'matern'. user_theta non-stationary models. non-null, update vector parameters. user_m non-null, update order rational approximation, needs positive integer. loc locations interest evaluating model. graph optional metric_graph object. parameterization non-null, update parameterization. type_rational_approximation type rational approximation used? current types \"chebfun\", \"brasil\" \"chebfunLB\". ... Currently used.","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/update.rSPDEobj1d.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Update parameters of rSPDEobj1d objects ‚Äî update.rSPDEobj1d","text":"returns object class \"rSPDEobj1d\". object contains quantities listed output matern.rational().","code":""},{"path":[]},{"path":"https://davidbolin.github.io/rSPDE/reference/update.rSPDEobj1d.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Update parameters of rSPDEobj1d objects ‚Äî update.rSPDEobj1d","text":"","code":"s <- seq(from = 0, to = 1, length.out = 101) kappa <- 20 sigma <- 2 nu <- 0.8 r <- sqrt(8*nu)/kappa #range parameter op_cov <- matern.rational(loc = s, nu = nu, range = r, sigma = sigma, m = 2,  parameterization = \"matern\") cov1 <- op_cov$covariance(ind = 1) op_cov <- update(op_cov, user_range = 0.2) cov2 <- op_cov$covariance(ind = 1) plot(s, cov1, type = \"l\") lines(s, cov2, col = 2)"},{"path":"https://davidbolin.github.io/rSPDE/reference/variogram.intrinsic.spde.html","id":null,"dir":"Reference","previous_headings":"","what":"Variogram of intrinsic SPDE model ‚Äî variogram.intrinsic.spde","title":"Variogram of intrinsic SPDE model ‚Äî variogram.intrinsic.spde","text":"Variogram \\(\\gamma(s_0,s)\\) intrinsic SPDE model $$(-\\Delta)^{\\beta/2}(\\kappa^2-\\Delta)^{\\alpha/2} (\\tau u) = \\mathcal{W}$$ Neumann boundary conditions mean-zero constraint square \\([0,L]^d\\) \\(d=1\\) \\(d=2\\).","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/variogram.intrinsic.spde.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Variogram of intrinsic SPDE model ‚Äî variogram.intrinsic.spde","text":"","code":"variogram.intrinsic.spde(   s0 = NULL,   s = NULL,   kappa = NULL,   alpha = NULL,   beta = NULL,   tau = 1,   L = NULL,   N = 100,   d = NULL )"},{"path":"https://davidbolin.github.io/rSPDE/reference/variogram.intrinsic.spde.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Variogram of intrinsic SPDE model ‚Äî variogram.intrinsic.spde","text":"s0 location variogram evaluated, either double 1d vector 2d s vector (1d) matrix (2d) locations variogram computed kappa Range parameter. alpha Smoothness parameter. beta Smoothness parameter. tau Precision parameter. L side length square domain. N number terms Karhunen-Loeve expansion. d dimension (1 2).","code":""},{"path":"https://davidbolin.github.io/rSPDE/reference/variogram.intrinsic.spde.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Variogram of intrinsic SPDE model ‚Äî variogram.intrinsic.spde","text":"variogram computed based Karhunen-Loeve expansion covariance function.","code":""},{"path":[]},{"path":"https://davidbolin.github.io/rSPDE/reference/variogram.intrinsic.spde.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Variogram of intrinsic SPDE model ‚Äî variogram.intrinsic.spde","text":"","code":"if (requireNamespace(\"RSpectra\", quietly = TRUE)) {   x <- seq(from = 0, to = 10, length.out = 201)   beta <- 1   alpha <- 1   kappa <- 1   op <- intrinsic.matern.operators(     kappa = kappa, tau = 1, alpha = alpha,     beta = beta, loc_mesh = x, d = 1   )   # Compute and plot the variogram of the model   Sigma <- op$A[,-1] %*% solve(op$Q[-1,-1], t(op$A[,-1]))   One <- rep(1, times = ncol(Sigma))   D <- diag(Sigma)   Gamma <- 0.5 * (One %*% t(D) + D %*% t(One) - 2 * Sigma)   k <- 100   plot(x, Gamma[k, ], type = \"l\")   lines(x,     variogram.intrinsic.spde(x[k], x, kappa, alpha, beta, L = 10, d = 1),     col = 2, lty = 2   ) }"},{"path":"https://davidbolin.github.io/rSPDE/news/index.html","id":"rspde-development-version","dir":"Changelog","previous_headings":"","what":"rSPDE (development version)","title":"rSPDE (development version)","text":"Created group_predict function, obtain predictions testing set based observations training set. Added support stochvol, stochvol.nig stochvolln likelihoods cross_validation function. Changing default nu.upper.bound 2 dimension 1, keeping default nu.upper.bound 4 dimension 2 rspde.matern() function.","code":""},{"path":"https://davidbolin.github.io/rSPDE/news/index.html","id":"rspde-233","dir":"Changelog","previous_headings":"","what":"rSPDE 2.3.3","title":"rSPDE 2.3.3","text":"CRAN release: 2023-11-05 Bugfix rspde_lme fitting fixed smoothness. Added 2d fem interface. Moved using INLA‚Äôs mesh functions fmesher‚Äôs mesh functions. Removing rgdal suggests. data argument predict.rspde_lme changed newdata. Adding covariance_mesh cov_function_mesh methods functions list returned objects obtained matern.operators() spde.matern.operators(). Updated internal structure match updates MetricGraph package. Updated cross_validation function match updates inlabru. Added glance augment methods rspde_lme objects.","code":""},{"path":"https://davidbolin.github.io/rSPDE/news/index.html","id":"rspde-232","dir":"Changelog","previous_headings":"","what":"rSPDE 2.3.2","title":"rSPDE 2.3.2","text":"CRAN release: 2023-07-02 Small improvement speed rspde_lme. Bugfix Q small values nu dimension 1. Adding parameterization option rspde.result. Bugfix which_repl rspde_lme. Addressing issues related new version Matrix package.","code":""},{"path":"https://davidbolin.github.io/rSPDE/news/index.html","id":"rspde-231","dir":"Changelog","previous_headings":"","what":"rSPDE 2.3.1","title":"rSPDE 2.3.1","text":"CRAN release: 2023-05-25 Adding references DESCRIPTION. Changing link eigen library.","code":""},{"path":"https://davidbolin.github.io/rSPDE/news/index.html","id":"rspde-230","dir":"Changelog","previous_headings":"","what":"rSPDE 2.3.0","title":"rSPDE 2.3.0","text":"Fixed bug rSPDE.construct.matern.loglike parameterization ‚Äúmatern‚Äù. Created rspde_lme() interface, corresponding standard methods(predict, summary, etc). Updated vignettes use rspde_lme() interface instead likelihood function factory. Replaced chol Cholesky using compute determinants solve systems.","code":""},{"path":"https://davidbolin.github.io/rSPDE/news/index.html","id":"rspde-220","dir":"Changelog","previous_headings":"","what":"rSPDE 2.2.0","title":"rSPDE 2.2.0","text":"CRAN release: 2023-04-12 Adding new parameterization (variance range-like parameter) Posterior sampling predict method. Added cross_validation function several scoring rules implemented (MSE, CRPS, SCRPS, DSS) based inlabru implementation rational SPDE approach.","code":""},{"path":"https://davidbolin.github.io/rSPDE/news/index.html","id":"rspde-210","dir":"Changelog","previous_headings":"","what":"rSPDE 2.1.0","title":"rSPDE 2.1.0","text":"CRAN release: 2023-01-19 Expanded parameterization options matern.operators spde.matern.operators, along associated functions. Implementation precision method inla_rspde objects. Implementation covariance-based spde.matern.operators function associated functions. Adjusts compatibility forthcoming MetricGraph package.","code":""},{"path":"https://davidbolin.github.io/rSPDE/news/index.html","id":"rspde-200","dir":"Changelog","previous_headings":"","what":"rSPDE 2.0.0","title":"rSPDE 2.0.0","text":"Added cgeneric versions nonstationary models Added support metric graphs (depends MetricGraph package) Added cgeneric versions stationary models Replaced rgeneric models cgeneric counterparts Added new parameterization (range std. dev) Created new method gg_df help posterior plotting ggplot2","code":""},{"path":"https://davidbolin.github.io/rSPDE/news/index.html","id":"rspde-120","dir":"Changelog","previous_headings":"","what":"rSPDE 1.2.0","title":"rSPDE 1.2.0","text":"CRAN release: 2022-09-16 Added inlabru interface Added ‚Äúrational.order‚Äù ‚Äúrational.type‚Äù functions Added BRASIL rational approximation Improved covariance-based operator objects Improved log-likelihood computation Created 2d folded Matern different boundary conditions Implemented different boundary conditions 1d folded Matern","code":""},{"path":"https://davidbolin.github.io/rSPDE/news/index.html","id":"rspde-111","dir":"Changelog","previous_headings":"","what":"rSPDE 1.1.1","title":"rSPDE 1.1.1","text":"CRAN release: 2022-01-14 Adjusts donttest examples CRAN","code":""},{"path":"https://davidbolin.github.io/rSPDE/news/index.html","id":"rspde-110","dir":"Changelog","previous_headings":"","what":"rSPDE 1.1.0","title":"rSPDE 1.1.0","text":"Minor typos vignettes man pages corrected examples changed improve numerical stability","code":""},{"path":"https://davidbolin.github.io/rSPDE/news/index.html","id":"rspde-100","dir":"Changelog","previous_headings":"","what":"rSPDE 1.0.0","title":"rSPDE 1.0.0","text":"CRAN release: 2021-12-13 Implementation covariance-based rational approximation stationary Mat√©rn models R-INLA implementation rational SPDE approach Added introduction rSPDE vignette previous vignette updated became operator-based rational approximation vignette Added vignette R-INLA implementation SPDE approach Added vignette present rational approximation using rSPDE package Backward compatibility maintained","code":""},{"path":"https://davidbolin.github.io/rSPDE/news/index.html","id":"rspde-063","dir":"Changelog","previous_headings":"","what":"rSPDE 0.6.3","title":"rSPDE 0.6.3","text":"CRAN release: 2021-10-14 Change inline citations Vignette avoid problems CRAN","code":""},{"path":"https://davidbolin.github.io/rSPDE/news/index.html","id":"rspde-062","dir":"Changelog","previous_headings":"","what":"rSPDE 0.6.2","title":"rSPDE 0.6.2","text":"CRAN release: 2021-02-23","code":""},{"path":"https://davidbolin.github.io/rSPDE/news/index.html","id":"rspde-061","dir":"Changelog","previous_headings":"","what":"rSPDE 0.6.1","title":"rSPDE 0.6.1","text":"Add rgdal suggested package","code":""},{"path":"https://davidbolin.github.io/rSPDE/news/index.html","id":"rspde-050","dir":"Changelog","previous_headings":"","what":"rSPDE 0.5.0","title":"rSPDE 0.5.0","text":"Remove dependency INLA Vignette CRAN Update citation","code":""}]
